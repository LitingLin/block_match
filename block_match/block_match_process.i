#line 1 "block_match_process.cpp"
#line 1 "d:\\git\\block_match\\block_match\\block_match.h"
#pragma once





#line 8 "d:\\git\\block_match\\block_match\\block_match.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdbool.h"




















#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdbool.h"





#line 10 "d:\\git\\block_match\\block_match\\block_match.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stddef.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"





















    
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"






    
    

#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
        
            
        

#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    #line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"













#pragma once







































































































































#line 151 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"



#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"





























#line 185 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"


#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"

#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"





#line 196 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"



#line 200 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"











#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"








#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"































































































































































































































































































































































































































































































#pragma region Input Buffer SAL 1 compatibility macros



























































































































































































































































































































































































































































































































































































































































































































































































#pragma endregion Input Buffer SAL 1 compatibility macros

















































































#line 1555 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






























#line 1586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
























#line 1611 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"












#line 1624 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






































#line 1663 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"















































































































#line 1775 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






































































































#line 1878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"








































































































































































#line 2047 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"





































































































#line 2149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"



















































































































































































































#line 2361 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
extern "C" {




#line 2367 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"



































































































































































































































#line 2595 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

    
    
    
    

    
    

#line 2634 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"









































































































































































































































#line 2868 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"









#line 2878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"


    
    
#line 2883 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






#line 2890 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#line 2891 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






#line 2898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"
#line 2899 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"











#line 2911 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"

































#line 2945 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"






















}
#line 2969 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"


















#pragma once


extern "C" {
#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"
















































































































































































































































#line 265 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"



#line 269 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"


















































































#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"


}
#line 356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"

#line 358 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ConcurrencySal.h"
#line 2971 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\sal.h"


#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"










#pragma once



#pragma pack(push, 8)


extern "C" {
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"



#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


    
    
        typedef unsigned __int64  uintptr_t;
    

#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


    
    


        typedef char* va_list;
    #line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


    


#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"





#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"



#line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"
    
    
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"











#line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"







#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"











#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"











#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"

    void __cdecl __va_start(va_list* , ...);

    
    



    

#line 116 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


} 
#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"


    extern "C++"
    {
        template <typename _Ty>
        struct __vcrt_va_list_is_reference
        {
            enum : bool { __the_value = false };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        struct __vcrt_va_list_is_reference<_Ty&&>
        {
            enum : bool { __the_value = true };
        };

        template <typename _Ty>
        void __vcrt_va_start_verify_argument_type() throw()
        {
            static_assert(!__vcrt_va_list_is_reference<_Ty>::__the_value, "va_start argument must not have reference type and must not be parenthesized");
        }
    } 

    





#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vadefs.h"

#pragma pack(pop)
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"






    



    





















#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

__pragma(pack(push, 8)) extern "C" {




    
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


















    

#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

#line 113 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
        
    

#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    





#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
        
    #line 129 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 130 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"







#line 138 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"





#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    
    
#line 149 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"




    
#line 155 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"








    


#line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"



#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
    
#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"




    
#line 179 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
        
        
    

#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"






    typedef unsigned __int64 size_t;
    typedef __int64          ptrdiff_t;
    typedef __int64          intptr_t;




#line 202 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    typedef bool  __vcrt_bool;






#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"



    
#line 217 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
#line 225 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"








    
        
    

#line 238 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    


#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    extern "C++"
    {
        template <typename _CountofType, size_t _SizeOfArray>
        char (*__countof_helper(__unaligned _CountofType (&_Array)[_SizeOfArray]))[_SizeOfArray];

        
    }


#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"






#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    


        




    #line 275 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"



#line 280 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"


    
        
    


#line 288 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 289 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"









    void __cdecl __security_init_cookie(void);

    



        void __cdecl __security_check_cookie(  uintptr_t _StackCookie);
        __declspec(noreturn) void __cdecl __report_gsfailure(  uintptr_t _StackCookie);
    #line 307 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 308 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

extern uintptr_t __security_cookie;


    
    
    
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"

} __pragma(pack(pop))

#line 320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"
#line 11 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"

__pragma(pack(push, 8)) extern "C" {









    

#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
        
    

#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"




    
#line 36 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"


    

#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
        
    

#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"



#line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
    
#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"



#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
    
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"





#line 64 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
    
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"





    
#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"













    


        
    #line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"



#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
    
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"



#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
    
#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"



#line 108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
    
#line 110 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"









extern "C++"
{
    template<bool _Enable, typename _Ty>
    struct _CrtEnableIf;

    template<typename _Ty>
    struct _CrtEnableIf<true, _Ty>
    {
        typedef _Ty _Type;
    };
}
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"


    typedef bool  __crt_bool;


#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"










    
#line 149 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"











#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"


    
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"









    











        
    #line 188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
#line 189 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"


    
#line 193 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"


    
        
    

#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
#line 201 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"

























__declspec(dllimport) void __cdecl _invalid_parameter_noinfo(void);
__declspec(dllimport) __declspec(noreturn) void __cdecl _invalid_parameter_noinfo_noreturn(void);

__declspec(noreturn)
__declspec(dllimport) void __cdecl _invoke_watson(
      wchar_t const*,
      wchar_t const*,
      wchar_t const*,
            unsigned int,
            uintptr_t);


    



        
        
        
        
        
        
        
        
        
        
        
        

    #line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
#line 257 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"










#line 268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"


    


        


    #line 277 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
#line 278 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"









    






        
    #line 296 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
#line 297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"


    


        
    #line 304 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
#line 305 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"



#line 309 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"













#line 323 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"




















    
#line 345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"



#line 349 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"


    

#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"


    


        


            
        #line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
    #line 366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
#line 367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"



#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"





#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"


    


        



    #line 387 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
#line 388 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"


    
        
    



#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"

    
        
        
        
    



#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"

    
        
              
        

#line 414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
    



#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"

    
        
    



#line 427 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"

    
        
    



#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"


    
#line 440 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"








typedef int                           errno_t;
typedef unsigned short                wint_t;
typedef unsigned short                wctype_t;
typedef long                          __time32_t;
typedef __int64                       __time64_t;

typedef struct __crt_locale_data_public
{
      unsigned short const* _locale_pctype;
      int _locale_mb_cur_max;
               unsigned int _locale_lc_codepage;
} __crt_locale_data_public;

typedef struct __crt_locale_pointers
{
    struct __crt_locale_data*    locinfo;
    struct __crt_multibyte_data* mbcinfo;
} __crt_locale_pointers;

typedef __crt_locale_pointers* _locale_t; 

typedef struct _Mbstatet
{ 
    unsigned long _Wchar;
    unsigned short _Byte, _State;
} _Mbstatet;

typedef _Mbstatet mbstate_t;



#line 480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"



#line 484 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"


    


        typedef __time64_t time_t;
    #line 491 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
#line 492 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"



    
#line 497 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"


    typedef size_t rsize_t;
#line 501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"










    

        










        










        










        










        










        










        










        










        










        















        















        
















    














#line 677 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
#line 678 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"












































































    





































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1753 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"

        
        
        
        

        


        


        


        


        


        


        


        


        



        



        


        


        


        


        


        


        


        


        


        


        



        



        



        


        



        




        

        




        

        




        

        




        

        




        

        




        

        




        

        




        

    #line 1897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"
#line 1898 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt.h"



} __pragma(pack(pop))

#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stddef.h"

__pragma(pack(push, 8)) extern "C" {




    namespace std
    {
        typedef decltype(__nullptr) nullptr_t;
    }

    using ::std::nullptr_t;
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stddef.h"




__declspec(dllimport) int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);



    
        
    

#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stddef.h"


#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stddef.h"

__declspec(dllimport) extern unsigned long  __cdecl __threadid(void);

__declspec(dllimport) extern uintptr_t __cdecl __threadhandle(void);



} __pragma(pack(pop))
#line 11 "d:\\git\\block_match\\block_match\\block_match.h"

enum Method { MSE, CC };
extern "C"
bool initialize(void **instance, int matA_M, int matA_N, int matB_M, int matB_N, int block_M, int block_N, int neighbour_M, int neighbour_N, int stride_M, int stride_N);
extern "C"
bool process(void *instance, float *matA, float *matB, enum Method method, float **result, int *dimensionOfResult);
extern "C"
void finalize(void *instance);
extern "C"
bool reset();

extern "C"
void onLoad();
extern "C"
void atExit();#line 2 "block_match_process.cpp"

#line 1 "d:\\git\\block_match\\block_match\\block_match_internal.h"
#pragma once

#line 1 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"




























































#line 62 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#pragma warning(push)
#pragma warning(disable: 4820)
#line 65 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 66 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"












#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"






































































































































































































































































#line 264 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"

#line 266 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_config.h"
#line 79 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"







#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"


























































































#line 92 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"










#line 103 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"








































#line 144 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"








#line 155 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"



#line 159 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"













#line 173 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"










#line 185 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"













        














#line 214 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
























#line 239 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"


#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"







enum  cudaRoundMode
{
    cudaRoundNearest,
    cudaRoundZero,
    cudaRoundPosInf,
    cudaRoundMinInf
};

#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"
















#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"

__pragma(pack(push, 8)) extern "C" {









    
    



#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"









































#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"


    
        
    

#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"
#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"


    
        
    #line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits.h"



} __pragma(pack(pop))
#line 71 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

















 





















































#line 143 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"










enum  cudaError
{
    




    cudaSuccess                           =      0,
  
    



    cudaErrorMissingConfiguration         =      1,
  
    



    cudaErrorMemoryAllocation             =      2,
  
    



    cudaErrorInitializationError          =      3,
  
    







    cudaErrorLaunchFailure                =      4,
  
    






    cudaErrorPriorLaunchFailure           =      5,
  
    







    cudaErrorLaunchTimeout                =      6,
  
    






    cudaErrorLaunchOutOfResources         =      7,
  
    



    cudaErrorInvalidDeviceFunction        =      8,
  
    






    cudaErrorInvalidConfiguration         =      9,
  
    



    cudaErrorInvalidDevice                =     10,
  
    



    cudaErrorInvalidValue                 =     11,
  
    



    cudaErrorInvalidPitchValue            =     12,
  
    



    cudaErrorInvalidSymbol                =     13,
  
    


    cudaErrorMapBufferObjectFailed        =     14,
  
    


    cudaErrorUnmapBufferObjectFailed      =     15,
  
    



    cudaErrorInvalidHostPointer           =     16,
  
    



    cudaErrorInvalidDevicePointer         =     17,
  
    



    cudaErrorInvalidTexture               =     18,
  
    



    cudaErrorInvalidTextureBinding        =     19,
  
    




    cudaErrorInvalidChannelDescriptor     =     20,
  
    



    cudaErrorInvalidMemcpyDirection       =     21,
  
    







    cudaErrorAddressOfConstant            =     22,
  
    






    cudaErrorTextureFetchFailed           =     23,
  
    






    cudaErrorTextureNotBound              =     24,
  
    






    cudaErrorSynchronizationError         =     25,
  
    



    cudaErrorInvalidFilterSetting         =     26,
  
    



    cudaErrorInvalidNormSetting           =     27,
  
    





    cudaErrorMixedDeviceExecution         =     28,
  
    




    cudaErrorCudartUnloading              =     29,
  
    


    cudaErrorUnknown                      =     30,

    





    cudaErrorNotYetImplemented            =     31,
  
    






    cudaErrorMemoryValueTooLarge          =     32,
  
    




    cudaErrorInvalidResourceHandle        =     33,
  
    





    cudaErrorNotReady                     =     34,
  
    




    cudaErrorInsufficientDriver           =     35,
  
    










    cudaErrorSetOnActiveProcess           =     36,
  
    



    cudaErrorInvalidSurface               =     37,
  
    



    cudaErrorNoDevice                     =     38,
  
    



    cudaErrorECCUncorrectable             =     39,
  
    


    cudaErrorSharedObjectSymbolNotFound   =     40,
  
    


    cudaErrorSharedObjectInitFailed       =     41,
  
    



    cudaErrorUnsupportedLimit             =     42,
  
    



    cudaErrorDuplicateVariableName        =     43,
  
    



    cudaErrorDuplicateTextureName         =     44,
  
    



    cudaErrorDuplicateSurfaceName         =     45,
  
    







    cudaErrorDevicesUnavailable           =     46,
  
    


    cudaErrorInvalidKernelImage           =     47,
  
    





    cudaErrorNoKernelImageForDevice       =     48,
  
    










    cudaErrorIncompatibleDriverContext    =     49,
      
    




    cudaErrorPeerAccessAlreadyEnabled     =     50,
    
    




    cudaErrorPeerAccessNotEnabled         =     51,
    
    



    cudaErrorDeviceAlreadyInUse           =     54,

    




    cudaErrorProfilerDisabled             =     55,

    





    cudaErrorProfilerNotInitialized       =     56,

    




    cudaErrorProfilerAlreadyStarted       =     57,

    




     cudaErrorProfilerAlreadyStopped       =    58,

    





    cudaErrorAssert                        =    59,
  
    




    cudaErrorTooManyPeers                 =     60,
  
    



    cudaErrorHostMemoryAlreadyRegistered  =     61,
        
    



    cudaErrorHostMemoryNotRegistered      =     62,

    


    cudaErrorOperatingSystem              =     63,

    



    cudaErrorPeerAccessUnsupported        =     64,

    




    cudaErrorLaunchMaxDepthExceeded       =     65,

    





    cudaErrorLaunchFileScopedTex          =     66,

    





    cudaErrorLaunchFileScopedSurf         =     67,

    












    cudaErrorSyncDepthExceeded            =     68,

    









    cudaErrorLaunchPendingCountExceeded   =     69,
    
    


    cudaErrorNotPermitted                 =     70,

    



    cudaErrorNotSupported                 =     71,

    






    cudaErrorHardwareStackError           =     72,

    





    cudaErrorIllegalInstruction           =     73,

    






    cudaErrorMisalignedAddress            =     74,

    








    cudaErrorInvalidAddressSpace          =     75,

    





    cudaErrorInvalidPc                    =     76,

    





    cudaErrorIllegalAddress               =     77,

    



    cudaErrorInvalidPtx                   =     78,

    


    cudaErrorInvalidGraphicsContext       =     79,


    


    cudaErrorStartupFailure               =   0x7f,

    





    cudaErrorApiFailureBase               =  10000
};




enum  cudaChannelFormatKind
{
    cudaChannelFormatKindSigned           =   0,      
    cudaChannelFormatKindUnsigned         =   1,      
    cudaChannelFormatKindFloat            =   2,      
    cudaChannelFormatKindNone             =   3       
};




struct  cudaChannelFormatDesc
{
    int                        x; 
    int                        y; 
    int                        z; 
    int                        w; 
    enum cudaChannelFormatKind f; 
};




typedef struct cudaArray *cudaArray_t;




typedef const struct cudaArray *cudaArray_const_t;

struct cudaArray;




typedef struct cudaMipmappedArray *cudaMipmappedArray_t;




typedef const struct cudaMipmappedArray *cudaMipmappedArray_const_t;

struct cudaMipmappedArray;




enum  cudaMemoryType
{
    cudaMemoryTypeHost   = 1, 
    cudaMemoryTypeDevice = 2  
};




enum  cudaMemcpyKind
{
    cudaMemcpyHostToHost          =   0,      
    cudaMemcpyHostToDevice        =   1,      
    cudaMemcpyDeviceToHost        =   2,      
    cudaMemcpyDeviceToDevice      =   3,      
    cudaMemcpyDefault             =   4       
};






struct  cudaPitchedPtr
{
    void   *ptr;      
    size_t  pitch;    
    size_t  xsize;    
    size_t  ysize;    
};






struct  cudaExtent
{
    size_t width;     
    size_t height;    
    size_t depth;     
};






struct  cudaPos
{
    size_t x;     
    size_t y;     
    size_t z;     
};




struct  cudaMemcpy3DParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
  
    struct cudaExtent      extent;    
    enum cudaMemcpyKind    kind;      
};




struct  cudaMemcpy3DPeerParms
{
    cudaArray_t            srcArray;  
    struct cudaPos         srcPos;    
    struct cudaPitchedPtr  srcPtr;    
    int                    srcDevice; 
  
    cudaArray_t            dstArray;  
    struct cudaPos         dstPos;    
    struct cudaPitchedPtr  dstPtr;    
    int                    dstDevice; 
  
    struct cudaExtent      extent;    
};




struct cudaGraphicsResource;




enum  cudaGraphicsRegisterFlags
{
    cudaGraphicsRegisterFlagsNone             = 0,  
    cudaGraphicsRegisterFlagsReadOnly         = 1,   
    cudaGraphicsRegisterFlagsWriteDiscard     = 2,  
    cudaGraphicsRegisterFlagsSurfaceLoadStore = 4,  
    cudaGraphicsRegisterFlagsTextureGather    = 8   
};




enum  cudaGraphicsMapFlags
{
    cudaGraphicsMapFlagsNone         = 0,  
    cudaGraphicsMapFlagsReadOnly     = 1,  
    cudaGraphicsMapFlagsWriteDiscard = 2   
};




enum  cudaGraphicsCubeFace 
{
    cudaGraphicsCubeFacePositiveX = 0x00, 
    cudaGraphicsCubeFaceNegativeX = 0x01, 
    cudaGraphicsCubeFacePositiveY = 0x02, 
    cudaGraphicsCubeFaceNegativeY = 0x03, 
    cudaGraphicsCubeFacePositiveZ = 0x04, 
    cudaGraphicsCubeFaceNegativeZ = 0x05  
};




enum  cudaResourceType
{
    cudaResourceTypeArray          = 0x00, 
    cudaResourceTypeMipmappedArray = 0x01, 
    cudaResourceTypeLinear         = 0x02, 
    cudaResourceTypePitch2D        = 0x03  
};




enum  cudaResourceViewFormat
{
    cudaResViewFormatNone                      = 0x00, 
    cudaResViewFormatUnsignedChar1             = 0x01, 
    cudaResViewFormatUnsignedChar2             = 0x02, 
    cudaResViewFormatUnsignedChar4             = 0x03, 
    cudaResViewFormatSignedChar1               = 0x04, 
    cudaResViewFormatSignedChar2               = 0x05, 
    cudaResViewFormatSignedChar4               = 0x06, 
    cudaResViewFormatUnsignedShort1            = 0x07, 
    cudaResViewFormatUnsignedShort2            = 0x08, 
    cudaResViewFormatUnsignedShort4            = 0x09, 
    cudaResViewFormatSignedShort1              = 0x0a, 
    cudaResViewFormatSignedShort2              = 0x0b, 
    cudaResViewFormatSignedShort4              = 0x0c, 
    cudaResViewFormatUnsignedInt1              = 0x0d, 
    cudaResViewFormatUnsignedInt2              = 0x0e, 
    cudaResViewFormatUnsignedInt4              = 0x0f, 
    cudaResViewFormatSignedInt1                = 0x10, 
    cudaResViewFormatSignedInt2                = 0x11, 
    cudaResViewFormatSignedInt4                = 0x12, 
    cudaResViewFormatHalf1                     = 0x13, 
    cudaResViewFormatHalf2                     = 0x14, 
    cudaResViewFormatHalf4                     = 0x15, 
    cudaResViewFormatFloat1                    = 0x16, 
    cudaResViewFormatFloat2                    = 0x17, 
    cudaResViewFormatFloat4                    = 0x18, 
    cudaResViewFormatUnsignedBlockCompressed1  = 0x19, 
    cudaResViewFormatUnsignedBlockCompressed2  = 0x1a, 
    cudaResViewFormatUnsignedBlockCompressed3  = 0x1b, 
    cudaResViewFormatUnsignedBlockCompressed4  = 0x1c, 
    cudaResViewFormatSignedBlockCompressed4    = 0x1d, 
    cudaResViewFormatUnsignedBlockCompressed5  = 0x1e, 
    cudaResViewFormatSignedBlockCompressed5    = 0x1f, 
    cudaResViewFormatUnsignedBlockCompressed6H = 0x20, 
    cudaResViewFormatSignedBlockCompressed6H   = 0x21, 
    cudaResViewFormatUnsignedBlockCompressed7  = 0x22  
};




struct  cudaResourceDesc {
	enum cudaResourceType resType;             
	
	union {
		struct {
			cudaArray_t array;                 
		} array;
        struct {
            cudaMipmappedArray_t mipmap;       
        } mipmap;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t sizeInBytes;                
		} linear;
		struct {
			void *devPtr;                      
			struct cudaChannelFormatDesc desc; 
			size_t width;                      
			size_t height;                     
			size_t pitchInBytes;               
		} pitch2D;
	} res;
};




struct  cudaResourceViewDesc
{
    enum cudaResourceViewFormat format;           
    size_t                      width;            
    size_t                      height;           
    size_t                      depth;            
    unsigned int                firstMipmapLevel; 
    unsigned int                lastMipmapLevel;  
    unsigned int                firstLayer;       
    unsigned int                lastLayer;        
};




struct  cudaPointerAttributes
{
    



    enum cudaMemoryType memoryType;

    








    int device;

    



    void *devicePointer;

    



    void *hostPointer;

    


    int isManaged;
};




struct  cudaFuncAttributes
{
   




   size_t sharedSizeBytes;

   



   size_t constSizeBytes;

   


   size_t localSizeBytes;

   




   int maxThreadsPerBlock;

   


   int numRegs;

   




   int ptxVersion;

   




   int binaryVersion;

   



   int cacheModeCA;
};




enum  cudaFuncCache
{
    cudaFuncCachePreferNone   = 0,    
    cudaFuncCachePreferShared = 1,    
    cudaFuncCachePreferL1     = 2,    
    cudaFuncCachePreferEqual  = 3     
};





enum  cudaSharedMemConfig
{
    cudaSharedMemBankSizeDefault   = 0,
    cudaSharedMemBankSizeFourByte  = 1,
    cudaSharedMemBankSizeEightByte = 2
};




enum  cudaComputeMode
{
    cudaComputeModeDefault          = 0,  
    cudaComputeModeExclusive        = 1,  
    cudaComputeModeProhibited       = 2,  
    cudaComputeModeExclusiveProcess = 3   
};




enum  cudaLimit
{
    cudaLimitStackSize                    = 0x00, 
    cudaLimitPrintfFifoSize               = 0x01, 
    cudaLimitMallocHeapSize               = 0x02, 
    cudaLimitDevRuntimeSyncDepth          = 0x03, 
    cudaLimitDevRuntimePendingLaunchCount = 0x04  
};




enum  cudaMemoryAdvise
{
    cudaMemAdviseSetReadMostly          = 1, 
    cudaMemAdviseUnsetReadMostly        = 2, 
    cudaMemAdviseSetPreferredLocation   = 3, 
    cudaMemAdviseUnsetPreferredLocation = 4, 
    cudaMemAdviseSetAccessedBy          = 5, 
    cudaMemAdviseUnsetAccessedBy        = 6  
};




enum  cudaOutputMode
{
    cudaKeyValuePair    = 0x00, 
    cudaCSV             = 0x01  
};




enum  cudaDeviceAttr
{
    cudaDevAttrMaxThreadsPerBlock             = 1,  
    cudaDevAttrMaxBlockDimX                   = 2,  
    cudaDevAttrMaxBlockDimY                   = 3,  
    cudaDevAttrMaxBlockDimZ                   = 4,  
    cudaDevAttrMaxGridDimX                    = 5,  
    cudaDevAttrMaxGridDimY                    = 6,  
    cudaDevAttrMaxGridDimZ                    = 7,  
    cudaDevAttrMaxSharedMemoryPerBlock        = 8,  
    cudaDevAttrTotalConstantMemory            = 9,  
    cudaDevAttrWarpSize                       = 10, 
    cudaDevAttrMaxPitch                       = 11, 
    cudaDevAttrMaxRegistersPerBlock           = 12, 
    cudaDevAttrClockRate                      = 13, 
    cudaDevAttrTextureAlignment               = 14, 
    cudaDevAttrGpuOverlap                     = 15, 
    cudaDevAttrMultiProcessorCount            = 16, 
    cudaDevAttrKernelExecTimeout              = 17, 
    cudaDevAttrIntegrated                     = 18, 
    cudaDevAttrCanMapHostMemory               = 19, 
    cudaDevAttrComputeMode                    = 20, 
    cudaDevAttrMaxTexture1DWidth              = 21, 
    cudaDevAttrMaxTexture2DWidth              = 22, 
    cudaDevAttrMaxTexture2DHeight             = 23, 
    cudaDevAttrMaxTexture3DWidth              = 24, 
    cudaDevAttrMaxTexture3DHeight             = 25, 
    cudaDevAttrMaxTexture3DDepth              = 26, 
    cudaDevAttrMaxTexture2DLayeredWidth       = 27, 
    cudaDevAttrMaxTexture2DLayeredHeight      = 28, 
    cudaDevAttrMaxTexture2DLayeredLayers      = 29, 
    cudaDevAttrSurfaceAlignment               = 30, 
    cudaDevAttrConcurrentKernels              = 31, 
    cudaDevAttrEccEnabled                     = 32, 
    cudaDevAttrPciBusId                       = 33, 
    cudaDevAttrPciDeviceId                    = 34, 
    cudaDevAttrTccDriver                      = 35, 
    cudaDevAttrMemoryClockRate                = 36, 
    cudaDevAttrGlobalMemoryBusWidth           = 37, 
    cudaDevAttrL2CacheSize                    = 38, 
    cudaDevAttrMaxThreadsPerMultiProcessor    = 39, 
    cudaDevAttrAsyncEngineCount               = 40, 
    cudaDevAttrUnifiedAddressing              = 41,     
    cudaDevAttrMaxTexture1DLayeredWidth       = 42, 
    cudaDevAttrMaxTexture1DLayeredLayers      = 43, 
    cudaDevAttrMaxTexture2DGatherWidth        = 45, 
    cudaDevAttrMaxTexture2DGatherHeight       = 46, 
    cudaDevAttrMaxTexture3DWidthAlt           = 47, 
    cudaDevAttrMaxTexture3DHeightAlt          = 48, 
    cudaDevAttrMaxTexture3DDepthAlt           = 49, 
    cudaDevAttrPciDomainId                    = 50, 
    cudaDevAttrTexturePitchAlignment          = 51, 
    cudaDevAttrMaxTextureCubemapWidth         = 52, 
    cudaDevAttrMaxTextureCubemapLayeredWidth  = 53, 
    cudaDevAttrMaxTextureCubemapLayeredLayers = 54, 
    cudaDevAttrMaxSurface1DWidth              = 55, 
    cudaDevAttrMaxSurface2DWidth              = 56, 
    cudaDevAttrMaxSurface2DHeight             = 57, 
    cudaDevAttrMaxSurface3DWidth              = 58, 
    cudaDevAttrMaxSurface3DHeight             = 59, 
    cudaDevAttrMaxSurface3DDepth              = 60, 
    cudaDevAttrMaxSurface1DLayeredWidth       = 61, 
    cudaDevAttrMaxSurface1DLayeredLayers      = 62, 
    cudaDevAttrMaxSurface2DLayeredWidth       = 63, 
    cudaDevAttrMaxSurface2DLayeredHeight      = 64, 
    cudaDevAttrMaxSurface2DLayeredLayers      = 65, 
    cudaDevAttrMaxSurfaceCubemapWidth         = 66, 
    cudaDevAttrMaxSurfaceCubemapLayeredWidth  = 67, 
    cudaDevAttrMaxSurfaceCubemapLayeredLayers = 68, 
    cudaDevAttrMaxTexture1DLinearWidth        = 69, 
    cudaDevAttrMaxTexture2DLinearWidth        = 70, 
    cudaDevAttrMaxTexture2DLinearHeight       = 71, 
    cudaDevAttrMaxTexture2DLinearPitch        = 72, 
    cudaDevAttrMaxTexture2DMipmappedWidth     = 73, 
    cudaDevAttrMaxTexture2DMipmappedHeight    = 74, 
    cudaDevAttrComputeCapabilityMajor         = 75,  
    cudaDevAttrComputeCapabilityMinor         = 76, 
    cudaDevAttrMaxTexture1DMipmappedWidth     = 77, 
    cudaDevAttrStreamPrioritiesSupported      = 78, 
    cudaDevAttrGlobalL1CacheSupported         = 79, 
    cudaDevAttrLocalL1CacheSupported          = 80, 
    cudaDevAttrMaxSharedMemoryPerMultiprocessor = 81, 
    cudaDevAttrMaxRegistersPerMultiprocessor  = 82, 
    cudaDevAttrManagedMemory                  = 83, 
    cudaDevAttrIsMultiGpuBoard                = 84, 
    cudaDevAttrMultiGpuBoardGroupID           = 85, 
    cudaDevAttrHostNativeAtomicSupported      = 86, 
    cudaDevAttrSingleToDoublePrecisionPerfRatio = 87, 
    cudaDevAttrPageableMemoryAccess           = 88, 
    cudaDevAttrConcurrentManagedAccess        = 89  
};





enum  cudaDeviceP2PAttr {
    cudaDevP2PAttrPerformanceRank              = 1, 
    cudaDevP2PAttrAccessSupported              = 2, 
    cudaDevP2PAttrNativeAtomicSupported        = 3  
};



struct  cudaDeviceProp
{
    char   name[256];                  
    size_t totalGlobalMem;             
    size_t sharedMemPerBlock;          
    int    regsPerBlock;               
    int    warpSize;                   
    size_t memPitch;                   
    int    maxThreadsPerBlock;         
    int    maxThreadsDim[3];           
    int    maxGridSize[3];             
    int    clockRate;                  
    size_t totalConstMem;              
    int    major;                      
    int    minor;                      
    size_t textureAlignment;           
    size_t texturePitchAlignment;      
    int    deviceOverlap;              
    int    multiProcessorCount;        
    int    kernelExecTimeoutEnabled;   
    int    integrated;                 
    int    canMapHostMemory;           
    int    computeMode;                
    int    maxTexture1D;               
    int    maxTexture1DMipmap;         
    int    maxTexture1DLinear;         
    int    maxTexture2D[2];            
    int    maxTexture2DMipmap[2];      
    int    maxTexture2DLinear[3];      
    int    maxTexture2DGather[2];      
    int    maxTexture3D[3];            
    int    maxTexture3DAlt[3];         
    int    maxTextureCubemap;          
    int    maxTexture1DLayered[2];     
    int    maxTexture2DLayered[3];     
    int    maxTextureCubemapLayered[2];
    int    maxSurface1D;               
    int    maxSurface2D[2];            
    int    maxSurface3D[3];            
    int    maxSurface1DLayered[2];     
    int    maxSurface2DLayered[3];     
    int    maxSurfaceCubemap;          
    int    maxSurfaceCubemapLayered[2];
    size_t surfaceAlignment;           
    int    concurrentKernels;          
    int    ECCEnabled;                 
    int    pciBusID;                   
    int    pciDeviceID;                
    int    pciDomainID;                
    int    tccDriver;                  
    int    asyncEngineCount;           
    int    unifiedAddressing;          
    int    memoryClockRate;            
    int    memoryBusWidth;             
    int    l2CacheSize;                
    int    maxThreadsPerMultiProcessor;
    int    streamPrioritiesSupported;  
    int    globalL1CacheSupported;     
    int    localL1CacheSupported;      
    size_t sharedMemPerMultiprocessor; 
    int    regsPerMultiprocessor;      
    int    managedMemory;              
    int    isMultiGpuBoard;            
    int    multiGpuBoardGroupID;       
    int    hostNativeAtomicSupported;  
    int    singleToDoublePrecisionPerfRatio; 
    int    pageableMemoryAccess;       
    int    concurrentManagedAccess;    
};















































































typedef  struct  cudaIpcEventHandle_st
{
    char reserved[64];
}cudaIpcEventHandle_t;




typedef  struct  cudaIpcMemHandle_st 
{
    char reserved[64];
}cudaIpcMemHandle_t;










typedef  enum cudaError cudaError_t;




typedef  struct CUstream_st *cudaStream_t;




typedef  struct CUevent_st *cudaEvent_t;




typedef  struct cudaGraphicsResource *cudaGraphicsResource_t;




typedef  struct CUuuid_st cudaUUID_t;




typedef  enum cudaOutputMode cudaOutputMode_t;


 

#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
























enum  cudaSurfaceBoundaryMode
{
    cudaBoundaryModeZero  = 0,    
    cudaBoundaryModeClamp = 1,    
    cudaBoundaryModeTrap  = 2     
};




enum   cudaSurfaceFormatMode
{
    cudaFormatModeForced = 0,     
    cudaFormatModeAuto = 1        
};




struct  surfaceReference
{
    


    struct cudaChannelFormatDesc channelDesc;
};




typedef  unsigned long long cudaSurfaceObject_t;


 

#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























enum  cudaTextureAddressMode
{
    cudaAddressModeWrap   = 0,    
    cudaAddressModeClamp  = 1,    
    cudaAddressModeMirror = 2,    
    cudaAddressModeBorder = 3     
};




enum  cudaTextureFilterMode
{
    cudaFilterModePoint  = 0,     
    cudaFilterModeLinear = 1      
};




enum  cudaTextureReadMode
{
    cudaReadModeElementType     = 0,  
    cudaReadModeNormalizedFloat = 1   
};




struct  textureReference
{
    


    int                          normalized;
    


    enum cudaTextureFilterMode   filterMode;
    


    enum cudaTextureAddressMode  addressMode[3];
    


    struct cudaChannelFormatDesc channelDesc;
    


    int                          sRGB;
    


    unsigned int                 maxAnisotropy;
    


    enum cudaTextureFilterMode   mipmapFilterMode;
    


    float                        mipmapLevelBias;
    


    float                        minMipmapLevelClamp;
    


    float                        maxMipmapLevelClamp;
    int                          __cudaReserved[15];
};




struct  cudaTextureDesc
{
    


    enum cudaTextureAddressMode addressMode[3];
    


    enum cudaTextureFilterMode  filterMode;
    


    enum cudaTextureReadMode    readMode;
    


    int                         sRGB;
    


    float                       borderColor[4];
    


    int                         normalizedCoords;
    


    unsigned int                maxAnisotropy;
    


    enum cudaTextureFilterMode  mipmapFilterMode;
    


    float                       mipmapLevelBias;
    


    float                       minMipmapLevelClamp;
    


    float                       maxMipmapLevelClamp;
};




typedef  unsigned long long cudaTextureObject_t;


 

#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"






















#line 89 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct  char1
{
    signed char x;
};

struct  uchar1
{
    unsigned char x;
};


struct  __declspec(align(2)) char2
{
    signed char x, y;
};

struct  __declspec(align(2)) uchar2
{
    unsigned char x, y;
};

struct  char3
{
    signed char x, y, z;
};

struct  uchar3
{
    unsigned char x, y, z;
};

struct  __declspec(align(4)) char4
{
    signed char x, y, z, w;
};

struct  __declspec(align(4)) uchar4
{
    unsigned char x, y, z, w;
};

struct  short1
{
    short x;
};

struct  ushort1
{
    unsigned short x;
};

struct  __declspec(align(4)) short2
{
    short x, y;
};

struct  __declspec(align(4)) ushort2
{
    unsigned short x, y;
};

struct  short3
{
    short x, y, z;
};

struct  ushort3
{
    unsigned short x, y, z;
};

struct  __declspec(align(8)) short4 { short x; short y; short z; short w; };
struct  __declspec(align(8)) ushort4 { unsigned short x; unsigned short y; unsigned short z; unsigned short w; };

struct  int1
{
    int x;
};

struct  uint1
{
    unsigned int x;
};

struct  __declspec(align(8)) int2 { int x; int y; };
struct  __declspec(align(8)) uint2 { unsigned int x; unsigned int y; };

struct  int3
{
    int x, y, z;
};

struct  uint3
{
    unsigned int x, y, z;
};

struct  __declspec(align(16)) int4
{
    int x, y, z, w;
};

struct  __declspec(align(16)) uint4
{
    unsigned int x, y, z, w;
};

struct  long1
{
    long int x;
};

struct  ulong1
{
    unsigned long x;
};


struct  __declspec(align(8)) long2 { long int x; long int y; };
struct  __declspec(align(8)) ulong2 { unsigned long int x; unsigned long int y; };












#line 231 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct  long3
{
    long int x, y, z;
};

struct  ulong3
{
    unsigned long int x, y, z;
};

struct  __declspec(align(16)) long4
{
    long int x, y, z, w;
};

struct  __declspec(align(16)) ulong4
{
    unsigned long int x, y, z, w;
};

struct  float1
{
    float x;
};















#line 273 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"

struct  __declspec(align(8)) float2 { float x; float y; };

#line 277 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"


struct  float3
{
    float x, y, z;
};

struct  __declspec(align(16)) float4
{
    float x, y, z, w;
};

struct  longlong1
{
    long long int x;
};

struct  ulonglong1
{
    unsigned long long int x;
};

struct  __declspec(align(16)) longlong2
{
    long long int x, y;
};

struct  __declspec(align(16)) ulonglong2
{
    unsigned long long int x, y;
};

struct  longlong3
{
    long long int x, y, z;
};

struct  ulonglong3
{
    unsigned long long int x, y, z;
};

struct  __declspec(align(16)) longlong4
{
    long long int x, y, z ,w;
};

struct  __declspec(align(16)) ulonglong4
{
    unsigned long long int x, y, z, w;
};

struct  double1
{
    double x;
};

struct  __declspec(align(16)) double2
{
    double x, y;
};

struct  double3
{
    double x, y, z;
};

struct  __declspec(align(16)) double4
{
    double x, y, z, w;
};





#line 355 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"







typedef  struct char1 char1;
typedef  struct uchar1 uchar1;
typedef  struct char2 char2;
typedef  struct uchar2 uchar2;
typedef  struct char3 char3;
typedef  struct uchar3 uchar3;
typedef  struct char4 char4;
typedef  struct uchar4 uchar4;
typedef  struct short1 short1;
typedef  struct ushort1 ushort1;
typedef  struct short2 short2;
typedef  struct ushort2 ushort2;
typedef  struct short3 short3;
typedef  struct ushort3 ushort3;
typedef  struct short4 short4;
typedef  struct ushort4 ushort4;
typedef  struct int1 int1;
typedef  struct uint1 uint1;
typedef  struct int2 int2;
typedef  struct uint2 uint2;
typedef  struct int3 int3;
typedef  struct uint3 uint3;
typedef  struct int4 int4;
typedef  struct uint4 uint4;
typedef  struct long1 long1;
typedef  struct ulong1 ulong1;
typedef  struct long2 long2;
typedef  struct ulong2 ulong2;
typedef  struct long3 long3;
typedef  struct ulong3 ulong3;
typedef  struct long4 long4;
typedef  struct ulong4 ulong4;
typedef  struct float1 float1;
typedef  struct float2 float2;
typedef  struct float3 float3;
typedef  struct float4 float4;
typedef  struct longlong1 longlong1;
typedef  struct ulonglong1 ulonglong1;
typedef  struct longlong2 longlong2;
typedef  struct ulonglong2 ulonglong2;
typedef  struct longlong3 longlong3;
typedef  struct ulonglong3 ulonglong3;
typedef  struct longlong4 longlong4;
typedef  struct ulonglong4 ulonglong4;
typedef  struct double1 double1;
typedef  struct double2 double2;
typedef  struct double3 double3;
typedef  struct double4 double4;







struct  dim3
{
    unsigned int x, y, z;

      dim3(unsigned int vx = 1, unsigned int vy = 1, unsigned int vz = 1) : x(vx), y(vy), z(vz) {}
      dim3(uint3 v) : x(v.x), y(v.y), z(v.z) {}
      operator uint3(void) { uint3 t; t.x = x; t.y = y; t.z = z; return t; }
#line 425 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
};

typedef  struct dim3 dim3;



#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 87 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"





















































typedef enum cudaDataType_t
{
	CUDA_R_16F= 2, 
	CUDA_C_16F= 6, 
	CUDA_R_32F= 0, 
	CUDA_C_32F= 4, 
	CUDA_R_64F= 1, 
	CUDA_C_64F= 5, 
	CUDA_R_8I= 3,  
	CUDA_C_8I= 7,   
	CUDA_R_8U= 8,  
	CUDA_C_8U= 9   
} cudaDataType; 


typedef enum libraryPropertyType_t
{
	MAJOR_VERSION,
	MINOR_VERSION,
	PATCH_LEVEL
} libraryPropertyType;

#line 77 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\library_types.h"
#line 88 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"




























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"




































































































































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 134 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 135 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"































































































#line 97 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"































































































































#line 225 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"

#line 227 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"

#line 229 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_device_runtime_api.h"
#line 138 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
#line 139 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"





#line 145 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
    
    
#line 148 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"









































#line 190 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"













#line 204 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"

#line 206 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"










#line 217 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"


extern "C" {
#line 221 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"































extern  cudaError_t __stdcall cudaDeviceReset(void);
















extern   cudaError_t __stdcall cudaDeviceSynchronize(void);










































































extern  cudaError_t __stdcall cudaDeviceSetLimit(enum cudaLimit limit, size_t value);




























extern   cudaError_t __stdcall cudaDeviceGetLimit(size_t *pValue, enum cudaLimit limit);






























extern   cudaError_t __stdcall cudaDeviceGetCacheConfig(enum cudaFuncCache *pCacheConfig);


































extern   cudaError_t __stdcall cudaDeviceGetStreamPriorityRange(int *leastPriority, int *greatestPriority);









































extern  cudaError_t __stdcall cudaDeviceSetCacheConfig(enum cudaFuncCache cacheConfig);




























extern   cudaError_t __stdcall cudaDeviceGetSharedMemConfig(enum cudaSharedMemConfig *pConfig);









































extern  cudaError_t __stdcall cudaDeviceSetSharedMemConfig(enum cudaSharedMemConfig config);






















extern  cudaError_t __stdcall cudaDeviceGetByPCIBusId(int *device, const char *pciBusId);


























extern  cudaError_t __stdcall cudaDeviceGetPCIBusId(char *pciBusId, int len, int device);









































extern  cudaError_t __stdcall cudaIpcGetEventHandle(cudaIpcEventHandle_t *handle, cudaEvent_t event);


































extern  cudaError_t __stdcall cudaIpcOpenEventHandle(cudaEvent_t *event, cudaIpcEventHandle_t handle);





































extern  cudaError_t __stdcall cudaIpcGetMemHandle(cudaIpcMemHandle_t *handle, void *devPtr);

















































extern  cudaError_t __stdcall cudaIpcOpenMemHandle(void **devPtr, cudaIpcMemHandle_t handle, unsigned int flags);





























extern  cudaError_t __stdcall cudaIpcCloseMemHandle(void *devPtr);

 





































extern  cudaError_t __stdcall cudaThreadExit(void);























extern  cudaError_t __stdcall cudaThreadSynchronize(void);














































extern  cudaError_t __stdcall cudaThreadSetLimit(enum cudaLimit limit, size_t value);






























extern  cudaError_t __stdcall cudaThreadGetLimit(size_t *pValue, enum cudaLimit limit);


































extern  cudaError_t __stdcall cudaThreadGetCacheConfig(enum cudaFuncCache *pCacheConfig);













































extern  cudaError_t __stdcall cudaThreadSetCacheConfig(enum cudaFuncCache cacheConfig);

 



















































extern   cudaError_t __stdcall cudaGetLastError(void);








































extern   cudaError_t __stdcall cudaPeekAtLastError(void);














extern   const char* __stdcall cudaGetErrorName(cudaError_t error);














extern   const char* __stdcall cudaGetErrorString(cudaError_t error);
 




























extern   cudaError_t __stdcall cudaGetDeviceCount(int *count);





















































































































































































































































extern   cudaError_t __stdcall cudaGetDeviceProperties(struct cudaDeviceProp *prop, int device);







































































































































































extern   cudaError_t __stdcall cudaDeviceGetAttribute(int *value, enum cudaDeviceAttr attr, int device);


































extern   cudaError_t __stdcall cudaDeviceGetP2PAttribute(int *value, enum cudaDeviceP2PAttr attr, int srcDevice, int dstDevice);


















extern  cudaError_t __stdcall cudaChooseDevice(int *device, const struct cudaDeviceProp *prop);

































extern  cudaError_t __stdcall cudaSetDevice(int device);
















extern   cudaError_t __stdcall cudaGetDevice(int *device);




























extern  cudaError_t __stdcall cudaSetValidDevices(int *device_arr, int len);





























































extern  cudaError_t __stdcall cudaSetDeviceFlags( unsigned int flags );








































extern  cudaError_t __stdcall cudaGetDeviceFlags( unsigned int *flags );
 



































extern  cudaError_t __stdcall cudaStreamCreate(cudaStream_t *pStream);




























extern   cudaError_t __stdcall cudaStreamCreateWithFlags(cudaStream_t *pStream, unsigned int flags);










































extern   cudaError_t __stdcall cudaStreamCreateWithPriority(cudaStream_t *pStream, unsigned int flags, int priority);























extern   cudaError_t __stdcall cudaStreamGetPriority(cudaStream_t hStream, int *priority);




















extern   cudaError_t __stdcall cudaStreamGetFlags(cudaStream_t hStream, unsigned int *flags);




















extern   cudaError_t __stdcall cudaStreamDestroy(cudaStream_t stream);































extern   cudaError_t __stdcall cudaStreamWaitEvent(cudaStream_t stream, cudaEvent_t event, unsigned int flags);





#line 2040 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"







typedef void (__stdcall *cudaStreamCallback_t)(cudaStream_t stream, cudaError_t status, void *userData);
























































extern  cudaError_t __stdcall cudaStreamAddCallback(cudaStream_t stream,
        cudaStreamCallback_t callback, void *userData, unsigned int flags);


















extern  cudaError_t __stdcall cudaStreamSynchronize(cudaStream_t stream);




















extern  cudaError_t __stdcall cudaStreamQuery(cudaStream_t stream);



































































extern   cudaError_t __stdcall cudaStreamAttachMemAsync(cudaStream_t stream, void *devPtr, size_t length = 0, unsigned int flags = 0x04);

 

































extern  cudaError_t __stdcall cudaEventCreate(cudaEvent_t *event);

































extern   cudaError_t __stdcall cudaEventCreateWithFlags(cudaEvent_t *event, unsigned int flags);






























extern   cudaError_t __stdcall cudaEventRecord(cudaEvent_t event, cudaStream_t stream = 0);































extern  cudaError_t __stdcall cudaEventQuery(cudaEvent_t event);































extern  cudaError_t __stdcall cudaEventSynchronize(cudaEvent_t event);
























extern   cudaError_t __stdcall cudaEventDestroy(cudaEvent_t event);








































extern  cudaError_t __stdcall cudaEventElapsedTime(float *ms, cudaEvent_t start, cudaEvent_t end);

 
























































extern  cudaError_t __stdcall cudaLaunchKernel(const void *func, dim3 gridDim, dim3 blockDim, void **args, size_t sharedMem, cudaStream_t stream);

#line 2506 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"















































extern  cudaError_t __stdcall cudaFuncSetCacheConfig(const void *func, enum cudaFuncCache cacheConfig);





















































extern  cudaError_t __stdcall cudaFuncSetSharedMemConfig(const void *func, enum cudaSharedMemConfig config);

































extern   cudaError_t __stdcall cudaFuncGetAttributes(struct cudaFuncAttributes *attr, const void *func);






















extern  cudaError_t __stdcall cudaSetDoubleForDevice(double *d);






















extern  cudaError_t __stdcall cudaSetDoubleForHost(double *d);

 





















































extern   cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessor(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize);











































extern   cudaError_t __stdcall cudaOccupancyMaxActiveBlocksPerMultiprocessorWithFlags(int *numBlocks, const void *func, int blockSize, size_t dynamicSMemSize, unsigned int flags);

 
#line 2791 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"
#line 2792 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"














































extern  cudaError_t __stdcall cudaConfigureCall(dim3 gridDim, dim3 blockDim, size_t sharedMem = 0, cudaStream_t stream = 0);




























extern  cudaError_t __stdcall cudaSetupArgument(const void *arg, size_t size, size_t offset);





































extern  cudaError_t __stdcall cudaLaunch(const void *func);


 






















































































extern   cudaError_t __stdcall cudaMallocManaged(void **devPtr, size_t size, unsigned int flags = 0x01);

























extern   cudaError_t __stdcall cudaMalloc(void **devPtr, size_t size);




























extern  cudaError_t __stdcall cudaMallocHost(void **ptr, size_t size);






































extern  cudaError_t __stdcall cudaMallocPitch(void **devPtr, size_t *pitch, size_t width, size_t height);









































extern  cudaError_t __stdcall cudaMallocArray(cudaArray_t *array, const struct cudaChannelFormatDesc *desc, size_t width, size_t height = 0, unsigned int flags = 0);


























extern   cudaError_t __stdcall cudaFree(void *devPtr);



















extern  cudaError_t __stdcall cudaFreeHost(void *ptr);





















extern  cudaError_t __stdcall cudaFreeArray(cudaArray_t array);





















extern  cudaError_t __stdcall cudaFreeMipmappedArray(cudaMipmappedArray_t mipmappedArray);


























































extern  cudaError_t __stdcall cudaHostAlloc(void **pHost, size_t size, unsigned int flags);





























































extern  cudaError_t __stdcall cudaHostRegister(void *ptr, size_t size, unsigned int flags);


















extern  cudaError_t __stdcall cudaHostUnregister(void *ptr);


























extern  cudaError_t __stdcall cudaHostGetDevicePointer(void **pDevice, void *pHost, unsigned int flags);


















extern  cudaError_t __stdcall cudaHostGetFlags(unsigned int *pFlags, void *pHost);


































extern  cudaError_t __stdcall cudaMalloc3D(struct cudaPitchedPtr* pitchedDevPtr, struct cudaExtent extent);






































































































































extern  cudaError_t __stdcall cudaMalloc3DArray(cudaArray_t *array, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int flags = 0);
























































































































extern  cudaError_t __stdcall cudaMallocMipmappedArray(cudaMipmappedArray_t *mipmappedArray, const struct cudaChannelFormatDesc* desc, struct cudaExtent extent, unsigned int numLevels, unsigned int flags = 0);

























extern  cudaError_t __stdcall cudaGetMipmappedArrayLevel(cudaArray_t *levelArray, cudaMipmappedArray_const_t mipmappedArray, unsigned int level);



































































































extern  cudaError_t __stdcall cudaMemcpy3D(const struct cudaMemcpy3DParms *p);



























extern  cudaError_t __stdcall cudaMemcpy3DPeer(const struct cudaMemcpy3DPeerParms *p);














































































































extern   cudaError_t __stdcall cudaMemcpy3DAsync(const struct cudaMemcpy3DParms *p, cudaStream_t stream = 0);






















extern  cudaError_t __stdcall cudaMemcpy3DPeerAsync(const struct cudaMemcpy3DPeerParms *p, cudaStream_t stream = 0);


















extern  cudaError_t __stdcall cudaMemGetInfo(size_t *free, size_t *total);




















extern  cudaError_t __stdcall cudaArrayGetInfo(struct cudaChannelFormatDesc *desc, struct cudaExtent *extent, unsigned int *flags, cudaArray_t array);





































extern  cudaError_t __stdcall cudaMemcpy(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind);































extern  cudaError_t __stdcall cudaMemcpyPeer(void *dst, int dstDevice, const void *src, int srcDevice, size_t count);





































extern  cudaError_t __stdcall cudaMemcpyToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind);




































extern  cudaError_t __stdcall cudaMemcpyFromArray(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind);





































extern  cudaError_t __stdcall cudaMemcpyArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t count, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);












































extern  cudaError_t __stdcall cudaMemcpy2D(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);













































extern  cudaError_t __stdcall cudaMemcpy2DToArray(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind);













































extern  cudaError_t __stdcall cudaMemcpy2DFromArray(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind);










































extern  cudaError_t __stdcall cudaMemcpy2DArrayToArray(cudaArray_t dst, size_t wOffsetDst, size_t hOffsetDst, cudaArray_const_t src, size_t wOffsetSrc, size_t hOffsetSrc, size_t width, size_t height, enum cudaMemcpyKind kind = cudaMemcpyDeviceToDevice);





































extern  cudaError_t __stdcall cudaMemcpyToSymbol(const void *symbol, const void *src, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyHostToDevice);





































extern  cudaError_t __stdcall cudaMemcpyFromSymbol(void *dst, const void *symbol, size_t count, size_t offset = 0, enum cudaMemcpyKind kind = cudaMemcpyDeviceToHost);


















































extern   cudaError_t __stdcall cudaMemcpyAsync(void *dst, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);































extern  cudaError_t __stdcall cudaMemcpyPeerAsync(void *dst, int dstDevice, const void *src, int srcDevice, size_t count, cudaStream_t stream = 0);













































extern  cudaError_t __stdcall cudaMemcpyToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);












































extern  cudaError_t __stdcall cudaMemcpyFromArrayAsync(void *dst, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t count, enum cudaMemcpyKind kind, cudaStream_t stream = 0);



























































extern   cudaError_t __stdcall cudaMemcpy2DAsync(void *dst, size_t dpitch, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);






















































extern  cudaError_t __stdcall cudaMemcpy2DToArrayAsync(cudaArray_t dst, size_t wOffset, size_t hOffset, const void *src, size_t spitch, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);





















































extern  cudaError_t __stdcall cudaMemcpy2DFromArrayAsync(void *dst, size_t dpitch, cudaArray_const_t src, size_t wOffset, size_t hOffset, size_t width, size_t height, enum cudaMemcpyKind kind, cudaStream_t stream = 0);













































extern  cudaError_t __stdcall cudaMemcpyToSymbolAsync(const void *symbol, const void *src, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);













































extern  cudaError_t __stdcall cudaMemcpyFromSymbolAsync(void *dst, const void *symbol, size_t count, size_t offset, enum cudaMemcpyKind kind, cudaStream_t stream = 0);

























extern  cudaError_t __stdcall cudaMemset(void *devPtr, int value, size_t count);





























extern  cudaError_t __stdcall cudaMemset2D(void *devPtr, size_t pitch, int value, size_t width, size_t height);










































extern  cudaError_t __stdcall cudaMemset3D(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent);































extern   cudaError_t __stdcall cudaMemsetAsync(void *devPtr, int value, size_t count, cudaStream_t stream = 0);




































extern   cudaError_t __stdcall cudaMemset2DAsync(void *devPtr, size_t pitch, int value, size_t width, size_t height, cudaStream_t stream = 0);

















































extern   cudaError_t __stdcall cudaMemset3DAsync(struct cudaPitchedPtr pitchedDevPtr, int value, struct cudaExtent extent, cudaStream_t stream = 0);






















extern  cudaError_t __stdcall cudaGetSymbolAddress(void **devPtr, const void *symbol);





















extern  cudaError_t __stdcall cudaGetSymbolSize(size_t *size, const void *symbol);








































extern  cudaError_t __stdcall cudaMemPrefetchAsync(const void *devPtr, size_t count, int dstDevice, cudaStream_t stream = 0);












































































extern  cudaError_t __stdcall cudaMemAdvise(const void *devPtr, size_t count, enum cudaMemoryAdvise advice, int device);

 






















































































































































extern  cudaError_t __stdcall cudaPointerGetAttributes(struct cudaPointerAttributes *attributes, const void *ptr);

 



































extern  cudaError_t __stdcall cudaDeviceCanAccessPeer(int *canAccessPeer, int device, int peerDevice);






































extern  cudaError_t __stdcall cudaDeviceEnablePeerAccess(int peerDevice, unsigned int flags);


















extern  cudaError_t __stdcall cudaDeviceDisablePeerAccess(int peerDevice);

 























































extern  cudaError_t __stdcall cudaGraphicsUnregisterResource(cudaGraphicsResource_t resource);































extern  cudaError_t __stdcall cudaGraphicsResourceSetMapFlags(cudaGraphicsResource_t resource, unsigned int flags);



































extern  cudaError_t __stdcall cudaGraphicsMapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);































extern  cudaError_t __stdcall cudaGraphicsUnmapResources(int count, cudaGraphicsResource_t *resources, cudaStream_t stream = 0);




























extern  cudaError_t __stdcall cudaGraphicsResourceGetMappedPointer(void **devPtr, size_t *size, cudaGraphicsResource_t resource);

































extern  cudaError_t __stdcall cudaGraphicsSubResourceGetMappedArray(cudaArray_t *array, cudaGraphicsResource_t resource, unsigned int arrayIndex, unsigned int mipLevel);
























extern  cudaError_t __stdcall cudaGraphicsResourceGetMappedMipmappedArray(cudaMipmappedArray_t *mipmappedArray, cudaGraphicsResource_t resource);

 





































extern  cudaError_t __stdcall cudaGetChannelDesc(struct cudaChannelFormatDesc *desc, cudaArray_const_t array);


































extern  struct cudaChannelFormatDesc __stdcall cudaCreateChannelDesc(int x, int y, int z, int w, enum cudaChannelFormatKind f);














































extern  cudaError_t __stdcall cudaBindTexture(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t size = 0xffffffff);


















































extern  cudaError_t __stdcall cudaBindTexture2D(size_t *offset, const struct textureReference *texref, const void *devPtr, const struct cudaChannelFormatDesc *desc, size_t width, size_t height, size_t pitch);



























extern  cudaError_t __stdcall cudaBindTextureToArray(const struct textureReference *texref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);



























extern  cudaError_t __stdcall cudaBindTextureToMipmappedArray(const struct textureReference *texref, cudaMipmappedArray_const_t mipmappedArray, const struct cudaChannelFormatDesc *desc);




















extern  cudaError_t __stdcall cudaUnbindTexture(const struct textureReference *texref);
























extern  cudaError_t __stdcall cudaGetTextureAlignmentOffset(size_t *offset, const struct textureReference *texref);
























extern  cudaError_t __stdcall cudaGetTextureReference(const struct textureReference **texref, const void *symbol);

 





































extern  cudaError_t __stdcall cudaBindSurfaceToArray(const struct surfaceReference *surfref, cudaArray_const_t array, const struct cudaChannelFormatDesc *desc);


















extern  cudaError_t __stdcall cudaGetSurfaceReference(const struct surfaceReference **surfref, const void *symbol);

 































































































































































































































extern  cudaError_t __stdcall cudaCreateTextureObject(cudaTextureObject_t *pTexObject, const struct cudaResourceDesc *pResDesc, const struct cudaTextureDesc *pTexDesc, const struct cudaResourceViewDesc *pResViewDesc);














extern  cudaError_t __stdcall cudaDestroyTextureObject(cudaTextureObject_t texObject);















extern  cudaError_t __stdcall cudaGetTextureObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaTextureObject_t texObject);















extern  cudaError_t __stdcall cudaGetTextureObjectTextureDesc(struct cudaTextureDesc *pTexDesc, cudaTextureObject_t texObject);
















extern  cudaError_t __stdcall cudaGetTextureObjectResourceViewDesc(struct cudaResourceViewDesc *pResViewDesc, cudaTextureObject_t texObject);

 




































extern  cudaError_t __stdcall cudaCreateSurfaceObject(cudaSurfaceObject_t *pSurfObject, const struct cudaResourceDesc *pResDesc);














extern  cudaError_t __stdcall cudaDestroySurfaceObject(cudaSurfaceObject_t surfObject);














extern  cudaError_t __stdcall cudaGetSurfaceObjectResourceDesc(struct cudaResourceDesc *pResDesc, cudaSurfaceObject_t surfObject);

 
























extern  cudaError_t __stdcall cudaDriverGetVersion(int *driverVersion);
















extern   cudaError_t __stdcall cudaRuntimeGetVersion(int *runtimeVersion);

 


extern  cudaError_t __stdcall cudaGetExportTable(const void **ppExportTable, const cudaUUID_t *pExportTableId);





















































































































































































































#line 6759 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"








#line 6768 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"


}

#line 6773 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"



#line 6777 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"

#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"










































template<class T> __inline  cudaChannelFormatDesc cudaCreateChannelDesc(void)
{
  return cudaCreateChannelDesc(0, 0, 0, 0, cudaChannelFormatKindNone);
}

static __inline  cudaChannelFormatDesc cudaCreateChannelDescHalf(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline  cudaChannelFormatDesc cudaCreateChannelDescHalf1(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

static __inline  cudaChannelFormatDesc cudaCreateChannelDescHalf2(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

static __inline  cudaChannelFormatDesc cudaCreateChannelDescHalf4(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<char>(void)
{
  int e = (int)sizeof(char) * 8;



#line 147 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
#line 149 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<signed char>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<unsigned char>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<char1>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<uchar1>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<char2>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<uchar2>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<char4>(void)
{
  int e = (int)sizeof(signed char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<uchar4>(void)
{
  int e = (int)sizeof(unsigned char) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<short>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<unsigned short>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<short1>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<ushort1>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<short2>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<ushort2>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<short4>(void)
{
  int e = (int)sizeof(short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<ushort4>(void)
{
  int e = (int)sizeof(unsigned short) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<int>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<unsigned int>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<int1>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<uint1>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<int2>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<uint2>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<int4>(void)
{
  int e = (int)sizeof(int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<uint4>(void)
{
  int e = (int)sizeof(unsigned int) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}



template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<long>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<unsigned long>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<long1>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<ulong1>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<long2>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindSigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<ulong2>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindUnsigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<long4>(void)
{
  int e = (int)sizeof(long) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindSigned);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<ulong4>(void)
{
  int e = (int)sizeof(unsigned long) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindUnsigned);
}

#line 378 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<float>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<float1>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, 0, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<float2>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, 0, 0, cudaChannelFormatKindFloat);
}

template<> __inline  cudaChannelFormatDesc cudaCreateChannelDesc<float4>(void)
{
  int e = (int)sizeof(float) * 8;

  return cudaCreateChannelDesc(e, e, e, e, cudaChannelFormatKindFloat);
}

#line 408 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"


 

#line 413 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\channel_descriptor.h"
#line 91 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"























































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 6777 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\cuda_runtime_api.h"

#line 92 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"




















































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 54 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 55 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 56 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"























static __inline  struct cudaPitchedPtr make_cudaPitchedPtr(void *d, size_t p, size_t xsz, size_t ysz) 
{
  struct cudaPitchedPtr s;

  s.ptr   = d;
  s.pitch = p;
  s.xsize = xsz;
  s.ysize = ysz;

  return s;
}
















static __inline  struct cudaPos make_cudaPos(size_t x, size_t y, size_t z) 
{
  struct cudaPos p;

  p.x = x;
  p.y = y;
  p.z = z;

  return p;
}
















static __inline  struct cudaExtent make_cudaExtent(size_t w, size_t h, size_t d) 
{
  struct cudaExtent e;

  e.width  = w;
  e.height = h;
  e.depth  = d;

  return e;
}

 

#line 146 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_functions.h"
#line 93 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 95 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 96 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"



#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"

#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"







































































































#line 172 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"




#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"


























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"























































#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"




































































#line 70 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\device_types.h"
#line 57 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"


#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"













































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1487 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\driver_types.h"

#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"

#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"






















































































































#line 120 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\surface_types.h"
#line 63 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
























































































































































































































#line 218 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\texture_types.h"
#line 64 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 65 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\builtin_types.h"
#line 60 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
















































































































































































































































#line 242 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\host_defines.h"
#line 61 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"
#line 1 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"














































































































































































































































































































































































































































#line 432 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_types.h"
#line 62 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"



#line 66 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"

#line 68 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"







static __inline   char1 make_char1(signed char x)
{
  char1 t; t.x = x; return t;
}

static __inline   uchar1 make_uchar1(unsigned char x)
{
  uchar1 t; t.x = x; return t;
}

static __inline   char2 make_char2(signed char x, signed char y)
{
  char2 t; t.x = x; t.y = y; return t;
}

static __inline   uchar2 make_uchar2(unsigned char x, unsigned char y)
{
  uchar2 t; t.x = x; t.y = y; return t;
}

static __inline   char3 make_char3(signed char x, signed char y, signed char z)
{
  char3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline   uchar3 make_uchar3(unsigned char x, unsigned char y, unsigned char z)
{
  uchar3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline   char4 make_char4(signed char x, signed char y, signed char z, signed char w)
{
  char4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline   uchar4 make_uchar4(unsigned char x, unsigned char y, unsigned char z, unsigned char w)
{
  uchar4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline   short1 make_short1(short x)
{
  short1 t; t.x = x; return t;
}

static __inline   ushort1 make_ushort1(unsigned short x)
{
  ushort1 t; t.x = x; return t;
}

static __inline   short2 make_short2(short x, short y)
{
  short2 t; t.x = x; t.y = y; return t;
}

static __inline   ushort2 make_ushort2(unsigned short x, unsigned short y)
{
  ushort2 t; t.x = x; t.y = y; return t;
}

static __inline   short3 make_short3(short x,short y, short z)
{ 
  short3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline   ushort3 make_ushort3(unsigned short x, unsigned short y, unsigned short z)
{
  ushort3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline   short4 make_short4(short x, short y, short z, short w)
{
  short4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline   ushort4 make_ushort4(unsigned short x, unsigned short y, unsigned short z, unsigned short w)
{
  ushort4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline   int1 make_int1(int x)
{
  int1 t; t.x = x; return t;
}

static __inline   uint1 make_uint1(unsigned int x)
{
  uint1 t; t.x = x; return t;
}

static __inline   int2 make_int2(int x, int y)
{
  int2 t; t.x = x; t.y = y; return t;
}

static __inline   uint2 make_uint2(unsigned int x, unsigned int y)
{
  uint2 t; t.x = x; t.y = y; return t;
}

static __inline   int3 make_int3(int x, int y, int z)
{
  int3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline   uint3 make_uint3(unsigned int x, unsigned int y, unsigned int z)
{
  uint3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline   int4 make_int4(int x, int y, int z, int w)
{
  int4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline   uint4 make_uint4(unsigned int x, unsigned int y, unsigned int z, unsigned int w)
{
  uint4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline   long1 make_long1(long int x)
{
  long1 t; t.x = x; return t;
}

static __inline   ulong1 make_ulong1(unsigned long int x)
{
  ulong1 t; t.x = x; return t;
}

static __inline   long2 make_long2(long int x, long int y)
{
  long2 t; t.x = x; t.y = y; return t;
}

static __inline   ulong2 make_ulong2(unsigned long int x, unsigned long int y)
{
  ulong2 t; t.x = x; t.y = y; return t;
}

static __inline   long3 make_long3(long int x, long int y, long int z)
{
  long3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline   ulong3 make_ulong3(unsigned long int x, unsigned long int y, unsigned long int z)
{
  ulong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline   long4 make_long4(long int x, long int y, long int z, long int w)
{
  long4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline   ulong4 make_ulong4(unsigned long int x, unsigned long int y, unsigned long int z, unsigned long int w)
{
  ulong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline   float1 make_float1(float x)
{
  float1 t; t.x = x; return t;
}

static __inline   float2 make_float2(float x, float y)
{
  float2 t; t.x = x; t.y = y; return t;
}

static __inline   float3 make_float3(float x, float y, float z)
{
  float3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline   float4 make_float4(float x, float y, float z, float w)
{
  float4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline   longlong1 make_longlong1(long long int x)
{
  longlong1 t; t.x = x; return t;
}

static __inline   ulonglong1 make_ulonglong1(unsigned long long int x)
{
  ulonglong1 t; t.x = x; return t;
}

static __inline   longlong2 make_longlong2(long long int x, long long int y)
{
  longlong2 t; t.x = x; t.y = y; return t;
}

static __inline   ulonglong2 make_ulonglong2(unsigned long long int x, unsigned long long int y)
{
  ulonglong2 t; t.x = x; t.y = y; return t;
}

static __inline   longlong3 make_longlong3(long long int x, long long int y, long long int z)
{
  longlong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline   ulonglong3 make_ulonglong3(unsigned long long int x, unsigned long long int y, unsigned long long int z)
{
  ulonglong3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline   longlong4 make_longlong4(long long int x, long long int y, long long int z, long long int w)
{
  longlong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline   ulonglong4 make_ulonglong4(unsigned long long int x, unsigned long long int y, unsigned long long int z, unsigned long long int w)
{
  ulonglong4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}

static __inline   double1 make_double1(double x)
{
  double1 t; t.x = x; return t;
}

static __inline   double2 make_double2(double x, double y)
{
  double2 t; t.x = x; t.y = y; return t;
}

static __inline   double3 make_double3(double x, double y, double z)
{
  double3 t; t.x = x; t.y = y; t.z = z; return t;
}

static __inline   double4 make_double4(double x, double y, double z, double w)
{
  double4 t; t.x = x; t.y = y; t.z = z; t.w = w; return t;
}



#line 318 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.hpp"

#line 177 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 178 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"

#line 180 "c:\\program files\\nvidia gpu computing toolkit\\cuda\\v8.0\\include\\vector_functions.h"
#line 97 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"


































#line 132 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"



















































template<class T>
static __inline  cudaError_t cudaLaunchKernel(
  const T *func,
  dim3 gridDim,
  dim3 blockDim,
  void **args,
  size_t sharedMem = 0,
  cudaStream_t stream = 0
)
{
    return ::cudaLaunchKernel((const void *)func, gridDim, blockDim, args, sharedMem, stream);
}


























template<class T>
static __inline  cudaError_t cudaSetupArgument(
  T      arg,
  size_t offset
)
{
  return ::cudaSetupArgument((const void*)&arg, sizeof(T), offset);
}































static __inline  cudaError_t cudaEventCreate(
  cudaEvent_t  *event,
  unsigned int  flags
)
{
  return ::cudaEventCreateWithFlags(event, flags);
}
























































static __inline  cudaError_t cudaMallocHost(
  void         **ptr,
  size_t         size,
  unsigned int   flags
)
{
  return ::cudaHostAlloc(ptr, size, flags);
}

template<class T>
static __inline  cudaError_t cudaHostAlloc(
  T            **ptr,
  size_t         size,
  unsigned int   flags
)
{
  return ::cudaHostAlloc((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline  cudaError_t cudaHostGetDevicePointer(
  T            **pDevice,
  void          *pHost,
  unsigned int   flags
)
{
  return ::cudaHostGetDevicePointer((void**)(void*)pDevice, pHost, flags);
}






































































template<class T>
static __inline  cudaError_t cudaMallocManaged(
  T            **devPtr,
  size_t         size,
  unsigned int   flags = 0x01
)
{
  return ::cudaMallocManaged((void**)(void*)devPtr, size, flags);
}



































































template<class T>
static __inline  cudaError_t cudaStreamAttachMemAsync(
  cudaStream_t   stream,
  T              *devPtr,
  size_t         length = 0,
  unsigned int   flags  = 0x04
)
{
  return ::cudaStreamAttachMemAsync(stream, (void*)devPtr, length, flags);
}

template<class T>
static __inline  cudaError_t cudaMalloc(
  T      **devPtr,
  size_t   size
)
{
  return ::cudaMalloc((void**)(void*)devPtr, size);
}

template<class T>
static __inline  cudaError_t cudaMallocHost(
  T            **ptr,
  size_t         size,
  unsigned int   flags = 0
)
{
  return cudaMallocHost((void**)(void*)ptr, size, flags);
}

template<class T>
static __inline  cudaError_t cudaMallocPitch(
  T      **devPtr,
  size_t  *pitch,
  size_t   width,
  size_t   height
)
{
  return ::cudaMallocPitch((void**)(void*)devPtr, pitch, width, height);
}









































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































#line 1891 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

 

#line 1895 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"






#line 1902 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#pragma warning(pop)
#line 1904 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"
#line 1905 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 1907 "C:\\Program Files\\NVIDIA GPU Computing Toolkit\\CUDA\\v8.0\\include\\cuda_runtime.h"

#line 4 "d:\\git\\block_match\\block_match\\block_match_internal.h"





#line 10 "d:\\git\\block_match\\block_match\\block_match_internal.h"

#line 1 "d:\\git\\block_match\\block_match\\thread_pool.h"
#pragma once





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"

#pragma once






 
















































































#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"

  


















































































#line 252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"
 #line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"

#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"

#line 257 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xkeycheck.h"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"








#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"










    

#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"

#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
        
    #line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"


    

#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
        
            
        

#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
    #line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"


    

#line 45 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
        
            
        

#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
    #line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"


    

#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"

#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
        
            
        

#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
    #line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#pragma pack(push,8)





 







 
  
  
 


#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"














 
  
   

#line 50 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
    
   #line 52 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
  





#line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 66 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 68 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 86 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  

#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 104 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 




























#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

		

	







		
		


			
		#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	#line 157 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

		




 
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"










































	
	






		


			
		#line 222 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	#line 223 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	
	




		

#line 233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
			
		#line 235 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	#line 236 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	
	

#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
		
	#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"





	
		#pragma detect_mismatch("_MSC_VER", "1900")
	#line 255 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	
		#pragma detect_mismatch("_ITERATOR_DEBUG_LEVEL", "0")
	#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	
		

#line 264 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 266 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
			#pragma detect_mismatch("RuntimeLibrary", "MD_DynamicRelease")
		

#line 270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"








	
		
	

#line 285 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"




#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"




#line 296 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 299 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"











#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
#line 317 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
 

 









 









 









 
































#line 385 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"





#line 391 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 
 
#line 394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
 

 #line 399 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"











#line 411 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"













#pragma once








#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"














    
    
#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"


    






#line 51 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"



    
#line 56 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"

#pragma comment(lib, "msvcprt" "" "")






#line 65 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"

#line 67 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"

#line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\use_ansi.h"
#line 413 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"



#line 417 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"



#line 421 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 















 
  

#line 443 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 445 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 446 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  

#line 451 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 453 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 454 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  

#line 459 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   
  #line 461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 462 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"


 
  





#line 472 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

   


#line 477 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
    
   #line 479 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

  #line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 482 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  
 #line 486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 
  

#line 491 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
   


     
   #line 496 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
  #line 497 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 498 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

 


























  
   
  #line 529 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
 #line 530 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

		

 
  
  
  




  
  
  

  







   
   
   
  #line 557 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

  
  
  
  

 












#line 577 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

		





		







typedef long long _Longlong;
typedef unsigned long long _ULonglong;

		






		
		






 
namespace std {
enum _Uninitialized
	{	
	_Noinit
	};

		

#pragma warning(push)
#pragma warning(disable:4412)
class __declspec(dllimport) _Lockit
	{	
public:
 

  
















#line 644 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	__thiscall _Lockit();	
	explicit __thiscall _Lockit(int);	
	__thiscall ~_Lockit() noexcept;	
  #line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

	static  void __cdecl _Lockit_ctor(int);
	static  void __cdecl _Lockit_dtor(int);

private:
	static  void __cdecl _Lockit_ctor(_Lockit *);
	static  void __cdecl _Lockit_ctor(_Lockit *, int);
	static  void __cdecl _Lockit_dtor(_Lockit *);

public:
	 _Lockit(const _Lockit&) = delete;
	_Lockit&  operator=(const _Lockit&) = delete;

private:
	int _Locktype;

  











#line 677 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	};

 



































































  



  


  



  


  
 #line 763 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

class __declspec(dllimport) _Init_locks
	{	
public:
 
  










#line 780 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	__thiscall _Init_locks();
	__thiscall ~_Init_locks() noexcept;
  #line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"

private:
	static  void __cdecl _Init_locks_ctor(_Init_locks *);
	static  void __cdecl _Init_locks_dtor(_Init_locks *);

 







#line 797 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
	};

#pragma warning(pop)
}
 #line 802 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"





		

__declspec(dllimport) void __cdecl _Atexit(void (__cdecl *)(void));

typedef unsigned long _Uint32t;




 
 #pragma pack(pop)
#line 819 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"
#line 820 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\yvals.h"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"

 



 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"

#pragma once










 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"

 
namespace std {
using :: ptrdiff_t; using :: size_t;
}
 #line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"

 
namespace std {
typedef double max_align_t;	
}

using ::std:: max_align_t;	
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstddef"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"

#pragma once










 #line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_malloc.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {





































#line 52 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_malloc.h"

     
__declspec(dllimport)  __declspec(restrict)
void* __cdecl _calloc_base(
      size_t _Count,
      size_t _Size
    );

     
__declspec(dllimport)   __declspec(restrict)
void* __cdecl calloc(
       size_t _Count,
       size_t _Size
    );

 
__declspec(dllimport) int __cdecl _callnewh(
      size_t _Size
    );

     
__declspec(dllimport) 
void* __cdecl _expand(
                void*  _Block,
       size_t _Size
    );

__declspec(dllimport)
void __cdecl _free_base(
        void* _Block
    );

__declspec(dllimport)
void __cdecl free(
        void* _Block
    );

     
__declspec(dllimport)  __declspec(restrict)
void* __cdecl _malloc_base(
      size_t _Size
    );

     
__declspec(dllimport)   __declspec(restrict)
void* __cdecl malloc(
       size_t _Size
    );

 
__declspec(dllimport)
size_t __cdecl _msize(
      void* _Block
    );

       
__declspec(dllimport)  __declspec(restrict)
void* __cdecl _realloc_base(
         void*  _Block,
                                 size_t _Size
    );

       
__declspec(dllimport)  __declspec(restrict)
void* __cdecl realloc(
        void*  _Block,
              size_t _Size
    );

       
__declspec(dllimport)  __declspec(restrict)
void* __cdecl _recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size
    );

__declspec(dllimport)
void __cdecl _aligned_free(
        void* _Block
    );

     
__declspec(dllimport)  __declspec(restrict)
void* __cdecl _aligned_malloc(
       size_t _Size,
                         size_t _Alignment
    );

     
__declspec(dllimport)  __declspec(restrict)
void* __cdecl _aligned_offset_malloc(
       size_t _Size,
                         size_t _Alignment,
                         size_t _Offset
    );

 
__declspec(dllimport)
size_t __cdecl _aligned_msize(
      void*  _Block,
               size_t _Alignment,
               size_t _Offset
    );

       
__declspec(dllimport)  __declspec(restrict)
void* __cdecl _aligned_offset_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
__declspec(dllimport)  __declspec(restrict)
void* __cdecl _aligned_offset_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment,
                                size_t _Offset
    );

       
__declspec(dllimport)  __declspec(restrict)
void* __cdecl _aligned_realloc(
        void*  _Block,
              size_t _Size,
                                size_t _Alignment
    );

       
__declspec(dllimport)  __declspec(restrict)
void* __cdecl _aligned_recalloc(
        void*  _Block,
              size_t _Count,
              size_t _Size,
                                size_t _Alignment
    );


















#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_malloc.h"



} __pragma(pack(pop))
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_search.h"










#pragma once




__pragma(pack(push, 8)) extern "C" {





     
    __declspec(dllimport) void* __cdecl bsearch_s(
                                                        void const* _Key,
          void const* _Base,
                                                        rsize_t     _NumOfElements,
                                                        rsize_t     _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                    void*       _Context
        );

    __declspec(dllimport) void __cdecl qsort_s(
          void*   _Base,
                                                             rsize_t _NumOfElements,
                                                             rsize_t _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                         void*   _Context
        );

#line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_search.h"



 
__declspec(dllimport) void* __cdecl bsearch(
                                                    void const* _Key,
      void const* _Base,
                                                    size_t      _NumOfElements,
                                                    size_t      _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

__declspec(dllimport) void __cdecl qsort(
      void*  _Base,
                                                         size_t _NumOfElements,
                                                         size_t _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

 
__declspec(dllimport) void* __cdecl _lfind_s(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       size_t        _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void*, void const*, void const*), 
                                                       void*         _Context
    );

 
__declspec(dllimport) void* __cdecl _lfind(
                                                       void const*   _Key,
      void const*   _Base,
                                                    unsigned int* _NumOfElements,
                                                       unsigned int  _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

 
__declspec(dllimport) void* __cdecl _lsearch_s(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             size_t        _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void*, void const*, void const*),
                                                             void*         _Context
    );

 
__declspec(dllimport) void* __cdecl _lsearch(
                                                             void const*   _Key,
      void*         _Base,
                                                          unsigned int* _NumOfElements,
                                                             unsigned int  _SizeOfElements,
      int (__cdecl* _PtFuncCompare)(void const*, void const*)
    );

















































































#line 179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_search.h"





      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lfind" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lfind(
                                                           void const*   _Key,
          void const*   _Base,
                                                        unsigned int* _NumOfElements,
                                                           unsigned int  _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void const*, void const*)
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_lsearch" ". See online help for details."))
    __declspec(dllimport) void* __cdecl lsearch(
                                                                void const*   _Key,
          void*         _Base,
                                                             unsigned int* _NumOfElements,
                                                                unsigned int  _SizeOfElements,
          int (__cdecl* _PtFuncCompare)(void const*, void const*)
        );

#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_search.h"



} __pragma(pack(pop))
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdlib.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {
































 

__declspec(dllimport) errno_t __cdecl _itow_s(
                              int      _Value,
      wchar_t* _Buffer,
                              size_t   _BufferCount,
                              int      _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _itow_s(  int _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _itow_s(_Value, _Buffer, _Size, _Radix); } }
#line 61 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _itow( int _Value,   wchar_t *_Buffer,  int _Radix);
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdlib.h"

 

__declspec(dllimport) errno_t __cdecl _ltow_s(
                              long     _Value,
      wchar_t* _Buffer,
                              size_t   _BufferCount,
                              int      _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltow_s(  long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ltow_s(_Value, _Buffer, _Size, _Radix); } }
#line 84 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ltow( long _Value,   wchar_t *_Buffer,  int _Radix);
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdlib.h"


__declspec(dllimport) errno_t __cdecl _ultow_s(
                              unsigned long _Value,
      wchar_t*      _Buffer,
                              size_t        _BufferCount,
                              int           _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultow_s(  unsigned long _Value, wchar_t (&_Buffer)[_Size],   int _Radix) throw() { return _ultow_s(_Value, _Buffer, _Size, _Radix); } }
#line 106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _ultow( unsigned long _Value,   wchar_t *_Buffer,  int _Radix);
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdlib.h"

 
__declspec(dllimport) double __cdecl wcstod(
                        wchar_t const* _String,
        wchar_t**      _EndPtr
    );

 
__declspec(dllimport) double __cdecl _wcstod_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) long __cdecl wcstol(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) long __cdecl _wcstol_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) long long __cdecl wcstoll(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) long long __cdecl _wcstoll_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) unsigned long __cdecl wcstoul(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) unsigned long __cdecl _wcstoul_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) unsigned long long __cdecl wcstoull(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) unsigned long long __cdecl _wcstoull_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) long double __cdecl wcstold(
                        wchar_t const* _String,
        wchar_t**      _EndPtr
    );

 
__declspec(dllimport) long double __cdecl _wcstold_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) float __cdecl wcstof(
                        wchar_t const* _String,
        wchar_t**      _EndPtr
    );

 
__declspec(dllimport) float __cdecl _wcstof_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) double __cdecl _wtof(
      wchar_t const* _String
    );

 
__declspec(dllimport) double __cdecl _wtof_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wtoi(
      wchar_t const* _String
    );

 
__declspec(dllimport) int __cdecl _wtoi_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
__declspec(dllimport) long __cdecl _wtol(
      wchar_t const* _String
    );

 
__declspec(dllimport) long __cdecl _wtol_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
__declspec(dllimport) long long __cdecl _wtoll(
      wchar_t const* _String
    );

 
__declspec(dllimport) long long __cdecl _wtoll_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );


__declspec(dllimport) errno_t __cdecl _i64tow_s(
                              __int64  _Value,
      wchar_t* _Buffer,
                              size_t   _BufferCount,
                              int      _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _i64tow(
                        __int64  _Value,
        wchar_t* _Buffer,
                        int      _Radix
    );


__declspec(dllimport) errno_t __cdecl _ui64tow_s(
                              unsigned __int64 _Value,
      wchar_t*         _Buffer,
                              size_t           _BufferCount,
                              int              _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64tow_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _ui64tow(
                        unsigned __int64 _Value,
        wchar_t*         _Buffer,
                        int              _Radix
    );

 
__declspec(dllimport) __int64 __cdecl _wtoi64(
      wchar_t const* _String
    );

 
__declspec(dllimport) __int64 __cdecl _wtoi64_l(
        wchar_t const* _String,
      _locale_t      _Locale
    );

 
__declspec(dllimport) __int64 __cdecl _wcstoi64(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) __int64 __cdecl _wcstoi64_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _wcstoui64_l(
                        wchar_t const* _String,
        wchar_t**      _EndPtr,
                          int            _Radix,
                      _locale_t      _Locale
    );




 
 
__declspec(dllimport)  wchar_t* __cdecl _wfullpath(
      wchar_t*       _Buffer,
                                wchar_t const* _Path,
                                  size_t         _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _wmakepath_s(
      wchar_t*       _Buffer,
                              size_t         _BufferCount,
                        wchar_t const* _Drive,
                        wchar_t const* _Dir,
                        wchar_t const* _Filename,
                        wchar_t const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmakepath_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _Drive,   wchar_t const* _Dir,   wchar_t const* _Filename,   wchar_t const* _Ext) throw() { return _wmakepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 359 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmakepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wmakepath(  wchar_t *_Buffer,  wchar_t const* _Drive,  wchar_t const* _Dir,  wchar_t const* _Filename,  wchar_t const* _Ext);
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdlib.h"

__declspec(dllimport) void __cdecl _wperror(
      wchar_t const* _ErrMsg
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsplitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) void __cdecl _wsplitpath(
                        wchar_t const* _FullPath,
        wchar_t*       _Drive,
        wchar_t*       _Dir,
        wchar_t*       _Filename,
        wchar_t*       _Ext
    );

__declspec(dllimport) errno_t __cdecl _wsplitpath_s(
                                  wchar_t const* _FullPath,
         wchar_t*       _Drive,
                                    size_t         _DriveCount,
           wchar_t*       _Dir,
                                    size_t         _DirCount,
      wchar_t*       _Filename,
                                    size_t         _FilenameCount,
           wchar_t*       _Ext,
                                    size_t         _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _wsplitpath_s(   wchar_t const* _Path,   wchar_t (&_Drive)[_DriveSize],   wchar_t (&_Dir)[_DirSize],   wchar_t (&_Name)[_NameSize],   wchar_t (&_Ext)[_ExtSize] ) throw() { return _wsplitpath_s(_Path, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }
#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdlib.h"





    
    

    
    __declspec(dllimport) errno_t __cdecl _wdupenv_s(
            wchar_t**      _Buffer,
                                                                            size_t*        _BufferCount,
                                                                               wchar_t const* _VarName
        );

    

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wdupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl _wgetenv(
          wchar_t const* _VarName
        );

     
    
    __declspec(dllimport) errno_t __cdecl _wgetenv_s(
                                     size_t*        _RequiredCount,
          wchar_t*       _Buffer,
                                      size_t         _BufferCount,
                                    wchar_t const* _VarName
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wgetenv_s(  size_t* _RequiredCount, wchar_t (&_Buffer)[_Size],   wchar_t const* _VarName) throw() { return _wgetenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdlib.h"

     
    __declspec(dllimport) int __cdecl _wputenv(
          wchar_t const* _EnvString
        );

    
    __declspec(dllimport) errno_t __cdecl _wputenv_s(
          wchar_t const* _Name,
          wchar_t const* _Value
        );
    
    __declspec(dllimport) errno_t __cdecl _wsearchenv_s(
                                wchar_t const* _Filename,
                                wchar_t const* _VarName,
          wchar_t*       _Buffer,
                                  size_t         _BufferCount
        );
    
    extern "C++" { template <size_t _Size> inline errno_t __cdecl _wsearchenv_s(  wchar_t const* _Filename,   wchar_t const* _VarName, wchar_t (&_ResultPath)[_Size]) throw() { return _wsearchenv_s(_Filename, _VarName, _ResultPath, _Size); } }
#line 461 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdlib.h"
    
    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsearchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _wsearchenv( wchar_t const* _Filename,  wchar_t const* _VarName,   wchar_t *_ResultPath);
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdlib.h"

    __declspec(dllimport) int __cdecl _wsystem(
          wchar_t const* _Command
        );

#line 474 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdlib.h"



} __pragma(pack(pop))
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"


__pragma(pack(push, 8)) extern "C" {




    
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"









__declspec(dllimport) void __cdecl _swab(
        char* _Buf1,
        char* _Buf2,
                                                                  int   _SizeInBytes
    );












__declspec(dllimport) __declspec(noreturn) void __cdecl exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl _exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl _Exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl quick_exit(  int _Code);
__declspec(dllimport) __declspec(noreturn) void __cdecl abort(void);





__declspec(dllimport) unsigned int __cdecl _set_abort_behavior(
      unsigned int _Flags,
      unsigned int _Mask
    );




    typedef int (__cdecl* _onexit_t)(void);



#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"






    
    
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

























































    int       __cdecl atexit(void (__cdecl*)(void));
    _onexit_t __cdecl _onexit(  _onexit_t _Func);
#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

int __cdecl at_quick_exit(void (__cdecl*)(void));









    
    typedef void (__cdecl* _purecall_handler)(void);

    
    typedef void (__cdecl* _invalid_parameter_handler)(
        wchar_t const*,
        wchar_t const*,
        wchar_t const*, 
        unsigned int,
        uintptr_t
        );

    
    __declspec(dllimport) _purecall_handler __cdecl _set_purecall_handler(
          _purecall_handler _Handler
        );

    __declspec(dllimport) _purecall_handler __cdecl _get_purecall_handler(void);

    
    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_invalid_parameter_handler(void);

    __declspec(dllimport) _invalid_parameter_handler __cdecl _set_thread_local_invalid_parameter_handler(
          _invalid_parameter_handler _Handler
        );

    __declspec(dllimport) _invalid_parameter_handler __cdecl _get_thread_local_invalid_parameter_handler(void);
#line 185 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"












#line 198 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"









 __declspec(dllimport) int __cdecl _set_error_mode(  int _Mode);



__declspec(dllimport) int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);

__declspec(dllimport) unsigned long* __cdecl __doserrno(void);


__declspec(dllimport) errno_t __cdecl _set_doserrno(  unsigned long _Value);
__declspec(dllimport) errno_t __cdecl _get_doserrno(  unsigned long * _Value);


__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) char** __cdecl __sys_errlist(void);


__declspec(dllimport) __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) int * __cdecl __sys_nerr(void);


__declspec(dllimport) void __cdecl perror(  char const* _ErrMsg);




__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_pgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char**    __cdecl __p__pgmptr (void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_wpgmptr" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t** __cdecl __p__wpgmptr(void);
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_get_fmode" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) int*      __cdecl __p__fmode  (void);








    
    
    
#line 250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

 
__declspec(dllimport) errno_t __cdecl _get_pgmptr (  char**    _Value);

 
__declspec(dllimport) errno_t __cdecl _get_wpgmptr(  wchar_t** _Value);

__declspec(dllimport) errno_t __cdecl _set_fmode  (               int       _Mode );

__declspec(dllimport) errno_t __cdecl _get_fmode  (              int*      _PMode);








typedef struct _div_t
{
    int quot;
    int rem;
} div_t;

typedef struct _ldiv_t
{
    long quot;
    long rem;
} ldiv_t;

typedef struct _lldiv_t
{
    long long quot;
    long long rem;
} lldiv_t;

  int       __cdecl abs   (  int       _Number);
  long      __cdecl labs  (  long      _Number);
  long long __cdecl llabs (  long long _Number);
  __int64   __cdecl _abs64(  __int64   _Number);

  unsigned short   __cdecl _byteswap_ushort(  unsigned short   _Number);
  unsigned long    __cdecl _byteswap_ulong (  unsigned long    _Number);
  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64 _Number);

  __declspec(dllimport) div_t   __cdecl div  (  int       _Numerator,   int       _Denominator);
  __declspec(dllimport) ldiv_t  __cdecl ldiv (  long      _Numerator,   long      _Denominator);
  __declspec(dllimport) lldiv_t __cdecl lldiv(  long long _Numerator,   long long _Denominator);



#pragma warning (push)
#pragma warning (disable:6540) 

unsigned int __cdecl _rotl(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotl(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotl64(
      unsigned __int64 _Value,
      int              _Shift
    );

unsigned int __cdecl _rotr(
      unsigned int _Value,
      int          _Shift
    );

 
unsigned long __cdecl _lrotr(
      unsigned long _Value,
      int           _Shift
    );

unsigned __int64 __cdecl _rotr64(
      unsigned __int64 _Value,
      int              _Shift
    );

#pragma warning (pop)






__declspec(dllimport) void __cdecl srand(  unsigned int _Seed);

  __declspec(dllimport) int __cdecl rand(void);



#line 350 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"




extern "C++"
{
    inline long abs(long const _X) throw()
    {
        return labs(_X);
    }

    inline long long abs(long long const _X) throw()
    {
        return llabs(_X);
    }

    inline ldiv_t div(long const _A1, long const _A2) throw()
    {
        return ldiv(_A1, _A2);
    }

    inline lldiv_t div(long long const _A1, long long const _A2) throw()
    {
        return lldiv(_A1, _A2);
    }
}
#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"










    #pragma pack(push, 4)
    typedef struct
    {
        unsigned char ld[10];
    } _LDOUBLE;
    #pragma pack(pop)

    











#line 407 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

typedef struct
{
    double x;
} _CRT_DOUBLE;

typedef struct
{
    float f;
} _CRT_FLOAT;





typedef struct
{
    long double x;
} _LONGDOUBLE;



#pragma pack(push, 4)
typedef struct
{
    unsigned char ld12[12];
} _LDBL12;
#pragma pack(pop)








                     __declspec(dllimport) double    __cdecl atof   (  char const* _String);
   __declspec(dllimport) int       __cdecl atoi   (  char const* _String);
                     __declspec(dllimport) long      __cdecl atol   (  char const* _String);
                     __declspec(dllimport) long long __cdecl atoll  (  char const* _String);
                     __declspec(dllimport) __int64   __cdecl _atoi64(  char const* _String);

  __declspec(dllimport) double    __cdecl _atof_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) int       __cdecl _atoi_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) long      __cdecl _atol_l  (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) long long __cdecl _atoll_l (  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) __int64   __cdecl _atoi64_l(  char const* _String,   _locale_t _Locale);

  __declspec(dllimport) int __cdecl _atoflt (  _CRT_FLOAT*  _Result,   char const* _String);
  __declspec(dllimport) int __cdecl _atodbl (  _CRT_DOUBLE* _Result,   char*       _String);
  __declspec(dllimport) int __cdecl _atoldbl(  _LDOUBLE*    _Result,   char*       _String);

 
__declspec(dllimport) int __cdecl _atoflt_l(
         _CRT_FLOAT* _Result,
        char const* _String,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _atodbl_l(
         _CRT_DOUBLE* _Result,
        char*        _String,
      _locale_t    _Locale
    );


 
__declspec(dllimport) int __cdecl _atoldbl_l(
         _LDOUBLE* _Result,
        char*     _String,
      _locale_t _Locale
    );

 
__declspec(dllimport) float __cdecl strtof(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) float __cdecl _strtof_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) double __cdecl strtod(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) double __cdecl _strtod_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long double __cdecl strtold(
                        char const* _String,
        char**      _EndPtr
    );

 
__declspec(dllimport) long double __cdecl _strtold_l(
                        char const* _String,
        char**      _EndPtr,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long __cdecl strtol(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) long __cdecl _strtol_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) long long __cdecl strtoll(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) long long __cdecl _strtoll_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned long __cdecl strtoul(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned long __cdecl _strtoul_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned long long __cdecl strtoull(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned long long __cdecl _strtoull_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) __int64 __cdecl _strtoi64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) __int64 __cdecl _strtoi64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix
    );

 
__declspec(dllimport) unsigned __int64 __cdecl _strtoui64_l(
                        char const* _String,
        char**      _EndPtr,
                          int         _Radix,
                      _locale_t   _Locale
    );








 

__declspec(dllimport) errno_t __cdecl _itoa_s(
                              int    _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _itoa_s(  int _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _itoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _itoa( int _Value,   char *_Buffer,  int _Radix);
#line 640 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

 

__declspec(dllimport) errno_t __cdecl _ltoa_s(
                              long   _Value,
      char*  _Buffer,
                              size_t _BufferCount,
                              int    _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ltoa_s(  long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ltoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ltoa( long _Value,   char *_Buffer,  int _Radix);
#line 663 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

 

__declspec(dllimport) errno_t __cdecl _ultoa_s(
                              unsigned long _Value,
      char*         _Buffer,
                              size_t        _BufferCount,
                              int           _Radix
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ultoa_s(  unsigned long _Value, char (&_Buffer)[_Size],   int _Radix) throw() { return _ultoa_s(_Value, _Buffer, _Size, _Radix); } }
#line 679 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _ultoa( unsigned long _Value,   char *_Buffer,  int _Radix);
#line 686 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

 

__declspec(dllimport) errno_t __cdecl _i64toa_s(
                              __int64 _Value,
      char*   _Buffer,
                              size_t  _BufferCount,
                              int     _Radix
    );

 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_i64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _i64toa(
                        __int64 _Value,
        char*   _Buffer,
                        int     _Radix
    );

 

__declspec(dllimport) errno_t __cdecl _ui64toa_s(
                              unsigned __int64 _Value,
      char*            _Buffer,
                              size_t           _BufferCount,
                              int              _Radix
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_ui64toa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ui64toa(
                        unsigned __int64 _Value,
        char*            _Buffer,
                        int              _Radix
    );













 

__declspec(dllimport) errno_t __cdecl _ecvt_s(
      char* _Buffer,
       size_t                       _BufferCount,
       double                       _Value,
       int                          _DigitCount,
      int*                         _PtDec,
      int*                         _PtSign
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _ecvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount,   int* _PtDec,   int* _PtSign) throw() { return _ecvt_s(_Buffer, _Size, _Value, _DigitCount, _PtDec, _PtSign); } }
#line 751 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _ecvt(
       double _Value,
       int    _DigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 

__declspec(dllimport) errno_t __cdecl _fcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _FractionalDigitCount,
                             int*   _PtDec,
                             int*   _PtSign
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _fcvt_s(char (&_Buffer)[_Size],   double _Value,   int _FractionalDigitCount,   int* _PtDec,   int* _PtSign) throw() { return _fcvt_s(_Buffer, _Size, _Value, _FractionalDigitCount, _PtDec, _PtSign); } }
#line 780 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _fcvt(
       double _Value,
       int    _FractionalDigitCount,
      int*   _PtDec,
      int*   _PtSign
    );

 
__declspec(dllimport) errno_t __cdecl _gcvt_s(
      char*  _Buffer,
                              size_t _BufferCount,
                              double _Value,
                              int    _DigitCount
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _gcvt_s(char (&_Buffer)[_Size],   double _Value,   int _DigitCount) throw() { return _gcvt_s(_Buffer, _Size, _Value, _DigitCount); } }
#line 805 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_gcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl _gcvt(
                        double _Value,
                        int    _DigitCount,
        char*  _Buffer
    );











    

#line 826 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"
        
    #line 828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

    


        
    #line 834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

     
    __declspec(dllimport) int __cdecl ___mb_cur_max_func(void);

     
    __declspec(dllimport) int __cdecl ___mb_cur_max_l_func(_locale_t);
#line 841 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"



 
__declspec(dllimport) int __cdecl mblen(
        char const* _Ch,
                                             size_t      _MaxCount
    );

  
__declspec(dllimport) int __cdecl _mblen_l(
        char const* _Ch,
                                             size_t      _MaxCount,
                                         _locale_t   _Locale
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrlen(
      char const* _String
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrlen_l(
        char const* _String, 
      _locale_t   _Locale
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrnlen(
      char const* _String,
        size_t      _MaxCount
    );

 
 
__declspec(dllimport) size_t __cdecl _mbstrnlen_l(
        char const* _String,
          size_t      _MaxCount,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl mbtowc(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes
    );

 
__declspec(dllimport) int __cdecl _mbtowc_l(
                      wchar_t*    _DstCh,
      char const* _SrcCh,
                                      size_t      _SrcSizeInBytes,
                                  _locale_t   _Locale
    );


__declspec(dllimport) errno_t __cdecl mbstowcs_s(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl mbstowcs_s(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount) throw() { return mbstowcs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbstowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl mbstowcs( wchar_t *_Dest,  char const* _Source,  size_t _MaxCount);
#line 923 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"


__declspec(dllimport) errno_t __cdecl _mbstowcs_s_l(
                                                      size_t*     _PtNumOfCharConverted,
      wchar_t*    _DstBuf,
                                                           size_t      _SizeInWords,
                                     char const* _SrcBuf,
                                                           size_t      _MaxCount,
                                                       _locale_t   _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _mbstowcs_s_l(  size_t* _PtNumOfCharConverted,   wchar_t (&_Dest)[_Size],   char const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _mbstowcs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 942 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_mbstowcs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _mbstowcs_l(  wchar_t *_Dest,   char const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 951 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"




__declspec(deprecated("This function or variable may be unsafe. Consider using " "wctomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl wctomb(
      char*   _MbCh,
                                wchar_t _WCh
    );

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctomb_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _wctomb_l(
        char*     _MbCh,
                          wchar_t   _WCh,
                      _locale_t _Locale
    );



    
    __declspec(dllimport) errno_t __cdecl wctomb_s(
                                                         int*    _SizeConverted,
          char*   _MbCh,
                                                              rsize_t _SizeInBytes,
                                                              wchar_t _WCh
        );

#line 979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"


__declspec(dllimport) errno_t __cdecl _wctomb_s_l(
                             int*     _SizeConverted,
      char*     _MbCh,
                                  size_t    _SizeInBytes,
                                  wchar_t   _WCh, 
                              _locale_t _Locale);


__declspec(dllimport) errno_t __cdecl wcstombs_s(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcstombs_s(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount) throw() { return wcstombs_s(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount); } }
#line 1004 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcstombs( char *_Dest,  wchar_t const* _Source,  size_t _MaxCount);
#line 1011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"


__declspec(dllimport) errno_t __cdecl _wcstombs_s_l(
                                                               size_t*        _PtNumOfCharConverted,
      char*          _Dst,
                                                                    size_t         _DstSizeInBytes,
                                                                  wchar_t const* _Src,
                                                                    size_t         _MaxCountInBytes,
                                                                _locale_t      _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcstombs_s_l(  size_t* _PtNumOfCharConverted,   char (&_Dest)[_Size],   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale) throw() { return _wcstombs_s_l(_PtNumOfCharConverted, _Dest, _Size, _Source, _MaxCount, _Locale); } }
#line 1030 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcstombs_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl _wcstombs_l(  char *_Dest,   wchar_t const* _Source,   size_t _MaxCount,   _locale_t _Locale);
#line 1039 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"




















 
 
__declspec(dllimport)  char* __cdecl _fullpath(
      char*       _Buffer,
                                char const* _Path,
                                  size_t      _BufferCount
    );




__declspec(dllimport) errno_t __cdecl _makepath_s(
      char*       _Buffer,
                              size_t      _BufferCount,
                        char const* _Drive,
                        char const* _Dir,
                        char const* _Filename,
                        char const* _Ext
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _makepath_s(char (&_Buffer)[_Size],   char const* _Drive,   char const* _Dir,   char const* _Filename,   char const* _Ext) throw() { return _makepath_s(_Buffer, _Size, _Drive, _Dir, _Filename, _Ext); } }
#line 1087 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_makepath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _makepath(  char *_Buffer,  char const* _Drive,  char const* _Dir,  char const* _Filename,  char const* _Ext);
#line 1096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_splitpath_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) void __cdecl _splitpath(
                        char const* _FullPath,
        char*       _Drive,
        char*       _Dir,
        char*       _Filename,
        char*       _Ext
    );


__declspec(dllimport) errno_t __cdecl _splitpath_s(
                                  char const* _FullPath,
         char*       _Drive,
                                    size_t      _DriveCount,
           char*       _Dir,
                                    size_t      _DirCount,
      char*       _Filename,
                                    size_t      _FilenameCount,
           char*       _Ext,
                                    size_t      _ExtCount
    );

extern "C++" { template <size_t _DriveSize, size_t _DirSize, size_t _NameSize, size_t _ExtSize> inline errno_t __cdecl _splitpath_s(   char const* _Dest,   char (&_Drive)[_DriveSize],   char (&_Dir)[_DirSize],   char (&_Name)[_NameSize],   char (&_Ext)[_ExtSize] ) throw() { return _splitpath_s(_Dest, _Drive, _DriveSize, _Dir, _DirSize, _Name, _NameSize, _Ext, _ExtSize); } }










    

    
     
    __declspec(dllimport) errno_t __cdecl getenv_s(
                                     size_t*     _RequiredCount,
          char*       _Buffer,
                                      rsize_t     _BufferCount,
                                    char const* _VarName
        );
    
    #line 1142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"




    __declspec(dllimport) int*       __cdecl __p___argc (void);
    __declspec(dllimport) char***    __cdecl __p___argv (void);
    __declspec(dllimport) wchar_t*** __cdecl __p___wargv(void);

    




        
        
        
    #line 1159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"
    
    __declspec(dllimport) char***    __cdecl __p__environ (void);
    __declspec(dllimport) wchar_t*** __cdecl __p__wenviron(void);

    
        
    #line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"
    
    





        
        
    #line 1176 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"



    
    



      __declspec(deprecated("This function or variable may be unsafe. Consider using " "_dupenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) 
    __declspec(dllimport) char* __cdecl getenv(
          char const* _VarName
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl getenv_s(  size_t* _RequiredCount, char (&_Buffer)[_Size],   char const* _VarName) throw() { return getenv_s(_RequiredCount, _Buffer, _Size, _VarName); } }
#line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

    


#line 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

    
    __declspec(dllimport) errno_t __cdecl _dupenv_s(
            char**      _Buffer,
                                                                            size_t*     _BufferCount,
                                                                               char const* _VarName
        );

    

#line 1211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

    __declspec(dllimport) int __cdecl system(
          char const* _Command
        );

    
    
    #pragma warning (push)
    #pragma warning (disable:6540)

     
    __declspec(dllimport) int __cdecl _putenv(
          char const* _EnvString
        );

    
    __declspec(dllimport) errno_t __cdecl _putenv_s(
          char const* _Name,
          char const* _Value
        );

    #pragma warning (pop)

    __declspec(dllimport) errno_t __cdecl _searchenv_s(
                                char const* _Filename,
                                char const* _VarName,
          char*       _Buffer,
                                  size_t      _BufferCount
        );

    extern "C++" { template <size_t _Size> inline errno_t __cdecl _searchenv_s(  char const* _Filename,   char const* _VarName, char (&_Buffer)[_Size]) throw() { return _searchenv_s(_Filename, _VarName, _Buffer, _Size); } }
#line 1247 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

    __declspec(deprecated("This function or variable may be unsafe. Consider using " "_searchenv_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) void __cdecl _searchenv( char const* _Filename,  char const* _VarName,   char *_Buffer);
#line 1254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

    
    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "SetErrorMode" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _seterrormode(
          int _Mode
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Beep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _beep(
          unsigned _Frequency,
          unsigned _Duration
        );

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "Sleep" " " "instead. See online help for details."))
    __declspec(dllimport) void __cdecl _sleep(
          unsigned long _Duration
        );

#line 1273 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"










    




    
    

    #pragma warning(push)
    #pragma warning(disable: 4141) 

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ecvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ecvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ecvt(
           double _Value,
           int    _DigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl fcvt(
           double _Value,
           int    _FractionalDigitCount,
          int*   _PtDec,
          int*   _PtSign
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_gcvt" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fcvt_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl gcvt(
                            double _Value,
                            int    _DigitCount,
            char*  _DstBuf
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_itoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_itoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl itoa(
                            int   _Value,
            char* _Buffer,
                            int   _Radix
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ltoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ltoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ltoa(
                            long  _Value,
            char* _Buffer,
                            int   _Radix
        );


    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_swab" ". See online help for details."))
    __declspec(dllimport) void __cdecl swab(
          char* _Buf1,
          char* _Buf2,
                                     int   _SizeInBytes
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_ultoa" ". See online help for details.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_ultoa_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __declspec(dllimport) char* __cdecl ultoa(
                            unsigned long _Value,
            char*         _Buffer,
                            int           _Radix
        );

    

        

          __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putenv" ". See online help for details."))
        __declspec(dllimport) int __cdecl putenv(
              char const* _EnvString
            );

    #line 1356 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"

    #pragma warning(pop)

    _onexit_t __cdecl onexit(  _onexit_t _Func);

#line 1362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdlib.h"



} __pragma(pack(pop))

#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"

 
namespace std {
using :: size_t; using :: div_t; using :: ldiv_t;
using :: abort; using :: abs; using :: atexit;
using :: atof; using :: atoi; using :: atol;
using :: bsearch; using :: calloc; using :: div;
using :: exit; using :: free;
using :: labs; using :: ldiv; using :: malloc;
using :: mblen; using :: mbstowcs; using :: mbtowc;
using :: qsort; using :: rand; using :: realloc;
using :: srand; using :: strtod; using :: strtol;
using :: strtoul;
using :: wcstombs; using :: wctomb;

using :: lldiv_t;

 
using :: getenv;
using :: system;
 #line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"

using :: atoll; using :: llabs; using :: lldiv;
using :: strtof; using :: strtold;
using :: strtoll; using :: strtoull;

using :: _Exit; using :: at_quick_exit; using :: quick_exit;
}
 #line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"

#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdlib"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		
template<class _Elem>
	class initializer_list
	{	
public:
	typedef _Elem value_type;
	typedef const _Elem& reference;
	typedef const _Elem& const_reference;
	typedef size_t size_type;

	typedef const _Elem* iterator;
	typedef const _Elem* const_iterator;

	constexpr initializer_list() noexcept
		: _First(0), _Last(0)
		{	
		}

	constexpr initializer_list(const _Elem *_First_arg,
		const _Elem *_Last_arg) noexcept
		: _First(_First_arg), _Last(_Last_arg)
		{	
		}

	constexpr const _Elem *begin() const noexcept
		{	
		return (_First);
		}

	constexpr const _Elem *end() const noexcept
		{	
		return (_Last);
		}

	constexpr size_t size() const noexcept
		{	
		return ((size_t)(_Last - _First));
		}

private:
	const _Elem *_First;
	const _Elem *_Last;
	};

		
template<class _Elem> inline
	constexpr const _Elem *begin(initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.begin());
	}

		
template<class _Elem> inline
	constexpr const _Elem *end(initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.end());
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 76 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"
#line 77 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\initializer_list"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
	
struct _Nil
	{	
	};

	
template<class _Ty,
	_Ty _Val>
	struct integral_constant
	{	
	static constexpr _Ty value = _Val;

	typedef _Ty value_type;
	typedef integral_constant<_Ty, _Val> type;

	constexpr operator value_type() const noexcept
		{	
		return (value);
		}

	constexpr value_type operator()() const noexcept
		{	
		return (value);
		}
	};

typedef integral_constant<bool, true> true_type;
typedef integral_constant<bool, false> false_type;

	
template<bool _Val>
	using bool_constant = integral_constant<bool, _Val>;

	
template<bool _Val>
	struct _Cat_base
		: integral_constant<bool, _Val>
	{	
	};

	
template<bool _Test,
	class _Ty = void>
	struct enable_if
	{	
	};

template<class _Ty>
	struct enable_if<true, _Ty>
	{	
	typedef _Ty type;
	};

	
template<bool _Test,
	class _Ty1,
	class _Ty2>
	struct conditional
	{	
	typedef _Ty2 type;
	};

template<class _Ty1,
	class _Ty2>
	struct conditional<true, _Ty1, _Ty2>
	{	
	typedef _Ty1 type;
	};

	
template<class _Ty1,
	class _Ty2>
	struct is_same
		: false_type
	{	
	};

template<class _Ty1>
	struct is_same<_Ty1, _Ty1>
		: true_type
	{	
	};

 



#line 102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct remove_const
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_const<const _Ty>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_volatile
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_volatile<volatile _Ty>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_cv
	{	
	typedef typename remove_const<typename remove_volatile<_Ty>::type>::type
		type;
	};

	
template<class _Ty>
	struct _Is_integral
		: false_type
	{	
	};

template<>
	struct _Is_integral<bool>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned char>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed char>
		: true_type
	{	
	};

 
template<>
	struct _Is_integral<wchar_t>
		: true_type
	{	
	};
 #line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

template<>
	struct _Is_integral<unsigned short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed short>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed int>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<signed long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char16_t>
		: true_type
	{	
	};

template<>
	struct _Is_integral<char32_t>
		: true_type
	{	
	};

template<>
	struct _Is_integral<long long>
		: true_type
	{	
	};

template<>
	struct _Is_integral<unsigned long long>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_integral
		: _Is_integral<typename remove_cv<_Ty>::type>
	{	
	};

 


#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct _Is_floating_point
		: false_type
	{	
	};

template<>
	struct _Is_floating_point<float>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<double>
		: true_type
	{	
	};

template<>
	struct _Is_floating_point<long double>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_floating_point
		: _Is_floating_point<typename remove_cv<_Ty>::type>
	{	
	};

 


#line 284 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct is_arithmetic
		: _Cat_base<is_integral<_Ty>::value
			|| is_floating_point<_Ty>::value>
	{	
	};

 


#line 297 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"

	
template<class _Ty>
	struct remove_reference
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_reference<_Ty&>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_reference<_Ty&&>
	{	
	typedef _Ty type;
	};

	
struct _Wrap_int
	{	
	_Wrap_int(int)
		{	
		}
	};

template<class _Ty>
	struct _Identity
	{	
	typedef _Ty type;
	};














}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 349 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"
#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtr1common"





#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 
  
  
  
 #line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

namespace std {
		
 
 
 #line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 
 
 
 
 

 
 

  

  











#line 55 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
   
   
  #line 58 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 



















#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

		


		
 

 



































 
 

		

template<bool,
	class _Ty1,
	class _Ty2>
	struct _If
	{	
	typedef _Ty2 type;
	};

template<class _Ty1,
	class _Ty2>
	struct _If<true, _Ty1, _Ty2>
	{	
	typedef _Ty1 type;
	};

template<class _Ty>
	struct _Always_false
	{	
	static constexpr bool value = false;
	};

		

 
		
template<class _Arg,
	class _Result>
	struct unary_function
	{	
	typedef _Arg argument_type;
	typedef _Result result_type;
	};

		
template<class _Arg1,
	class _Arg2,
	class _Result>
	struct binary_function
	{	
	typedef _Arg1 first_argument_type;
	typedef _Arg2 second_argument_type;
	typedef _Result result_type;
	};
 #line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

		
template<class _Ty = void>
	struct plus
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left + _Right);
		}
	};

		
template<class _Ty = void>
	struct minus
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left - _Right);
		}
	};

		
template<class _Ty = void>
	struct multiplies
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef _Ty result_type;

	constexpr _Ty operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left * _Right);
		}
	};

		
template<class _Ty = void>
	struct equal_to
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left == _Right);
		}
	};

		
template<class _Ty = void>
	struct less
	{	
	typedef _Ty first_argument_type;
	typedef _Ty second_argument_type;
	typedef bool result_type;

	constexpr bool operator()(const _Ty& _Left, const _Ty& _Right) const
		{	
		return (_Left < _Right);
		}
	};

		
template<>
	struct plus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			+ static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct minus<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			- static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct multiplies<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			* static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct equal_to<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			== static_cast<_Ty2&&>(_Right));
		}
	};

		
template<>
	struct less<void>
	{	
	typedef int is_transparent;

	template<class _Ty1,
		class _Ty2>
		constexpr auto operator()(_Ty1&& _Left, _Ty2&& _Right) const
		-> decltype(static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right))
		{	
		return (static_cast<_Ty1&&>(_Left)
			< static_cast<_Ty2&&>(_Right));
		}
	};


}



namespace std {
	
inline size_t _Hash_seq(const unsigned char *_First, size_t _Count)
	{	
 
	static_assert(sizeof(size_t) == 8, "This code is for 64-bit size_t.");
	const size_t _FNV_offset_basis = 14695981039346656037ULL;
	const size_t _FNV_prime = 1099511628211ULL;

 



#line 347 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

	size_t _Val = _FNV_offset_basis;
	for (size_t _Next = 0; _Next < _Count; ++_Next)
		{	
		_Val ^= (size_t)_First[_Next];
		_Val *= _FNV_prime;
		}
	return (_Val);
	}

	
template<class _Kty>
	struct _Bitwise_hash
	{	
	typedef _Kty argument_type;
	typedef size_t result_type;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Hash_seq((const unsigned char *)&_Keyval, sizeof (_Kty)));
		}
	};

	
template<class _Kty>
	struct hash
		: public _Bitwise_hash<_Kty>
	{	
	static constexpr bool _Value = __is_enum(_Kty);
	static_assert(_Value,
		"The C++ Standard doesn't provide a hash for this type.");
	};
template<>
	struct hash<bool>
		: public _Bitwise_hash<bool>
	{	
	};

template<>
	struct hash<char>
		: public _Bitwise_hash<char>
	{	
	};

template<>
	struct hash<signed char>
		: public _Bitwise_hash<signed char>
	{	
	};

template<>
	struct hash<unsigned char>
		: public _Bitwise_hash<unsigned char>
	{	
	};

template<>
	struct hash<char16_t>
		: public _Bitwise_hash<char16_t>
	{	
	};

template<>
	struct hash<char32_t>
		: public _Bitwise_hash<char32_t>
	{	
	};

 
template<>
	struct hash<wchar_t>
		: public _Bitwise_hash<wchar_t>
	{	
	};
 #line 422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

template<>
	struct hash<short>
		: public _Bitwise_hash<short>
	{	
	};

template<>
	struct hash<unsigned short>
		: public _Bitwise_hash<unsigned short>
	{	
	};

template<>
	struct hash<int>
		: public _Bitwise_hash<int>
	{	
	};

template<>
	struct hash<unsigned int>
		: public _Bitwise_hash<unsigned int>
	{	
	};

template<>
	struct hash<long>
		: public _Bitwise_hash<long>
	{	
	};

template<>
	struct hash<unsigned long>
		: public _Bitwise_hash<unsigned long>
	{	
	};

template<>
	struct hash<long long>
		: public _Bitwise_hash<long long>
	{	
	};

template<>
	struct hash<unsigned long long>
		: public _Bitwise_hash<unsigned long long>
	{	
	};

template<>
	struct hash<float>
		: public _Bitwise_hash<float>
	{	
	typedef float _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	
		}
	};

template<>
	struct hash<double>
		: public _Bitwise_hash<double>
	{	
	typedef double _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	
		}
	};

template<>
	struct hash<long double>
		: public _Bitwise_hash<long double>
	{	
	typedef long double _Kty;
	typedef _Bitwise_hash<_Kty> _Mybase;

	size_t operator()(const _Kty& _Keyval) const
		{	
		return (_Mybase::operator()(
			_Keyval == 0 ? 0 : _Keyval));	
		}
	};

template<class _Ty>
	struct hash<_Ty *>
		: public _Bitwise_hash<_Ty *>
	{	
	};
}
#line 520 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"


namespace std {
namespace tr1 {	
using ::std:: hash;
}	
}
#line 528 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"




 





 #line 539 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 



#line 545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 #line 547 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 








 #line 558 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

 



 

#line 567 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"


































































namespace std {
	
template<class... _Types>
	struct _Arg_types
	{	
	};

template<class _Ty1>
	struct _Arg_types<_Ty1>
	{	
	typedef _Ty1 argument_type;
	};

template<class _Ty1,
	class _Ty2>
	struct _Arg_types<_Ty1, _Ty2>
	{	
	typedef _Ty1 first_argument_type;
	typedef _Ty2 second_argument_type;
	};

	
template<class _Ty>
	struct _Is_function
	{	
	typedef false_type _Bool_type;
	static constexpr bool _Weird = false;
	};












template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) > : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret __cdecl (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };    template<class _Ret, class... _Types> struct _Is_function<_Ret __vectorcall (_Types...) const volatile &&> : _Arg_types<_Types...> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };












template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = false; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; }; template<class _Ret, class... _Types> struct _Is_function<_Ret (_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; static constexpr bool _Weird = true; };


template<class _Ty>
	struct is_function
		: _Is_function<_Ty>::_Bool_type
	{	
	};

 


#line 699 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"

		

template<class _Ty> inline
	_Ty *_Addressof(_Ty& _Val, true_type) noexcept
	{	
	return (_Val);
	}

template<class _Ty> inline
	_Ty *_Addressof(_Ty& _Val, false_type) noexcept
	{	
	return (reinterpret_cast<_Ty *>(
		&const_cast<char&>(
		reinterpret_cast<const volatile char&>(_Val))));
	}

template<class _Ty> inline
	_Ty *addressof(_Ty& _Val) noexcept
	{	
	return (_Addressof(_Val, is_function<_Ty>()));
	}






#line 728 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"


		
template<class _Ptrty> inline
	auto _Unfancy(_Ptrty _Ptr)
	{	
	return (::std:: addressof(*_Ptr));
	}

template<class _Ty> inline
	_Ty * _Unfancy(_Ty * _Ptr)
	{	
	return (_Ptr);
	}

}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"
#line 749 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xstddef"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 
 #pragma warning(disable: 4180 4296)

namespace std {
template<class _Ty>
	struct _Is_memfunptr
	{	
	typedef false_type _Bool_type;
	};













template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  > : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const > : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile > : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile > : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  &> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...)  &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...)  &&> : _Arg_types< _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const &&> : _Arg_types<const _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) volatile &&> : _Arg_types<volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__cdecl _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };     template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (__vectorcall _Arg0::*)(_Types...) const volatile &&> : _Arg_types<const volatile _Arg0 *, _Types...> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };













template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) > { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; }; template<class _Ret, class _Arg0, class... _Types> struct _Is_memfunptr<_Ret (_Arg0::*)(_Types..., ...) const volatile &&> { typedef true_type _Bool_type; typedef _Ret result_type; typedef _Arg0 _Class_type; };


	
template<class _Ty>
	struct is_void
		: false_type
	{	
	};








template<> struct is_void< void> : true_type { }; template<> struct is_void<const void> : true_type { }; template<> struct is_void<volatile void> : true_type { }; template<> struct is_void<const volatile void> : true_type { };


	
	
template<class _Ty>
	struct add_const
	{	
	typedef const _Ty type;
	};

	
template<class _Ty>
	struct add_volatile
	{	
	typedef volatile _Ty type;
	};

	
template<class _Ty>
	struct add_cv
	{	
	typedef const volatile _Ty type;
	};

	
template<class _Ty,
	bool = _Is_function<_Ty>::_Weird || is_void<_Ty>::value>
	struct _Add_reference
	{	
	typedef _Ty _Lvalue;
	typedef _Ty _Rvalue;
	};

template<class _Ty>
	struct _Add_reference<_Ty, false>
	{	
	typedef _Ty& _Lvalue;
	typedef _Ty&& _Rvalue;
	};

	
template<class _Ty>
	struct add_lvalue_reference
	{	
	typedef typename _Add_reference<_Ty>::_Lvalue type;
	};

	
template<class _Ty>
	struct add_rvalue_reference
	{	
	typedef typename _Add_reference<_Ty>::_Rvalue type;
	};

	
template<class _Ty>
	typename add_rvalue_reference<_Ty>::type
		declval() noexcept;

	
template<class _Ty>
	struct remove_extent
	{	
	typedef _Ty type;
	};

template<class _Ty, size_t _Ix>
	struct remove_extent<_Ty[_Ix]>
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct remove_extent<_Ty[]>
	{	
	typedef _Ty type;
	};

	
template<class _Ty>
	struct remove_all_extents
	{	
	typedef _Ty type;
	};

template<class _Ty, size_t _Ix>
	struct remove_all_extents<_Ty[_Ix]>
	{	
	typedef typename remove_all_extents<_Ty>::type type;
	};

template<class _Ty>
	struct remove_all_extents<_Ty[]>
	{	
	typedef typename remove_all_extents<_Ty>::type type;
	};

	
template<class _Ty>
	struct remove_pointer
	{	
	typedef _Ty type;
	};








template<class _Ty> struct remove_pointer<_Ty *> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *volatile> { typedef _Ty type; }; template<class _Ty> struct remove_pointer<_Ty *const volatile> { typedef _Ty type; };


	
template<class _Ty,
	bool = _Is_function<_Ty>::_Weird>
	struct _Add_pointer
	{	
	typedef _Ty type;
	};

template<class _Ty>
	struct _Add_pointer<_Ty, false>
	{	
	typedef typename remove_reference<_Ty>::type *type;
	};

template<class _Ty>
	struct add_pointer
	{	
	typedef typename _Add_pointer<_Ty>::type type;
	};

	
	
template<class _Ty>
	struct is_array
		: false_type
	{	
	};

template<class _Ty, size_t _Nx>
	struct is_array<_Ty[_Nx]>
		: true_type
	{	
	};

template<class _Ty>
	struct is_array<_Ty[]>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_lvalue_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_lvalue_reference<_Ty&>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_rvalue_reference
		: false_type
	{	
	};

template<class _Ty>
	struct is_rvalue_reference<_Ty&&>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_reference
		: _Cat_base<is_lvalue_reference<_Ty>::value
		|| is_rvalue_reference<_Ty>::value>
	{	
	};


	
template<class _Ty,
	bool _Pmf = _Is_memfunptr<_Ty>::_Bool_type::value>
	struct _Is_member_object_pointer
		: false_type
	{	
	};

template<class _Ty1,
	class _Ty2>
	struct _Is_member_object_pointer<_Ty1 _Ty2::*, false>
		: true_type
	{	
	typedef _Ty2 _Class_type;
	};

template<class _Ty>
	struct is_member_object_pointer
		: _Is_member_object_pointer<typename remove_cv<_Ty>::type>::type
	{	
	};

	
template<class _Ty>
	struct is_member_function_pointer
		: _Is_memfunptr<typename remove_cv<_Ty>::type>::_Bool_type
	{	
	};

	
template<class _Ty>
	struct _Is_pointer
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_pointer<_Ty *>
		: _Cat_base<!is_member_object_pointer<_Ty *>::value
		&& !is_member_function_pointer<_Ty *>::value>
	{	
	};

template<class _Ty>
	struct is_pointer
		: _Is_pointer<typename remove_cv<_Ty>::type>
	{	
	};

	

template<class _Ty>
	struct is_null_pointer
		: _Cat_base<is_same<typename remove_cv<_Ty>::type, nullptr_t>::value>
	{	
	};

	
template<class _Ty>
	struct is_union
		: _Cat_base<__is_union(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_class
		: _Cat_base<__is_class(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_fundamental
		: _Cat_base<is_arithmetic<_Ty>::value
		|| is_void<_Ty>::value
		|| is_null_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_object
		: _Cat_base<!is_function<_Ty>::value
		&& !is_reference<_Ty>::value
		&& !is_void<_Ty>::value>
	{	
	};

	

template<class _From,
	class _To>
	struct is_convertible
		: _Cat_base<__is_convertible_to(_From, _To)>
	{	
	};

	
template<class _Ty>
	struct is_enum
		: _Cat_base<__is_enum(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_compound
		: _Cat_base<!is_fundamental<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_member_pointer
		: _Cat_base<is_member_object_pointer<_Ty>::value
		|| is_member_function_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_scalar
		: _Cat_base<is_arithmetic<_Ty>::value
		|| is_enum<_Ty>::value
		|| is_pointer<_Ty>::value
		|| is_member_pointer<_Ty>::value
		|| is_null_pointer<_Ty>::value>
	{	
	};

	
template<class _Ty>
	struct is_const
		: false_type
	{	
	};

template<class _Ty>
	struct is_const<const _Ty>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_volatile
		: false_type
	{	
	};

template<class _Ty>
	struct is_volatile<volatile _Ty>
		: true_type
	{	
	};

	
template<class _Ty>
	struct is_pod
		: _Cat_base<__is_pod(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_empty
		: _Cat_base<__is_empty(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_polymorphic
		: _Cat_base<__is_polymorphic(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_abstract
		: _Cat_base<__is_abstract(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_final
		: _Cat_base<__is_final(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_standard_layout
		: _Cat_base<__is_standard_layout(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_literal_type
		: _Cat_base<__is_literal_type(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_trivial
		: _Cat_base<__is_trivial(_Ty)>
	{	
	};

	
template<class _Ty>
	struct is_trivially_copyable
		: _Cat_base<__is_trivially_copyable(_Ty)>
	{	
	};

	
template<class _Ty>
	struct has_virtual_destructor
		: _Cat_base<__has_virtual_destructor(_Ty)>
	{	
	};

		
	

template<class _Ty,
	class... _Args>
	struct is_constructible
		: _Cat_base<__is_constructible(_Ty, _Args...)>
	{	
	};

	
template<class _Ty>
	struct is_copy_constructible
		: is_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_default_constructible
		: is_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_move_constructible
		: is_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_assignable
		: integral_constant<bool, __is_trivially_assignable(_To, _From)>
	{	
	};

	
template<class _Ty>
	struct is_copy_assignable
		: is_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_move_assignable
		: is_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_destructible
		: _Cat_base<__is_destructible(_Ty)>
	{	
	};

		
	

template<class _Ty,
	class... _Args>
	struct is_trivially_constructible
		: _Cat_base<__is_trivially_constructible(_Ty, _Args...)>
	{	
	};

	
template<class _Ty>
	struct is_trivially_copy_constructible
		: is_trivially_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_default_constructible
		: is_trivially_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_move_constructible
		: is_trivially_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_trivially_assignable
		: _Cat_base<__is_trivially_assignable(_To, _From)>
	{	
	};

	
template<class _Ty>
	struct is_trivially_copy_assignable
		: is_trivially_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_move_assignable
		: is_trivially_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_trivially_destructible
		: _Cat_base<__has_trivial_destructor(_Ty)>
	{	
	};

		
	

template<class _Ty,
	class... _Args>
	struct is_nothrow_constructible
		: _Cat_base<__is_nothrow_constructible(_Ty, _Args...)>
	{	
	};

	
template<class _Ty>
	struct is_nothrow_copy_constructible
		: is_nothrow_constructible<
			_Ty,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_default_constructible
		: is_nothrow_constructible<_Ty>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_move_constructible
		: is_nothrow_constructible<
			_Ty,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _To,
	class _From>
	struct is_nothrow_assignable
		: _Cat_base<__is_nothrow_assignable(_To, _From)>
	{	
	};

	
template<class _Ty>
	struct is_nothrow_copy_assignable
		: is_nothrow_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<
				typename add_const<_Ty>::type
			>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_move_assignable
		: is_nothrow_assignable<
			typename add_lvalue_reference<_Ty>::type,
			typename add_rvalue_reference<_Ty>::type
		>::type
	{	
	};

	
template<class _Ty>
	struct is_nothrow_destructible
		: _Cat_base<__is_nothrow_destructible(_Ty)>
	{	
	};

	
template<class _Ty,
	bool = is_integral<_Ty>::value>
	struct _Sign_base
	{	
	typedef typename remove_cv<_Ty>::type _Uty;
	typedef _Cat_base<_Uty(-1) < _Uty(0)> _Signed;
	typedef _Cat_base<_Uty(0) < _Uty(-1)> _Unsigned;
	};

template<class _Ty>
	struct _Sign_base<_Ty, false>
	{	
		
	typedef is_floating_point<_Ty> _Signed;
	typedef false_type _Unsigned;
	};

template<class _Ty>
	struct is_signed
		: _Sign_base<_Ty>::_Signed
	{	
	};

	
template<class _Ty>
	struct is_unsigned
		: _Sign_base<_Ty>::_Unsigned
	{	
	};

	
template<class _Ty>
	struct _Change_sign
	{	
	static_assert(
		((is_integral<_Ty>::value || is_enum<_Ty>::value)
			&& !is_same<_Ty, bool>::value),
		"make_signed<T>/make_unsigned<T> require that T shall be a (possibly "
		"cv-qualified) integral type or enumeration but not a bool type.");

	typedef
		typename _If<is_same<_Ty, signed char>::value
			|| is_same<_Ty, unsigned char     >::value, signed char,
		typename _If<is_same<_Ty, short       >::value
			|| is_same<_Ty, unsigned short    >::value, short,
		typename _If<is_same<_Ty, int         >::value
			|| is_same<_Ty, unsigned int      >::value, int,
		typename _If<is_same<_Ty, long        >::value
			|| is_same<_Ty, unsigned long     >::value, long,
		typename _If<is_same<_Ty, long long   >::value
			|| is_same<_Ty, unsigned long long>::value, long long,
		typename _If<sizeof (_Ty) == sizeof (signed char), signed char,
		typename _If<sizeof (_Ty) == sizeof (short      ), short,
		typename _If<sizeof (_Ty) == sizeof (int        ), int,
		typename _If<sizeof (_Ty) == sizeof (long       ), long,
			long long
		>::type>::type>::type>::type>::type>::type>::type>::type>::type
			_Signed;

	typedef
		typename _If<is_same<_Signed, signed char>::value, unsigned char,
		typename _If<is_same<_Signed, short      >::value, unsigned short,
		typename _If<is_same<_Signed, int        >::value, unsigned int,
		typename _If<is_same<_Signed, long       >::value, unsigned long,
			unsigned long long
		>::type>::type>::type>::type
			_Unsigned;
	};

template<class _Ty>
	struct _Change_sign<const _Ty>
	{	
	typedef const typename _Change_sign<_Ty>::_Signed _Signed;
	typedef const typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

template<class _Ty>
	struct _Change_sign<volatile _Ty>
	{	
	typedef volatile typename _Change_sign<_Ty>::_Signed _Signed;
	typedef volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

template<class _Ty>
	struct _Change_sign<const volatile _Ty>
	{	
	typedef const volatile typename _Change_sign<_Ty>::_Signed _Signed;
	typedef const volatile typename _Change_sign<_Ty>::_Unsigned _Unsigned;
	};

	
template<class _Ty>
	struct make_signed
	{	
	typedef typename _Change_sign<_Ty>::_Signed type;
	};

	
template<class _Ty>
	struct make_unsigned
	{	
	typedef typename _Change_sign<_Ty>::_Unsigned type;
	};

	

template<class _Ty>
	struct alignment_of
		: integral_constant<size_t, alignof(_Ty)>
	{	
	};

	




template<class _Ty,
	size_t _Len>
	union _Align_type
	{	
	_Ty _Val;
	char _Pad[_Len];
	};

template<size_t _Len,
	size_t _Align,
	class _Ty,
	bool _Ok>
	struct _Aligned;

template<size_t _Len,
	size_t _Align,
	class _Ty>
	struct _Aligned<_Len, _Align, _Ty, true>
	{	
	typedef _Align_type<_Ty, _Len> type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, double, false>
	{	
	typedef _Align_type<max_align_t, _Len> type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, int, false>
	{	
	typedef typename _Aligned<_Len, _Align, double, _Align <= alignment_of<double>::value>::type type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, short, false>
	{	
	typedef typename _Aligned<_Len, _Align, int, _Align <= alignment_of<int>::value>::type type;
	};

template<size_t _Len,
	size_t _Align>
	struct _Aligned<_Len, _Align, char, false>
	{	
	typedef typename _Aligned<_Len, _Align, short, _Align <= alignment_of<short>::value>::type type;
	};

template<size_t _Len,
	size_t _Align = alignment_of<max_align_t>::value>
	struct aligned_storage
	{	
	typedef typename _Aligned<_Len, _Align, char, _Align <= alignment_of<char>::value>::type type;
	};




	
template<size_t... _Vals>
	struct _Maximum;

template<>
	struct _Maximum<>
	{	
	static constexpr size_t value = 0;
	};

template<size_t _Val>
	struct _Maximum<_Val>
	{	
	static constexpr size_t value = _Val;
	};

template<size_t _First,
	size_t _Second,
	size_t... _Rest>
	struct _Maximum<_First, _Second, _Rest...>
		: _Maximum<(_First < _Second ? _Second : _First), _Rest...>
	{	
	};

template<size_t _Len,
	class... _Types>
	struct aligned_union
	{	
	static constexpr size_t _Max_len = _Maximum<
		_Len, sizeof(_Types)...>::value;	
	static constexpr size_t alignment_value = _Maximum<
		alignment_of<_Types>::value...>::value;
	typedef typename aligned_storage<_Max_len, alignment_value>::type type;
	};

	
template<class _Ty>
	struct underlying_type
	{	
	typedef __underlying_type(_Ty) type;
	};

	
template<class _Ty>
	struct rank
		: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, size_t _Ix>
	struct rank<_Ty[_Ix]>
		: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

template<class _Ty>
	struct rank<_Ty[]>
		: integral_constant<size_t, rank<_Ty>::value + 1>
	{	
	};

	
template<class _Ty, unsigned int _Nx>
	struct _Extent
		: integral_constant<size_t, 0>
	{	
	};

template<class _Ty, size_t _Ix>
	struct _Extent<_Ty[_Ix], 0>
		: integral_constant<size_t, _Ix>
	{	
	};

template<class _Ty, unsigned int _Nx, size_t _Ix>
	struct _Extent<_Ty[_Ix], _Nx>
		: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx>
	struct _Extent<_Ty[], _Nx>
		: _Extent<_Ty, _Nx - 1>
	{	
	};

template<class _Ty, unsigned int _Nx = 0>
	struct extent
		: _Extent<_Ty, _Nx>
	{	
	};

	
template<class _Base,
	class _Der>
	struct is_base_of
		: _Cat_base<__is_base_of(_Base, _Der)>
	{	
	};

	
template<class _Ty>
	struct decay
	{	
	typedef typename remove_reference<_Ty>::type _Ty1;

	typedef typename _If<is_array<_Ty1>::value,
		typename remove_extent<_Ty1>::type *,
		typename _If<is_function<_Ty1>::value,
			typename add_pointer<_Ty1>::type,
			typename remove_cv<_Ty1>::type>::type>::type type;
	};

	
template<class...>
	struct _Conjunction;

template<bool,
	class _Lhs,
	class... _Traits>
	struct _Choose_conjunction
	{	
	typedef _Lhs type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Choose_conjunction<true, _Lhs, _Traits...>
	{	
	typedef typename _Conjunction<_Traits...>::type type;
	};

template<>
	struct _Conjunction<>
	{	
	typedef true_type type;
	};

template<class _Trait>
	struct _Conjunction<_Trait>
	{	
	typedef _Trait type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Conjunction<_Lhs, _Traits...>
	{	
	typedef typename _Choose_conjunction<_Lhs::value, _Lhs, _Traits...>::type type;
	};

template<class... _Traits>
	struct conjunction
		: _Conjunction<_Traits...>::type
	{	
		
		
	};

	
template<class...>
	struct _Disjunction;

template<bool,
	class _Lhs,
	class... _Traits>
	struct _Choose_disjunction
	{	
	typedef _Lhs type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Choose_disjunction<false, _Lhs, _Traits...>
	{	
	typedef typename _Disjunction<_Traits...>::type type;
	};

template<>
	struct _Disjunction<>
	{	
	typedef false_type type;
	};

template<class _Trait>
	struct _Disjunction<_Trait>
	{	
	typedef _Trait type;
	};

template<class _Lhs,
	class... _Traits>
	struct _Disjunction<_Lhs, _Traits...>
	{	
	typedef typename _Choose_disjunction<_Lhs::value, _Lhs, _Traits...>::type type;
	};

template<class... _Traits>
	struct disjunction
		: _Disjunction<_Traits...>::type
	{	
		
		
	};

	
template<class _Trait>
	struct negation
		: bool_constant<!_Trait::value>
	{	
	};


namespace tr1 {	
using ::std:: add_const;
using ::std:: add_cv;
using ::std:: add_pointer;
using ::std:: add_volatile;
using ::std:: aligned_storage;
using ::std:: alignment_of;
using ::std:: conditional;
using ::std:: decay;
using ::std:: enable_if;
using ::std:: extent;
using ::std:: false_type;
using ::std:: has_virtual_destructor;
using ::std:: integral_constant;
using ::std:: is_abstract;
using ::std:: is_arithmetic;
using ::std:: is_array;
using ::std:: is_base_of;
using ::std:: is_class;
using ::std:: is_compound;
using ::std:: is_const;
using ::std:: is_convertible;
using ::std:: is_empty;
using ::std:: is_enum;
using ::std:: is_floating_point;
using ::std:: is_function;
using ::std:: is_fundamental;
using ::std:: is_integral;
using ::std:: is_member_function_pointer;
using ::std:: is_member_object_pointer;
using ::std:: is_member_pointer;
using ::std:: is_object;
using ::std:: is_pod;
using ::std:: is_pointer;
using ::std:: is_polymorphic;
using ::std:: is_reference;
using ::std:: is_same;
using ::std:: is_scalar;
using ::std:: is_signed;
using ::std:: is_union;
using ::std:: is_unsigned;
using ::std:: is_void;
using ::std:: is_volatile;
using ::std:: make_signed;
using ::std:: make_unsigned;
using ::std:: rank;
using ::std:: remove_all_extents;
using ::std:: remove_const;
using ::std:: remove_cv;
using ::std:: remove_extent;
using ::std:: remove_pointer;
using ::std:: remove_reference;
using ::std:: remove_volatile;
using ::std:: true_type;
	}	
#line 1156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

		
template<class... _Ty>
	struct common_type;

template<class _Ty>
	struct common_type<_Ty>
	{	
	typedef typename decay<_Ty>::type type;
	};

template<class _Ty0,
	class _Ty1>
	struct common_type<_Ty0, _Ty1>
	{	
	typedef typename decay<
		decltype(_Always_false<_Ty0>::value
			? ::std:: declval<_Ty0>()
			: ::std:: declval<_Ty1>())
	>::type type;
	};

template<class _Ty0,
	class _Ty1,
	class... _Ty>
	struct common_type<_Ty0, _Ty1, _Ty...>
	{	
	typedef typename common_type<
		typename common_type<_Ty0, _Ty1>::type, _Ty...
	>::type type;
	};

	
template<class _Ty,
	_Ty... _Vals>
	struct integer_sequence
	{	
	static_assert(is_integral<_Ty>::value,
		"integer_sequence<T, I...> requires T to be an integral type.");

	typedef integer_sequence<_Ty, _Vals...> type;
	typedef _Ty value_type;

	static constexpr size_t size() noexcept
		{	
		return (sizeof...(_Vals));
		}
	};

	
 
template<bool _Negative,
	bool _Zero,
	class _Int_con,
	class _Int_seq>
	struct _Make_seq
	{	
	static_assert(!_Negative,
		"make_integer_sequence<T, N> requires N to be non-negative.");
	};

template<class _Ty,
	_Ty... _Vals>
	struct _Make_seq<false, true,
		integral_constant<_Ty, 0>,
		integer_sequence<_Ty, _Vals...> >
		: integer_sequence<_Ty, _Vals...>
	{	
	};

template<class _Ty,
	_Ty _Ix,
	_Ty... _Vals>
	struct _Make_seq<false, false,
		integral_constant<_Ty, _Ix>,
		integer_sequence<_Ty, _Vals...> >
		: _Make_seq<false, _Ix == 1,
			integral_constant<_Ty, _Ix - 1>,
			integer_sequence<_Ty, _Ix - 1, _Vals...> >
	{	
	};

template<class _Ty,
	_Ty _Size>
	using make_integer_sequence = typename _Make_seq<_Size < 0, _Size == 0,
		integral_constant<_Ty, _Size>, integer_sequence<_Ty> >::type;
 



#line 1247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

template<size_t... _Vals>
	using index_sequence = integer_sequence<size_t, _Vals...>;

template<size_t _Size>
	using make_index_sequence = make_integer_sequence<size_t, _Size>;

template<class... _Types>
	using index_sequence_for = make_index_sequence<sizeof...(_Types)>;


	
template<class _Ty>
	struct identity
	{	
	typedef _Ty type;

	const _Ty& operator()(const _Ty& _Left) const
		{	
		return (_Left);
		}
	};
#line 1270 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

	
template<class _Ty> inline
	constexpr _Ty&& forward(
		typename remove_reference<_Ty>::type& _Arg) noexcept
	{	
	return (static_cast<_Ty&&>(_Arg));
	}

template<class _Ty> inline
	constexpr _Ty&& forward(
		typename remove_reference<_Ty>::type&& _Arg) noexcept
	{	
	static_assert(!is_lvalue_reference<_Ty>::value, "bad forward call");
	return (static_cast<_Ty&&>(_Arg));
	}

		
template<class _Ty> inline
	constexpr typename remove_reference<_Ty>::type&&
		move(_Ty&& _Arg) noexcept
	{	
	return (static_cast<typename remove_reference<_Ty>::type&&>(_Arg));
	}

		
template<class _Ty> inline
	constexpr typename _If<!is_nothrow_move_constructible<_Ty>::value
		&& is_copy_constructible<_Ty>::value,
			const _Ty&, _Ty&&>::type
	move_if_noexcept(_Ty& _Arg) noexcept
	{	
	return (::std:: move(_Arg));
	}

	
template<class...>
	struct _Param_tester
	{	
	typedef void type;
	};

	
template<class... _Types>	
	using void_t = typename _Param_tester<_Types...>::type;

	
struct _Invoker_pmf_object
	{	
	template<class _Decayed,
		class _Ty1,
		class... _Types2>
		static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
		-> decltype((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...))
		{	
		return ((::std:: forward<_Ty1>(_Arg1).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...));
		}
	};

struct _Invoker_pmf_pointer
	{	
	template<class _Decayed,
		class _Ty1,
		class... _Types2>
		static auto _Call(_Decayed _Pmf, _Ty1&& _Arg1, _Types2&&... _Args2)
		-> decltype(((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...))
		{	
		return (((*::std:: forward<_Ty1>(_Arg1)).*_Pmf)(
			::std:: forward<_Types2>(_Args2)...));
		}
	};

struct _Invoker_pmd_object
	{	
	template<class _Decayed,
		class _Ty1>
		static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
		-> decltype(::std:: forward<_Ty1>(_Arg1).*_Pmd)
		{	
		return (::std:: forward<_Ty1>(_Arg1).*_Pmd);
		}
	};

struct _Invoker_pmd_pointer
	{	
	template<class _Decayed,
		class _Ty1>
		static auto _Call(_Decayed _Pmd, _Ty1&& _Arg1)
		-> decltype((*::std:: forward<_Ty1>(_Arg1)).*_Pmd)
		{	
		return ((*::std:: forward<_Ty1>(_Arg1)).*_Pmd);
		}
	};

struct _Invoker_functor
	{	
	template<class _Callable,
		class... _Types>
		static auto _Call(_Callable&& _Obj, _Types&&... _Args)
		-> decltype(::std:: forward<_Callable>(_Obj)(
			::std:: forward<_Types>(_Args)...))
		{	
		return (::std:: forward<_Callable>(_Obj)(
			::std:: forward<_Types>(_Args)...));
		}
	};

template<class _Callable,
	class _Ty1,
	class _Decayed = typename decay<_Callable>::type,
	bool _Is_pmf = is_member_function_pointer<_Decayed>::value,
	bool _Is_pmd = is_member_object_pointer<_Decayed>::value>
	struct _Invoker1;

template<class _Callable,
	class _Ty1,
	class _Decayed>
	struct _Invoker1<_Callable, _Ty1, _Decayed, true, false>
		: _If<is_base_of<
			typename _Is_memfunptr<_Decayed>::_Class_type,
			typename decay<_Ty1>::type>::value,
		_Invoker_pmf_object,
		_Invoker_pmf_pointer>::type
	{	
	};

template<class _Callable,
	class _Ty1,
	class _Decayed>
	struct _Invoker1<_Callable, _Ty1, _Decayed, false, true>
		: _If<is_base_of<
			typename _Is_member_object_pointer<_Decayed>::_Class_type,
			typename decay<_Ty1>::type>::value,
		_Invoker_pmd_object,
		_Invoker_pmd_pointer>::type
	{	
	};

template<class _Callable,
	class _Ty1,
	class _Decayed>
	struct _Invoker1<_Callable, _Ty1, _Decayed, false, false>
		: _Invoker_functor
	{	
	};

template<class _Callable,
	class... _Types>
	struct _Invoker;

template<class _Callable>
	struct _Invoker<_Callable>
		: _Invoker_functor
	{	
	};

template<class _Callable,
	class _Ty1,
	class... _Types2>
	struct _Invoker<_Callable, _Ty1, _Types2...>
		: _Invoker1<_Callable, _Ty1>
	{	
	};

template<class _Callable,
	class... _Types> inline
	auto invoke(_Callable&& _Obj, _Types&&... _Args)
	-> decltype(_Invoker<_Callable, _Types...>::_Call(
		::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...))
	{	
	return (_Invoker<_Callable, _Types...>::_Call(
		::std:: forward<_Callable>(_Obj), ::std:: forward<_Types>(_Args)...));
	}

template<class _Rx,
	bool = is_void<_Rx>::value>
	struct _Forced
	{	
	};

struct _Unforced
	{	
	};

template<class _Cv_void,
	class... _Valtys> inline
	void _Invoke_ret(_Forced<_Cv_void, true>, _Valtys&&... _Vals)
	{	
	::std:: invoke(::std:: forward<_Valtys>(_Vals)...);
	}

template<class _Rx,
	class... _Valtys> inline
	_Rx _Invoke_ret(_Forced<_Rx, false>, _Valtys&&... _Vals)
	{	
	return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
	}

template<class... _Valtys> inline
	auto _Invoke_ret(_Forced<_Unforced, false>, _Valtys&&... _Vals)
	-> decltype(::std:: invoke(::std:: forward<_Valtys>(_Vals)...))
	{	
	return (::std:: invoke(::std:: forward<_Valtys>(_Vals)...));
	}

	
struct _Unique_tag_result_of
	{	
	};

template<class _Void,
	class... _Types>
	struct _Result_of
	{	
	};

template<class... _Types>
	struct _Result_of<
		void_t<
			_Unique_tag_result_of,	
			decltype(::std:: invoke(::std:: declval<_Types>()...))>,
		_Types...>
	{	
	typedef decltype(::std:: invoke(::std:: declval<_Types>()...)) type;
	};

template<class _Fty>
	struct result_of
	{	
	static_assert(_Always_false<_Fty>::value,
		"result_of<CallableType> is invalid; use "
		"result_of<CallableType(zero or more argument types)> instead.");
	};









template<class _Fty, class... _Args> struct result_of<_Fty __cdecl (_Args...)> : _Result_of<void, _Fty, _Args...> { };    template<class _Fty, class... _Args> struct result_of<_Fty __vectorcall (_Args...)> : _Result_of<void, _Fty, _Args...> { };


	
template<class _Ty,
	class = void>
	struct _Weak_result_type
	{	
	};

template<class _Ty>
	struct _Weak_result_type<_Ty, void_t<
		typename _Ty::result_type> >
	{	
	typedef typename _Ty::result_type result_type;
	};

template<class _Ty,
	class = void>
	struct _Weak_argument_type
		: _Weak_result_type<_Ty>
	{	
	};

template<class _Ty>
	struct _Weak_argument_type<_Ty, void_t<
		typename _Ty::argument_type> >
		: _Weak_result_type<_Ty>
	{	
	typedef typename _Ty::argument_type argument_type;
	};

template<class _Ty,
	class = void>
	struct _Weak_binary_args
		: _Weak_argument_type<_Ty>
	{	
	};

template<class _Ty>
	struct _Weak_binary_args<_Ty, void_t<
		typename _Ty::first_argument_type,
		typename _Ty::second_argument_type> >
		: _Weak_argument_type<_Ty>
	{	
	typedef typename _Ty::first_argument_type first_argument_type;
	typedef typename _Ty::second_argument_type second_argument_type;
	};

template<class _Ty>
	struct _Weak_types
	{	
	typedef _Is_function<typename remove_pointer<_Ty>::type> _Is_f_or_pf;
	typedef _Is_memfunptr<typename remove_cv<_Ty>::type> _Is_pmf;
	typedef typename _If<_Is_f_or_pf::_Bool_type::value, _Is_f_or_pf,
		typename _If<_Is_pmf::_Bool_type::value, _Is_pmf,
		_Weak_binary_args<_Ty> >::type>::type type;
	};

	
template<class _Ty>
	class reference_wrapper
		: public _Weak_types<_Ty>::type
	{	
public:
	static_assert(is_object<_Ty>::value || is_function<_Ty>::value,
		"reference_wrapper<T> requires T to be an object type "
		"or a function type.");

	typedef _Ty type;

	reference_wrapper(_Ty& _Val) noexcept
		: _Ptr(::std:: addressof(_Val))
		{	
		}

	operator _Ty&() const noexcept
		{	
		return (*_Ptr);
		}

	_Ty& get() const noexcept
		{	
		return (*_Ptr);
		}

	template<class... _Types>
		auto operator()(_Types&&... _Args) const
		-> decltype(::std:: invoke(get(), ::std:: forward<_Types>(_Args)...))
		{	
		return (::std:: invoke(get(), ::std:: forward<_Types>(_Args)...));
		}

	reference_wrapper(_Ty&&) = delete;

private:
	_Ty *_Ptr;
	};

	
template<class _Ty> inline
	reference_wrapper<_Ty>
		ref(_Ty& _Val) noexcept
	{	
	return (reference_wrapper<_Ty>(_Val));
	}

template<class _Ty>
	void ref(const _Ty&&) = delete;

template<class _Ty> inline
	reference_wrapper<_Ty>
		ref(reference_wrapper<_Ty> _Val) noexcept
	{	
	return (::std:: ref(_Val.get()));
	}

template<class _Ty> inline
	reference_wrapper<const _Ty>
		cref(const _Ty& _Val) noexcept
	{	
	return (reference_wrapper<const _Ty>(_Val));
	}

template<class _Ty>
	void cref(const _Ty&&) = delete;

template<class _Ty> inline
	reference_wrapper<const _Ty>
		cref(reference_wrapper<_Ty> _Val) noexcept
	{	
	return (::std:: cref(_Val.get()));
	}

	
template<class _Ty>
	struct _Unrefwrap_helper
	{	
	typedef _Ty type;
	static constexpr bool _Is_refwrap = false;
	};

template<class _Ty>
	struct _Unrefwrap_helper<reference_wrapper<_Ty> >
	{	
	typedef _Ty& type;
	static constexpr bool _Is_refwrap = true;
	};

template<class _Ty>
	struct _Unrefwrap
	{	
	typedef typename decay<_Ty>::type _Ty1;
	typedef typename _Unrefwrap_helper<_Ty1>::type type;
	static constexpr bool _Is_refwrap = _Unrefwrap_helper<_Ty1>::_Is_refwrap;
	};


namespace tr1 {	
using ::std:: cref;
using ::std:: ref;
using ::std:: reference_wrapper;
using ::std:: result_of;
	}	
#line 1680 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

		
template<class _Ty>
	struct _Is_swappable;

		
template<class _Ty>
	struct _Is_nothrow_swappable;

		




#line 1695 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
template<class _Ty,
	class = void> inline
#line 1698 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
	void swap(_Ty&, _Ty&)
		noexcept(is_nothrow_move_constructible<_Ty>::value && is_nothrow_move_assignable<_Ty>::value);
#line 1701 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

template<class _Ty,
	size_t _Size,
	class = typename enable_if<_Is_swappable<_Ty>::value>::type> inline
	void swap(_Ty (&)[_Size], _Ty (&)[_Size])
		noexcept(_Is_nothrow_swappable<_Ty>::value);

		
template<class _Ty1,
	class _Ty2,
	class = void>
	struct _Swappable_with_helper
		: false_type
	{	
	};

struct _Swappable_with_helper_unique_type {}; 
template<class _Ty1,
	class _Ty2>
	struct _Swappable_with_helper<_Ty1, _Ty2, void_t<
		_Swappable_with_helper_unique_type,
		decltype(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))>>
		: true_type
	{	
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Is_swappable_with
		: conjunction<
			_Swappable_with_helper<_Ty1, _Ty2>,
			_Swappable_with_helper<_Ty2, _Ty1>>::type
	{	
		
	};

		
template<class _Ty>
	struct _Is_swappable
		: _Is_swappable_with<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<_Ty>::type>::type
	{	
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Swap_cannot_throw
	{	
		
		

	static constexpr bool value = 
		noexcept(swap(::std:: declval<_Ty1>(), ::std:: declval<_Ty2>()))
		&& noexcept(swap(::std:: declval<_Ty2>(), ::std:: declval<_Ty1>()));


#line 1761 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
	using type = bool_constant<value>;
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Is_nothrow_swappable_with
		: conjunction<
			_Is_swappable_with<_Ty1, _Ty2>,
			_Swap_cannot_throw<_Ty1, _Ty2>>::type
	{	
		
	};

		
template<class _Ty>
	struct _Is_nothrow_swappable
		: _Is_nothrow_swappable_with<
			typename add_lvalue_reference<_Ty>::type,
			typename add_lvalue_reference<_Ty>::type>::type
	{	
	};

































#line 1817 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

		
template<class _Ty>
	using remove_const_t = typename remove_const<_Ty>::type;

template<class _Ty>
	using remove_volatile_t = typename remove_volatile<_Ty>::type;

template<class _Ty>
	using remove_cv_t = typename remove_cv<_Ty>::type;

template<class _Ty>
	using add_const_t = typename add_const<_Ty>::type;

template<class _Ty>
	using add_volatile_t = typename add_volatile<_Ty>::type;

template<class _Ty>
	using add_cv_t = typename add_cv<_Ty>::type;

template<class _Ty>
	using remove_reference_t = typename remove_reference<_Ty>::type;

template<class _Ty>
	using add_lvalue_reference_t = typename add_lvalue_reference<_Ty>::type;

template<class _Ty>
	using add_rvalue_reference_t = typename add_rvalue_reference<_Ty>::type;

template<class _Ty>
	using make_signed_t = typename make_signed<_Ty>::type;

template<class _Ty>
	using make_unsigned_t = typename make_unsigned<_Ty>::type;

template<class _Ty>
	using remove_extent_t = typename remove_extent<_Ty>::type;

template<class _Ty>
	using remove_all_extents_t = typename remove_all_extents<_Ty>::type;

template<class _Ty>
	using remove_pointer_t = typename remove_pointer<_Ty>::type;

template<class _Ty>
	using add_pointer_t = typename add_pointer<_Ty>::type;

template<size_t _Len,
	size_t _Align = alignment_of<max_align_t>::value>
	using aligned_storage_t = typename aligned_storage<_Len, _Align>::type;

template<size_t _Len,
	class... _Types>
	using aligned_union_t = typename aligned_union<_Len, _Types...>::type;

template<class _Ty>
	using decay_t = typename decay<_Ty>::type;

template<bool _Test,
	class _Ty = void>
	using enable_if_t = typename enable_if<_Test, _Ty>::type;

template<bool _Test,
	class _Ty1,
	class _Ty2>
	using conditional_t = typename conditional<_Test, _Ty1, _Ty2>::type;

template<class... _Ty>
	using common_type_t = typename common_type<_Ty...>::type;

template<class _Ty>
	using underlying_type_t = typename underlying_type<_Ty>::type;

template<class _Ty>
	using result_of_t = typename result_of<_Ty>::type;

	
 





















































































































































#line 2045 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"

}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 2052 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"
#line 2053 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\type_traits"






#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"







#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"



typedef signed char        int8_t;
typedef short              int16_t;
typedef int                int32_t;
typedef long long          int64_t;
typedef unsigned char      uint8_t;
typedef unsigned short     uint16_t;
typedef unsigned int       uint32_t;
typedef unsigned long long uint64_t;

typedef signed char        int_least8_t;
typedef short              int_least16_t;
typedef int                int_least32_t;
typedef long long          int_least64_t;
typedef unsigned char      uint_least8_t;
typedef unsigned short     uint_least16_t;
typedef unsigned int       uint_least32_t;
typedef unsigned long long uint_least64_t;

typedef signed char        int_fast8_t;
typedef int                int_fast16_t;
typedef int                int_fast32_t;
typedef long long          int_fast64_t;
typedef unsigned char      uint_fast8_t;
typedef unsigned int       uint_fast16_t;
typedef unsigned int       uint_fast32_t;
typedef unsigned long long uint_fast64_t;

typedef long long          intmax_t;
typedef unsigned long long uintmax_t;










































    
    
    




#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"




































#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\stdint.h"





#line 17 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		
typedef enum memory_order {
	memory_order_relaxed,
	memory_order_consume,
	memory_order_acquire,
	memory_order_release,
	memory_order_acq_rel,
	memory_order_seq_cst
	} memory_order;

typedef _Uint32t _Uint4_t;
typedef _Uint4_t _Atomic_integral_t;

	
	




  
  
  
  
  

  
   
  

#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"

		

typedef long _Atomic_flag_t;

  

		
typedef _Atomic_integral_t _Atomic_counter_t;

inline _Atomic_integral_t
	_Get_atomic_count(const _Atomic_counter_t& _Counter)
	{	
	return (_Counter);
	}

inline void _Init_atomic_counter(_Atomic_counter_t& _Counter,
	_Atomic_integral_t _Value)
	{	
	_Counter = _Value;
	}

 
  
   
  

#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
 #line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"

		
extern "C" {
__declspec(dllimport) void __cdecl _Lock_shared_ptr_spin_lock();
__declspec(dllimport) void __cdecl _Unlock_shared_ptr_spin_lock();
}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 84 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic0.h"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_memory.h"










#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_memcpy_s.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\errno.h"







#pragma once




__pragma(pack(push, 8)) extern "C" {



__declspec(dllimport) extern int* __cdecl _errno(void);


__declspec(dllimport) errno_t __cdecl _set_errno(  int _Value);
__declspec(dllimport) errno_t __cdecl _get_errno(  int* _Value);



__declspec(dllimport) unsigned long* __cdecl __doserrno(void);


__declspec(dllimport) errno_t __cdecl _set_doserrno(  unsigned long _Value);
__declspec(dllimport) errno_t __cdecl _get_doserrno(  unsigned long * _Value);










































    
    
    
    
    
#line 78 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\errno.h"






    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
#line 126 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\errno.h"



} __pragma(pack(pop))
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_memcpy_s.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"



__pragma(pack(push, 8)) extern "C" {



 
__declspec(dllimport) void const* __cdecl memchr(
      void const* _Buf,
                                 int         _Val,
                                 size_t      _MaxCount
    );

 
int __cdecl memcmp(
      void const* _Buf1,
      void const* _Buf2,
                         size_t      _Size
    );


 

#line 40 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
void* __cdecl memcpy(
      void* _Dst,
            void const* _Src,
                               size_t      _Size
    );


__declspec(dllimport) void* __cdecl memmove(
      void*       _Dst,
            void const* _Src,
                                   size_t      _Size
    );

 

#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
void* __cdecl memset(
      void*  _Dst,
                               int    _Val,
                               size_t _Size
    );

 
__declspec(dllimport) char const* __cdecl strchr(
      char const* _Str,
        int         _Val
    );

 
__declspec(dllimport) char const* __cdecl strrchr(
      char const* _Str,
        int         _Ch
    );

   
__declspec(dllimport) char const* __cdecl strstr(
      char const* _Str,
      char const* _SubStr
    );

 

__declspec(dllimport) wchar_t const* __cdecl wcschr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

 
__declspec(dllimport) wchar_t const* __cdecl wcsrchr(
      wchar_t const* _Str,
        wchar_t        _Ch
    );

   

__declspec(dllimport) wchar_t const* __cdecl wcsstr(
      wchar_t const* _Str,
      wchar_t const* _SubStr
    );



} __pragma(pack(pop))

#line 109 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_string.h"
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_memcpy_s.h"

__pragma(pack(push, 8)) extern "C" {


    
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_memcpy_s.h"














     
    
    static __inline errno_t __cdecl memcpy_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        if (_Source == 0 || _DestinationSize < _SourceSize)
        {
            memset(_Destination, 0, _DestinationSize);

            { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
            { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

            
            return 22;
        }

        memcpy(_Destination, _Source, _SourceSize);
        return 0;
    }

    
    static __inline errno_t __cdecl memmove_s(
          void*       const _Destination,
                                                              rsize_t     const _DestinationSize,
                                 void const* const _Source,
                                                              rsize_t     const _SourceSize
        )
    {
        if (_SourceSize == 0)
        {
            return 0;
        }

        { int _Expr_val=!!(_Destination != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_Source != 0); if (!(_Expr_val)) { (*_errno()) = 22; _invalid_parameter_noinfo(); return 22; } };
        { int _Expr_val=!!(_DestinationSize >= _SourceSize); if (!(_Expr_val)) { (*_errno()) = 34; _invalid_parameter_noinfo(); return 34; } };

        memmove(_Destination, _Source, _SourceSize);
        return 0;
    }

#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_memcpy_s.h"



} __pragma(pack(pop))
#line 15 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_memory.h"




__pragma(pack(push, 8)) extern "C" {



 
__declspec(dllimport) int __cdecl _memicmp(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size
    );

 
__declspec(dllimport) int __cdecl _memicmp_l(
      void const* _Buf1,
      void const* _Buf2,
                             size_t      _Size,
                         _locale_t   _Locale
    );





    












#line 56 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_memory.h"

    












#line 71 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_memory.h"

#line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_memory.h"




    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memccpy" ". See online help for details."))
    __declspec(dllimport) void* __cdecl memccpy(
          void*       _Dst,
            void const* _Src,
                                   int         _Val,
                                   size_t      _Size
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_memicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl memicmp(
          void const* _Buf1,
          void const* _Buf2,
                                 size_t      _Size
        );
#line 92 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_memory.h"




    extern "C++"  
    inline void* __cdecl memchr(
          void*  _Pv,
                              int    _C,
                              size_t _N
        )
    {
        void const* const _Pvc = _Pv;
        return const_cast<void*>(memchr(_Pvc, _C, _N));
    }
#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_memory.h"



} __pragma(pack(pop))

#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_memory.h"
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"








#pragma once






__pragma(pack(push, 8)) extern "C" {










    
    __declspec(dllimport) errno_t __cdecl wcscat_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl wcscpy_s(
          wchar_t* _Destination,
          rsize_t _SizeInWords,
          wchar_t const* _Source
        );
    
    
    __declspec(dllimport) errno_t __cdecl wcsncat_s(
          wchar_t*       _Destination,
                                     rsize_t        _SizeInWords,
               wchar_t const* _Source,
                                     rsize_t        _MaxCount
        );
    
    
    __declspec(dllimport) errno_t __cdecl wcsncpy_s(
          wchar_t*       _Destination,
                                  rsize_t        _SizeInWords,
            wchar_t const* _Source,
                                  rsize_t        _MaxCount
        );
    
     
    __declspec(dllimport) wchar_t* __cdecl wcstok_s(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
            wchar_t**      _Context
        );

#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"











#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport)  wchar_t* __cdecl _wcsdup(
      wchar_t const* _String
    );



#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"



extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscat_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscat_s(_Destination, _Size, _Source); } }
#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"



    __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscat( wchar_t *_Destination,  wchar_t const* _Source);
#line 102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) int __cdecl wcscmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcscpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source) throw() { return wcscpy_s(_Destination, _Size, _Source); } }
#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcscpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcscpy( wchar_t *_Destination,  wchar_t const* _Source);
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) size_t __cdecl wcscspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
__declspec(dllimport) size_t __cdecl wcslen(
      wchar_t const* _String
    );

 

#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

#line 143 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"
__declspec(dllimport) size_t __cdecl wcsnlen(
      wchar_t const* _Source,
                            size_t         _MaxCount
    );



     
    
#line 155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"
    
#line 159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"
    static __inline size_t __cdecl wcsnlen_s(
          wchar_t const* _Source,
                                size_t         _MaxCount
        )
    {
        return (_Source == 0) ? 0 : wcsnlen(_Source, _MaxCount);
    }

#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncat_s(  wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncat_s(_Destination, _Size, _Source, _Count); } }
#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncat(  wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) int __cdecl wcsncmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl wcsncpy_s(wchar_t (&_Destination)[_Size],   wchar_t const* _Source,   size_t _Count) throw() { return wcsncpy_s(_Destination, _Size, _Source, _Count); } }
#line 197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl wcsncpy(    wchar_t *_Destination,   wchar_t const* _Source,   size_t _Count);
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

 
__declspec(dllimport) wchar_t const* __cdecl wcspbrk(
      wchar_t const* _String,
      wchar_t const* _Control
    );

 
__declspec(dllimport) size_t __cdecl wcsspn(
      wchar_t const* _String,
      wchar_t const* _Control
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl wcstok(
                          wchar_t*       _String,
                                 wchar_t const* _Delimiter,
        wchar_t**      _Context
    );



    

#line 230 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"
        



    #line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

    #pragma warning(push)
    #pragma warning(disable: 4141 4996) 

      __declspec(deprecated("This function or variable may be unsafe. Consider using " "wcstok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    static __inline wchar_t* __cdecl _wcstok(
          wchar_t*       const _String,
                 wchar_t const* const _Delimiter
        )
    {
        return wcstok(_String, _Delimiter, 0);
    }

    

#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

    
        extern "C++"   __declspec(deprecated("wcstok has been changed to conform with the ISO C standard, " "adding an extra context parameter. To use the legacy Microsoft " "wcstok, define _CRT_NON_CONFORMING_WCSTOK.")) 
        inline wchar_t* __cdecl wcstok(
              wchar_t*       _String,
                     wchar_t const* _Delimiter
            ) throw()
        {
            return wcstok(_String, _Delimiter, 0);
        }
    #line 262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

    #pragma warning(pop)

#line 266 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"



 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wcserror(
      int _ErrorNumber
    );


__declspec(dllimport) errno_t __cdecl _wcserror_s(
      wchar_t* _Buffer,
                                  size_t   _SizeInWords,
                                  int      _ErrorNumber
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcserror_s(wchar_t (&_Buffer)[_Size],   int _Error) throw() { return _wcserror_s(_Buffer, _Size, _Error); } }
#line 287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "__wcserror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl __wcserror(
      wchar_t const* _String
    );

 __declspec(dllimport) errno_t __cdecl __wcserror_s(
      wchar_t*       _Buffer,
                                  size_t         _SizeInWords,
                                wchar_t const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl __wcserror_s(wchar_t (&_Buffer)[_Size],   wchar_t const* _ErrorMessage) throw() { return __wcserror_s(_Buffer, _Size, _ErrorMessage); } }
#line 306 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

  __declspec(dllimport) int __cdecl _wcsicmp(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

  __declspec(dllimport) int __cdecl _wcsicmp_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

  __declspec(dllimport) int __cdecl _wcsnicmp(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

  __declspec(dllimport) int __cdecl _wcsnicmp_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 __declspec(dllimport) errno_t __cdecl _wcsnset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value,
                                 size_t   _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsnset_s(  wchar_t (&_Destination)[_Size],   wchar_t _Value,   size_t _MaxCount) throw() { return _wcsnset_s(_Destination, _Size, _Value, _MaxCount); } }
#line 344 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsnset(  wchar_t *_String,   wchar_t _Value,   size_t _MaxCount);
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

__declspec(dllimport) wchar_t* __cdecl _wcsrev(
      wchar_t* _String
    );

 __declspec(dllimport) errno_t __cdecl _wcsset_s(
      wchar_t* _Destination,
                                 size_t   _SizeInWords,
                                 wchar_t  _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsset_s(  wchar_t (&_String)[_Size],   wchar_t _Value) throw() { return _wcsset_s(_String, _Size, _Value); } }
#line 368 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsset(  wchar_t *_String,   wchar_t _Value);
#line 375 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

 __declspec(dllimport) errno_t __cdecl _wcslwr_s(
      wchar_t* _String,
                                 size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s(  wchar_t (&_String)[_Size]) throw() { return _wcslwr_s(_String, _Size); } }
#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr( wchar_t *_String);
#line 390 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"


__declspec(dllimport) errno_t __cdecl _wcslwr_s_l(
      wchar_t*  _String,
                                 size_t    _SizeInWords,
                             _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcslwr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcslwr_s_l(_String, _Size, _Locale); } }
#line 403 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcslwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcslwr_l(  wchar_t *_String,   _locale_t _Locale);
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"


__declspec(dllimport) errno_t __cdecl _wcsupr_s(
      wchar_t* _String,
                          size_t   _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s(  wchar_t (&_String)[_Size]) throw() { return _wcsupr_s(_String, _Size); } }
#line 421 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr( wchar_t *_String);
#line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"


__declspec(dllimport) errno_t __cdecl _wcsupr_s_l(
      wchar_t*  _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wcsupr_s_l(  wchar_t (&_String)[_Size],   _locale_t _Locale) throw() { return _wcsupr_s_l(_String, _Size, _Locale); } }
#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wcsupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wcsupr_l(  wchar_t *_String,   _locale_t _Locale);
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

 

__declspec(dllimport) size_t __cdecl wcsxfrm(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount
    );

 

__declspec(dllimport) size_t __cdecl _wcsxfrm_l(
        wchar_t*       _Destination,
                                         wchar_t const* _Source,
                size_t         _MaxCount,
                                       _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl wcscoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
__declspec(dllimport) int __cdecl _wcscoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsicoll(
      wchar_t const* _String1,
      wchar_t const* _String2
    );

 
__declspec(dllimport) int __cdecl _wcsicoll_l(
        wchar_t const* _String1,
        wchar_t const* _String2,
      _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsncoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
__declspec(dllimport) int __cdecl _wcsncoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );

 
__declspec(dllimport) int __cdecl _wcsnicoll(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount
    );

 
__declspec(dllimport) int __cdecl _wcsnicoll_l(
      wchar_t const* _String1,
      wchar_t const* _String2,
                            size_t         _MaxCount,
                        _locale_t      _Locale
    );









extern "C++" {

     
    
    inline wchar_t* __cdecl wcschr(  wchar_t* _String, wchar_t _C)
    {
        return const_cast<wchar_t*>(wcschr(static_cast<wchar_t const*>(_String), _C));
    }

     
    inline wchar_t* __cdecl wcspbrk(  wchar_t* _String,   wchar_t const* _Control)
    {
        return const_cast<wchar_t*>(wcspbrk(static_cast<wchar_t const*>(_String), _Control));
    }

     
    inline wchar_t* __cdecl wcsrchr(  wchar_t* _String,   wchar_t _C)
    {
        return const_cast<wchar_t*>(wcsrchr(static_cast<wchar_t const*>(_String), _C));
    }

       
    
    inline wchar_t* __cdecl wcsstr(  wchar_t* _String,   wchar_t const*_SubStr)
    {
        return const_cast<wchar_t*>(wcsstr(static_cast<wchar_t const*>(_String), _SubStr));
    }

}
#line 558 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"









    


#line 571 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsdup" ". See online help for details."))
    __declspec(dllimport) wchar_t* __cdecl wcsdup(
          wchar_t const* _String
        );

    

#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"

    
    

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicmp(
          wchar_t const* _String1,
          wchar_t const* _String2
        );
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsnicmp(
          wchar_t const* _String1,
          wchar_t const* _String2,
                                size_t         _MaxCount
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsnset" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcsnset(
          wchar_t* _String,
                                  wchar_t  _Value,
                                  size_t   _MaxCount
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsrev" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcsrev(
          wchar_t* _String
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsset" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcsset(
          wchar_t* _String,
               wchar_t  _Value
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcslwr" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcslwr(
          wchar_t* _String
        );
    
    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsupr" ". See online help for details."))
     
    __declspec(dllimport) wchar_t* __cdecl wcsupr(
          wchar_t* _String
        );
    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_wcsicoll" ". See online help for details."))
    __declspec(dllimport) int __cdecl wcsicoll(
          wchar_t const* _String1,
          wchar_t const* _String2
        );

#line 637 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"



} __pragma(pack(pop))

#line 643 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstring.h"
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"




__pragma(pack(push, 8)) extern "C" {







     
    __declspec(dllimport) errno_t __cdecl strcpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
                                char const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl strcat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
                                   char const* _Source
        );

    
    __declspec(dllimport) errno_t __cdecl strerror_s(
          char*  _Buffer,
                                  size_t _SizeInBytes,
                                  int    _ErrorNumber);

    
    __declspec(dllimport) errno_t __cdecl strncat_s(
          char*       _Destination,
                                     rsize_t     _SizeInBytes,
               char const* _Source,
                                     rsize_t     _MaxCount
        );

    
    __declspec(dllimport) errno_t __cdecl strncpy_s(
          char*       _Destination,
                                  rsize_t     _SizeInBytes,
            char const* _Source,
                                  rsize_t     _MaxCount
        );

     
    __declspec(dllimport) char*  __cdecl strtok_s(
                          char*       _String,
                                 char const* _Delimiter,
            char**      _Context
        );

#line 70 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

__declspec(dllimport) void* __cdecl _memccpy(
      void*       _Dst,
                                   void const* _Src,
                                   int         _Val,
                                   size_t      _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcat_s(char (&_Destination)[_Size],   char const* _Source) throw() { return strcat_s(_Destination, _Size, _Source); } }
#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"



    __declspec(deprecated("This function or variable may be unsafe. Consider using " "strcat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  char* __cdecl strcat( char *_Destination,  char const* _Source);
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

#line 93 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

 
int __cdecl strcmp(
      char const* _Str1,
      char const* _Str2
    );

 
__declspec(dllimport) int __cdecl _strcmpi(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl strcoll(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _strcoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strcpy_s(  char (&_Destination)[_Size],   char const* _Source) throw() { return strcpy_s(_Destination, _Size, _Source); } }
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strcpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  char* __cdecl strcpy( char *_Destination,  char const* _Source);
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

 
__declspec(dllimport) size_t __cdecl strcspn(
      char const* _Str,
      char const* _Control
    );




#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

 
__declspec(dllimport)  char* __cdecl _strdup(
      char const* _Source
    );



#line 150 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char*  __cdecl _strerror(
      char const* _ErrorMessage
    );


__declspec(dllimport) errno_t __cdecl _strerror_s(
      char*       _Buffer,
                              size_t      _SizeInBytes,
                        char const* _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strerror_s(char (&_Buffer)[_Size],   char const* _ErrorMessage) throw() { return _strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "strerror_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl strerror(
      int _ErrorMessage
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strerror_s(char (&_Buffer)[_Size],   int _ErrorMessage) throw() { return strerror_s(_Buffer, _Size, _ErrorMessage); } }
#line 182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

 
__declspec(dllimport) int __cdecl _stricmp(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _stricoll(
      char const* _String1,
      char const* _String2
    );

 
__declspec(dllimport) int __cdecl _stricoll_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _stricmp_l(
        char const* _String1,
        char const* _String2,
      _locale_t   _Locale
    );

 
size_t __cdecl strlen(
      char const* _Str
    );


__declspec(dllimport) errno_t __cdecl _strlwr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s(  char (&_String)[_Size]) throw() { return _strlwr_s(_String, _Size); } }
#line 224 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr( char *_String);
#line 229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"


__declspec(dllimport) errno_t __cdecl _strlwr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strlwr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strlwr_s_l(_String, _Size, _Locale); } }
#line 242 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strlwr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strlwr_l(  char *_String,   _locale_t _Locale);
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncat_s(  char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncat_s(_Destination, _Size, _Source, _Count); } }
#line 256 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncat_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncat(  char *_Destination,   char const* _Source,   size_t _Count);
#line 264 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

 
__declspec(dllimport) int __cdecl strncmp(
      char const* _Str1,
      char const* _Str2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicmp(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicmp_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _strnicoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strnicoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

 
__declspec(dllimport) int __cdecl _strncoll(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount
    );

 
__declspec(dllimport) int __cdecl _strncoll_l(
      char const* _String1,
      char const* _String2,
                            size_t      _MaxCount,
                        _locale_t   _Locale
    );

__declspec(dllimport) size_t __cdecl __strncnt(
      char const* _String,
                         size_t      _Count
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl strncpy_s(char (&_Destination)[_Size],   char const* _Source,   size_t _Count) throw() { return strncpy_s(_Destination, _Size, _Source, _Count); } }
#line 328 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "strncpy_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl strncpy(    char *_Destination,   char const* _Source,   size_t _Count);
#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

 

#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"
__declspec(dllimport) size_t __cdecl strnlen(
      char const* _String,
                            size_t      _MaxCount
    );



     
    
#line 358 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"
    
#line 362 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"
    static __inline size_t __cdecl strnlen_s(
          char const* _String,
                                size_t      _MaxCount
        )
    {
        return _String == 0 ? 0 : strnlen(_String, _MaxCount);
    }

#line 371 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"


__declspec(dllimport) errno_t __cdecl _strnset_s(
      char*  _String,
                                 size_t _SizeInBytes,
                                 int    _Value,
                                 size_t _MaxCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strnset_s(  char (&_Destination)[_Size],   int _Value,   size_t _Count) throw() { return _strnset_s(_Destination, _Size, _Value, _Count); } }
#line 386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strnset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strnset(  char *_Destination,   int _Value,   size_t _Count);
#line 394 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

 
__declspec(dllimport) char const* __cdecl strpbrk(
      char const* _Str,
      char const* _Control
    );

__declspec(dllimport) char* __cdecl _strrev(
      char* _Str
    );


__declspec(dllimport) errno_t __cdecl _strset_s(
      char*  _Destination,
                                     size_t _DestinationSize,
                                     int    _Value
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strset_s(  char (&_Destination)[_Size],   int _Value) throw() { return _strset_s(_Destination, _Size, _Value); } }
#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strset_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  char* __cdecl _strset( char *_Destination,  int _Value);
#line 423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

 
__declspec(dllimport) size_t __cdecl strspn(
      char const* _Str,
      char const* _Control
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "strtok_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) char* __cdecl strtok(
      char*       _String,
             char const* _Delimiter
    );


__declspec(dllimport) errno_t __cdecl _strupr_s(
      char*  _String,
                          size_t _Size
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s(  char (&_String)[_Size]) throw() { return _strupr_s(_String, _Size); } }
#line 446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr( char *_String);
#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"


__declspec(dllimport) errno_t __cdecl _strupr_s_l(
      char*     _String,
                          size_t    _Size,
                      _locale_t _Locale
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _strupr_s_l(  char (&_String)[_Size],   _locale_t _Locale) throw() { return _strupr_s_l(_String, _Size, _Locale); } }
#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_strupr_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) char* __cdecl _strupr_l(  char *_String,   _locale_t _Locale);
#line 471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

 

__declspec(dllimport) size_t __cdecl strxfrm(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount
    );

 

__declspec(dllimport) size_t __cdecl _strxfrm_l(
        char*       _Destination,
                                         char const* _Source,
                 size_t      _MaxCount,
                                       _locale_t   _Locale
    );




extern "C++"
{
     
    inline char* __cdecl strchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strchr(static_cast<char const*>(_String), _Ch));
    }

     
    inline char* __cdecl strpbrk(  char* const _String,   char const* const _Control)
    {
        return const_cast<char*>(strpbrk(static_cast<char const*>(_String), _Control));
    }

     
    inline char* __cdecl strrchr(  char* const _String,   int const _Ch)
    {
        return const_cast<char*>(strrchr(static_cast<char const*>(_String), _Ch));
    }

       
    inline char* __cdecl strstr(  char* const _String,   char const* const _SubString)
    {
        return const_cast<char*>(strstr(static_cast<char const*>(_String), _SubString));
    }
}
#line 519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"





    


#line 528 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strdup" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strdup(
          char const* _String
        );

    

#line 537 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"

    
      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strcmpi" ". See online help for details."))
    __declspec(dllimport) int __cdecl strcmpi(
          char const* _String1,
          char const* _String2
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_stricmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl stricmp(
          char const* _String1,
          char const* _String2
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strlwr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strlwr(
          char* _String
        );

      __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnicmp" ". See online help for details."))
    __declspec(dllimport) int __cdecl strnicmp(
          char const* _String1,
          char const* _String2,
                                size_t      _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strnset" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strnset(
          char*  _String,
                                  int    _Value,
                                  size_t _MaxCount
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strrev" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strrev(
          char* _String
        );

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strset" ". See online help for details."))
    char* __cdecl strset(
          char* _String,
               int   _Value);

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_strupr" ". See online help for details."))
    __declspec(dllimport) char* __cdecl strupr(
          char* _String
        );

#line 586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"



} __pragma(pack(pop))

#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\string.h"
#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"












#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"









__pragma(pack(push, 8)) extern "C" {
























#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"

    typedef struct __declspec(align(16)) _SETJMP_FLOAT128
    {
        unsigned __int64 Part[2];
    } SETJMP_FLOAT128;

    
    typedef SETJMP_FLOAT128 _JBTYPE;

    typedef struct _JUMP_BUFFER
    {
        unsigned __int64 Frame;
        unsigned __int64 Rbx;
        unsigned __int64 Rsp;
        unsigned __int64 Rbp;
        unsigned __int64 Rsi;
        unsigned __int64 Rdi;
        unsigned __int64 R12;
        unsigned __int64 R13;
        unsigned __int64 R14;
        unsigned __int64 R15;
        unsigned __int64 Rip;
        unsigned long MxCsr;
        unsigned short FpCsr;
        unsigned short Spare;

        SETJMP_FLOAT128 Xmm6;
        SETJMP_FLOAT128 Xmm7;
        SETJMP_FLOAT128 Xmm8;
        SETJMP_FLOAT128 Xmm9;
        SETJMP_FLOAT128 Xmm10;
        SETJMP_FLOAT128 Xmm11;
        SETJMP_FLOAT128 Xmm12;
        SETJMP_FLOAT128 Xmm13;
        SETJMP_FLOAT128 Xmm14;
        SETJMP_FLOAT128 Xmm15;
    } _JUMP_BUFFER;






















































#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"





    
    typedef _JBTYPE jmp_buf[16];
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"




    
#line 153 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"




int __cdecl _setjmp(
      jmp_buf _Buf
    );


    #pragma warning(push)
    #pragma warning(disable:4987) 
    __declspec(noreturn) void __cdecl longjmp(
          jmp_buf _Buf,
          int     _Value
        ) throw(...);
    #pragma warning(pop)





#line 175 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\setjmp.h"


} __pragma(pack(pop))
#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"



    
        #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"













#pragma once



#line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"







#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
















#pragma once



#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"







#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"

















#pragma once



#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"

















#pragma once



#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"







#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"










#pragma once



#line 16 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"







#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
















#pragma once



#line 22 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"







#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"




















#pragma once



#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"







#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"



#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"



























#pragma once



#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"







#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"














#pragma once






#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"



#line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"


extern "C" { 


#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"

typedef union __declspec(intrin_type) __declspec(align(8)) __m64
{
    unsigned __int64    m64_u64;
    float               m64_f32[2];
    __int8              m64_i8[8];
    __int16             m64_i16[4];
    __int32             m64_i32[2];
    __int64             m64_i64;
    unsigned __int8     m64_u8[8];
    unsigned __int16    m64_u16[4];
    unsigned __int32    m64_u32[2];
} __m64;









































































































































#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"


}; 
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"

#line 190 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
#line 192 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\mmintrin.h"
#line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"

















typedef union __declspec(intrin_type) __declspec(align(16)) __m128 {
     float               m128_f32[4];
     unsigned __int64    m128_u64[2];
     __int8              m128_i8[16];
     __int16             m128_i16[8];
     __int32             m128_i32[4];
     __int64             m128_i64[2];
     unsigned __int8     m128_u8[16];
     unsigned __int16    m128_u16[8];
     unsigned __int32    m128_u32[4];
 } __m128;



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\malloc.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {





    


#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\malloc.h"















typedef struct _heapinfo
{
    int* _pentry;
    size_t _size;
    int _useflag;
} _HEAPINFO;








   
void* __cdecl _alloca(  size_t _Size);





    __declspec(dllimport) intptr_t __cdecl _get_heap_handle(void);

     
    __declspec(dllimport) int __cdecl _heapmin(void);

    
        __declspec(dllimport) int __cdecl _heapwalk(  _HEAPINFO* _EntryInfo);
    #line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\malloc.h"

    
          __declspec(dllimport) int __cdecl _heapchk(void);
        __declspec(dllimport) int __cdecl _resetstkoflw(void);
    #line 73 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\malloc.h"
     
    
    
    

    
        
    

#line 83 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\malloc.h"

    typedef char __static_assert_t[(sizeof(unsigned int) <= 16) != 0];


    #pragma warning(push)
    #pragma warning(disable:6540)

    __inline void* _MarkAllocaS(   void* _Ptr, unsigned int _Marker)
    {
        if (_Ptr)
        {
            *((unsigned int*)_Ptr) = _Marker;
            _Ptr = (char*)_Ptr + 16;
        }
        return _Ptr;
    }

    __inline size_t _MallocaComputeSize(size_t _Size)
    {
        size_t _MarkedSize = _Size + 16;
        return _MarkedSize > _Size ? _MarkedSize : 0;
    }

    #pragma warning(pop)

#line 109 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\malloc.h"
















    
    







#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\malloc.h"




#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\malloc.h"
#line 141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\malloc.h"

    

    #pragma warning(push)
    #pragma warning(disable: 6014)
    __inline void __cdecl _freea(    void* _Memory)
    {
        unsigned int _Marker;
        if (_Memory)
        {
            _Memory = (char*)_Memory - 16;
            _Marker = *(unsigned int*)_Memory;
            if (_Marker == 0xDDDD)
            {
                free(_Memory);
            }
            





        }
    }
    #pragma warning(pop)

#line 168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\malloc.h"




    
#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\malloc.h"



} __pragma(pack(pop))
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
#line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"

 
 
 
 
 
 
 
 
 
 




 
 
 
 
 
 
 
 
 
 












































































 
 
 


extern "C" { 
  
#line 191 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"





extern __m128 _mm_add_ss(__m128 _A, __m128 _B);
extern __m128 _mm_add_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ss(__m128 _A, __m128 _B);
extern __m128 _mm_sub_ps(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ss(__m128 _A, __m128 _B);
extern __m128 _mm_mul_ps(__m128 _A, __m128 _B);
extern __m128 _mm_div_ss(__m128 _A, __m128 _B);
extern __m128 _mm_div_ps(__m128 _A, __m128 _B);
extern __m128 _mm_sqrt_ss(__m128 _A);
extern __m128 _mm_sqrt_ps(__m128 _A);
extern __m128 _mm_rcp_ss(__m128 _A);
extern __m128 _mm_rcp_ps(__m128 _A);
extern __m128 _mm_rsqrt_ss(__m128 _A);
extern __m128 _mm_rsqrt_ps(__m128 _A);
extern __m128 _mm_min_ss(__m128 _A, __m128 _B);
extern __m128 _mm_min_ps(__m128 _A, __m128 _B);
extern __m128 _mm_max_ss(__m128 _A, __m128 _B);
extern __m128 _mm_max_ps(__m128 _A, __m128 _B);





extern __m128 _mm_and_ps(__m128 _A, __m128 _B);
extern __m128 _mm_andnot_ps(__m128 _A, __m128 _B);
extern __m128 _mm_or_ps(__m128 _A, __m128 _B);
extern __m128 _mm_xor_ps(__m128 _A, __m128 _B);





extern __m128 _mm_cmpeq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpeq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmplt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmple_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpgt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpneq_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnlt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnle_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpngt_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpnge_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpord_ps(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ss(__m128 _A, __m128 _B);
extern __m128 _mm_cmpunord_ps(__m128 _A, __m128 _B);
extern int _mm_comieq_ss(__m128 _A, __m128 _B);
extern int _mm_comilt_ss(__m128 _A, __m128 _B);
extern int _mm_comile_ss(__m128 _A, __m128 _B);
extern int _mm_comigt_ss(__m128 _A, __m128 _B);
extern int _mm_comige_ss(__m128 _A, __m128 _B);
extern int _mm_comineq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomieq_ss(__m128 _A, __m128 _B);
extern int _mm_ucomilt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomile_ss(__m128 _A, __m128 _B);
extern int _mm_ucomigt_ss(__m128 _A, __m128 _B);
extern int _mm_ucomige_ss(__m128 _A, __m128 _B);
extern int _mm_ucomineq_ss(__m128 _A, __m128 _B);





extern int _mm_cvt_ss2si(__m128 _A);
extern int _mm_cvtt_ss2si(__m128 _A);
extern __m128 _mm_cvt_si2ss(__m128, int);
extern float _mm_cvtss_f32(__m128 _A);








#line 282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"





extern __int64 _mm_cvtss_si64(__m128 _A);
extern __int64 _mm_cvttss_si64(__m128 _A);
extern __m128  _mm_cvtsi64_ss(__m128 _A, __int64 _B);
#line 291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"





extern __m128 _mm_shuffle_ps(__m128 _A, __m128 _B, unsigned int _Imm8);
extern __m128 _mm_unpackhi_ps(__m128 _A, __m128 _B);
extern __m128 _mm_unpacklo_ps(__m128 _A, __m128 _B);
extern __m128 _mm_loadh_pi(__m128, __m64 const*);
extern __m128 _mm_movehl_ps(__m128, __m128);
extern __m128 _mm_movelh_ps(__m128, __m128);
extern void _mm_storeh_pi(__m64 *, __m128);
extern __m128 _mm_loadl_pi(__m128, __m64 const*);
extern void _mm_storel_pi(__m64 *, __m128);
extern int _mm_movemask_ps(__m128 _A);



















#line 326 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"





extern __m128 _mm_set_ss(float _A);
extern __m128 _mm_set_ps1(float _A);
extern __m128 _mm_set_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setr_ps(float _A, float _B, float _C, float _D);
extern __m128 _mm_setzero_ps(void);
extern __m128 _mm_load_ss(float const*_A);
extern __m128 _mm_load_ps1(float const*_A);
extern __m128 _mm_load_ps(float const*_A);
extern __m128 _mm_loadr_ps(float const*_A);
extern __m128 _mm_loadu_ps(float const*_A);
extern void _mm_store_ss(float *_V, __m128 _A);
extern void _mm_store_ps1(float *_V, __m128 _A);
extern void _mm_store_ps(float *_V, __m128 _A);
extern void _mm_storer_ps(float *_V, __m128 _A);
extern void _mm_storeu_ps(float *_V, __m128 _A);
extern void _mm_prefetch(char const*_A, int _Sel);


#line 350 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
extern void _mm_stream_ps(float *, __m128);
extern __m128 _mm_move_ss(__m128 _A, __m128 _B);

extern void _mm_sfence(void);
extern unsigned int _mm_getcsr(void);
extern void _mm_setcsr(unsigned int);
























#line 381 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"







 
 
 


















































































































#line 506 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"



}; 
#line 511 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"

#line 513 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
#line 514 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
#line 515 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmmintrin.h"
#line 43 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"

typedef union __declspec(intrin_type) __declspec(align(16)) __m128i {
    __int8              m128i_i8[16];
    __int16             m128i_i16[8];
    __int32             m128i_i32[4];
    __int64             m128i_i64[2];
    unsigned __int8     m128i_u8[16];
    unsigned __int16    m128i_u16[8];
    unsigned __int32    m128i_u32[4];
    unsigned __int64    m128i_u64[2];
} __m128i;

typedef struct __declspec(intrin_type) __declspec(align(16)) __m128d {
    double              m128d_f64[2];
} __m128d;






 
 
 


extern "C" { 
  
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"





extern __m128d _mm_add_sd(__m128d _A, __m128d _B);
extern __m128d _mm_add_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sub_pd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_sd(__m128d _A, __m128d _B);
extern __m128d _mm_mul_pd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_sqrt_pd(__m128d _A);
extern __m128d _mm_div_sd(__m128d _A, __m128d _B);
extern __m128d _mm_div_pd(__m128d _A, __m128d _B);
extern __m128d _mm_min_sd(__m128d _A, __m128d _B);
extern __m128d _mm_min_pd(__m128d _A, __m128d _B);
extern __m128d _mm_max_sd(__m128d _A, __m128d _B);
extern __m128d _mm_max_pd(__m128d _A, __m128d _B);





extern __m128d _mm_and_pd(__m128d _A, __m128d _B);
extern __m128d _mm_andnot_pd(__m128d _A, __m128d _B);
extern __m128d _mm_or_pd(__m128d _A, __m128d _B);
extern __m128d _mm_xor_pd(__m128d _A, __m128d _B);





extern __m128d _mm_cmpeq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpeq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmplt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmple_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpgt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpneq_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnlt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnle_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpngt_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpnge_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpord_sd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_pd(__m128d _A, __m128d _B);
extern __m128d _mm_cmpunord_sd(__m128d _A, __m128d _B);
extern int _mm_comieq_sd(__m128d _A, __m128d _B);
extern int _mm_comilt_sd(__m128d _A, __m128d _B);
extern int _mm_comile_sd(__m128d _A, __m128d _B);
extern int _mm_comigt_sd(__m128d _A, __m128d _B);
extern int _mm_comige_sd(__m128d _A, __m128d _B);
extern int _mm_comineq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomieq_sd(__m128d _A, __m128d _B);
extern int _mm_ucomilt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomile_sd(__m128d _A, __m128d _B);
extern int _mm_ucomigt_sd(__m128d _A, __m128d _B);
extern int _mm_ucomige_sd(__m128d _A, __m128d _B);
extern int _mm_ucomineq_sd(__m128d _A, __m128d _B);





extern __m128d _mm_cvtepi32_pd(__m128i _A);
extern __m128i _mm_cvtpd_epi32(__m128d _A);
extern __m128i _mm_cvttpd_epi32(__m128d _A);
extern __m128 _mm_cvtepi32_ps(__m128i _A);
extern __m128i _mm_cvtps_epi32(__m128 _A);
extern __m128i _mm_cvttps_epi32(__m128 _A);
extern __m128 _mm_cvtpd_ps(__m128d _A);
extern __m128d _mm_cvtps_pd(__m128 _A);
extern __m128 _mm_cvtsd_ss(__m128 _A, __m128d _B);
extern __m128d _mm_cvtss_sd(__m128d _A, __m128 _B);

extern int _mm_cvtsd_si32(__m128d _A);
extern int _mm_cvttsd_si32(__m128d _A);
extern __m128d _mm_cvtsi32_sd(__m128d _A, int _B);





#line 166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"





extern __m128d _mm_unpackhi_pd(__m128d _A, __m128d _B);
extern __m128d _mm_unpacklo_pd(__m128d _A, __m128d _B);
extern int _mm_movemask_pd(__m128d _A);
extern __m128d _mm_shuffle_pd(__m128d _A, __m128d _B, int _I);





extern __m128d _mm_load_pd(double const*_Dp);
extern __m128d _mm_load1_pd(double const*_Dp);
extern __m128d _mm_loadr_pd(double const*_Dp);
extern __m128d _mm_loadu_pd(double const*_Dp);
extern __m128d _mm_load_sd(double const*_Dp);
extern __m128d _mm_loadh_pd(__m128d _A, double const*_Dp);
extern __m128d _mm_loadl_pd(__m128d _A, double const*_Dp);





extern __m128d _mm_set_sd(double _W);
extern __m128d _mm_set1_pd(double _A);
extern __m128d _mm_set_pd(double _Z, double _Y);
extern __m128d _mm_setr_pd(double _Y, double _Z);
extern __m128d _mm_setzero_pd(void);
extern __m128d _mm_move_sd(__m128d _A, __m128d _B);





extern void _mm_store_sd(double *_Dp, __m128d _A);
extern void _mm_store1_pd(double *_Dp, __m128d _A);
extern void _mm_store_pd(double *_Dp, __m128d _A);
extern void _mm_storeu_pd(double *_Dp, __m128d _A);
extern void _mm_storer_pd(double *_Dp, __m128d _A);
extern void _mm_storeh_pd(double *_Dp, __m128d _A);
extern void _mm_storel_pd(double *_Dp, __m128d _A);





extern __m128i _mm_add_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_add_epi32(__m128i _A, __m128i _B);


#line 221 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_add_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_adds_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_avg_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_madd_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_max_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_min_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_min_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_mulhi_epu16(__m128i _A, __m128i _B);
extern __m128i _mm_mullo_epi16(__m128i _A, __m128i _B);


#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_mul_epu32(__m128i _A, __m128i _B);
extern __m128i _mm_sad_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_sub_epi32(__m128i _A, __m128i _B);


#line 247 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_sub_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu8(__m128i _A, __m128i _B);
extern __m128i _mm_subs_epu16(__m128i _A, __m128i _B);





extern __m128i _mm_and_si128(__m128i _A, __m128i _B);
extern __m128i _mm_andnot_si128(__m128i _A, __m128i _B);
extern __m128i _mm_or_si128(__m128i _A, __m128i _B);
extern __m128i _mm_xor_si128(__m128i _A, __m128i _B);





extern __m128i _mm_slli_si128(__m128i _A, int _Imm);
extern __m128i _mm_slli_epi16(__m128i _A, int _Count);
extern __m128i _mm_sll_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi32(__m128i _A, int _Count);
extern __m128i _mm_sll_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_slli_epi64(__m128i _A, int _Count);
extern __m128i _mm_sll_epi64(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi16(__m128i _A, int _Count);
extern __m128i _mm_sra_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srai_epi32(__m128i _A, int _Count);
extern __m128i _mm_sra_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_si128(__m128i _A, int _Imm);
extern __m128i _mm_srli_epi16(__m128i _A, int _Count);
extern __m128i _mm_srl_epi16(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi32(__m128i _A, int _Count);
extern __m128i _mm_srl_epi32(__m128i _A, __m128i _Count);
extern __m128i _mm_srli_epi64(__m128i _A, int _Count);
extern __m128i _mm_srl_epi64(__m128i _A, __m128i _Count);





extern __m128i _mm_cmpeq_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpeq_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmpgt_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_cmplt_epi32(__m128i _A, __m128i _B);





extern __m128i _mm_cvtsi32_si128(int _A);
extern int _mm_cvtsi128_si32(__m128i _A);





extern __m128i _mm_packs_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_packs_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_packus_epi16(__m128i _A, __m128i _B);
extern int _mm_extract_epi16(__m128i _A, int _Imm);
extern __m128i _mm_insert_epi16(__m128i _A, int _B, int _Imm);
extern int _mm_movemask_epi8(__m128i _A);
extern __m128i _mm_shuffle_epi32(__m128i _A, int _Imm);
extern __m128i _mm_shufflehi_epi16(__m128i _A, int _Imm);
extern __m128i _mm_shufflelo_epi16(__m128i _A, int _Imm);
extern __m128i _mm_unpackhi_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpackhi_epi64(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi8(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi16(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi32(__m128i _A, __m128i _B);
extern __m128i _mm_unpacklo_epi64(__m128i _A, __m128i _B);





extern __m128i _mm_load_si128(__m128i const*_P);
extern __m128i _mm_loadu_si128(__m128i const*_P);
extern __m128i _mm_loadl_epi64(__m128i const*_P);







#line 343 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set_epi64x(__int64 _I1,__int64 _I0);
extern __m128i _mm_set_epi32(int _I3, int _I2, int _I1, int _I0);
extern __m128i _mm_set_epi16(short _W7, short _W6, short _W5, short _W4,
                             short _W3, short _W2, short _W1, short _W0);
extern __m128i _mm_set_epi8(char _B15, char _B14, char _B13, char _B12,
                            char _B11, char _B10, char _B9, char _B8,
                            char _B7, char _B6, char _B5, char _B4,
                            char _B3, char _B2, char _B1, char _B0);


#line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_set1_epi64x(__int64 i);
extern __m128i _mm_set1_epi32(int _I);
extern __m128i _mm_set1_epi16(short _W);
extern __m128i _mm_set1_epi8(char _B);
extern __m128i _mm_setl_epi64(__m128i _Q);


#line 362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
extern __m128i _mm_setr_epi32(int _I0, int _I1, int _I2, int _I3);
extern __m128i _mm_setr_epi16(short _W0, short _W1, short _W2, short _W3,
                              short _W4, short _W5, short _W6, short _W7);
extern __m128i _mm_setr_epi8(char _B15, char _B14, char _B13, char _B12,
                             char _B11, char _B10, char _B9, char _B8,
                             char _B7, char _B6, char _B5, char _B4,
                             char _B3, char _B2, char _B1, char _B0);
extern __m128i _mm_setzero_si128(void);





extern void _mm_store_si128(__m128i *_P, __m128i _B);
extern void _mm_storeu_si128(__m128i *_P, __m128i _B);
extern void _mm_storel_epi64(__m128i *_P, __m128i _Q);
extern void _mm_maskmoveu_si128(__m128i _D, __m128i _N, char *_P);





extern __m128i _mm_move_epi64(__m128i _Q);



#line 389 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"





extern void _mm_stream_pd(double *_Dp, __m128d _A);
extern void _mm_stream_si128(__m128i *_P, __m128i _A);
extern void _mm_clflush(void const*_P);
extern void _mm_lfence(void);
extern void _mm_mfence(void);
extern void _mm_stream_si32(int *_P, int _I);
extern void _mm_pause(void);





extern double _mm_cvtsd_f64(__m128d _A);







extern __m128  _mm_castpd_ps(__m128d);
extern __m128i _mm_castpd_si128(__m128d);
extern __m128d _mm_castps_pd(__m128);
extern __m128i _mm_castps_si128(__m128);
extern __m128  _mm_castsi128_ps(__m128i);
extern __m128d _mm_castsi128_pd(__m128i);






extern __int64 _mm_cvtsd_si64(__m128d);
extern __int64 _mm_cvttsd_si64(__m128d);
extern __m128d _mm_cvtsi64_sd(__m128d, __int64);
extern __m128i _mm_cvtsi64_si128(__int64);
extern __int64 _mm_cvtsi128_si64(__m128i);


#line 434 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"


}; 
#line 438 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"

#line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
#line 441 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
#line 442 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\emmintrin.h"
#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"

 
 
 














 
 
 


extern "C" { 
  
#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"





extern __m128 _mm_addsub_ps(__m128 , __m128 );
extern __m128 _mm_hadd_ps(__m128 , __m128 );
extern __m128 _mm_hsub_ps(__m128 , __m128 );
extern __m128 _mm_movehdup_ps(__m128 );
extern __m128 _mm_moveldup_ps(__m128 );





extern __m128d _mm_addsub_pd(__m128d , __m128d );
extern __m128d _mm_hadd_pd(__m128d , __m128d );
extern __m128d _mm_hsub_pd(__m128d , __m128d );
extern __m128d _mm_loaddup_pd(double const * );
extern __m128d _mm_movedup_pd(__m128d );




extern __m128i _mm_lddqu_si128(__m128i const * );







extern void _mm_monitor(void const * , unsigned , unsigned );




extern void _mm_mwait(unsigned , unsigned );


}; 
#line 103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"

#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pmmintrin.h"
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"









extern "C" {
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

    
    
    
    
    
    

    extern __m128i _mm_hadd_epi16 (__m128i, __m128i);
    extern __m128i _mm_hadd_epi32 (__m128i, __m128i);
    extern __m128i _mm_hadds_epi16 (__m128i, __m128i);





#line 54 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

    
    
    
    
    
    
    

    extern __m128i _mm_hsub_epi16 (__m128i, __m128i);
    extern __m128i _mm_hsub_epi32 (__m128i, __m128i);
    extern __m128i _mm_hsubs_epi16 (__m128i, __m128i);





#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

    
    
    
    
    
    
    
    

    extern __m128i _mm_maddubs_epi16 (__m128i, __m128i);



#line 87 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_mulhrs_epi16 (__m128i, __m128i);



#line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_shuffle_epi8 (__m128i, __m128i);



#line 105 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_sign_epi8 (__m128i, __m128i);
    extern __m128i _mm_sign_epi16 (__m128i, __m128i);
    extern __m128i _mm_sign_epi32 (__m128i, __m128i);





#line 118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_alignr_epi8 (__m128i, __m128i, int);



#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

    
    

    extern __m128i _mm_abs_epi8 (__m128i);
    extern __m128i _mm_abs_epi16 (__m128i);
    extern __m128i _mm_abs_epi32 (__m128i);





#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"


};
#line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"

#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
#line 147 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
#line 148 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tmmintrin.h"
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"


















































extern "C" {
#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"

        
        

        extern __m128i _mm_blend_epi16 (__m128i, __m128i, const int );
        extern __m128i _mm_blendv_epi8 (__m128i, __m128i, __m128i mask);

        
        

        extern __m128  _mm_blend_ps (__m128, __m128, const int );
        extern __m128  _mm_blendv_ps(__m128, __m128, __m128 );

        
        

        extern __m128d _mm_blend_pd (__m128d, __m128d, const int );
        extern __m128d _mm_blendv_pd(__m128d, __m128d, __m128d );

        
        

        extern __m128  _mm_dp_ps(__m128, __m128, const int );
        extern __m128d _mm_dp_pd(__m128d, __m128d, const int );

        
        

        extern __m128i _mm_cmpeq_epi64(__m128i, __m128i);

        

        extern __m128i _mm_min_epi8 (__m128i, __m128i);
        extern __m128i _mm_max_epi8 (__m128i, __m128i);

        extern __m128i _mm_min_epu16(__m128i, __m128i);
        extern __m128i _mm_max_epu16(__m128i, __m128i);

        extern __m128i _mm_min_epi32(__m128i, __m128i);
        extern __m128i _mm_max_epi32(__m128i, __m128i);
        extern __m128i _mm_min_epu32(__m128i, __m128i);
        extern __m128i _mm_max_epu32(__m128i, __m128i);

        
        

        extern __m128i _mm_mullo_epi32(__m128i, __m128i);

        
        

        extern __m128i _mm_mul_epi32(__m128i, __m128i);

        
        

        extern int _mm_testz_si128(__m128i , __m128i );

        
        

        extern int _mm_testc_si128(__m128i , __m128i );

        
        
        

        extern int _mm_testnzc_si128(__m128i , __m128i );

        
        
        
        
        

        extern __m128 _mm_insert_ps(__m128 , __m128 , const int );

        




        
        

        extern int _mm_extract_ps(__m128 , const int );

        
        




        
        





        
        

        extern __m128i _mm_insert_epi8 (__m128i , int , const int );
        extern __m128i _mm_insert_epi32(__m128i , int , const int );


        extern __m128i _mm_insert_epi64(__m128i , __int64 , const int );
#line 194 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
        
        

        extern int   _mm_extract_epi8 (__m128i , const int );
        extern int   _mm_extract_epi32(__m128i , const int );


        extern __int64 _mm_extract_epi64(__m128i , const int );
#line 203 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"

        
        

        extern __m128i _mm_minpos_epu16(__m128i);

        

        extern __m128d _mm_round_pd(__m128d , int );
        extern __m128d _mm_round_sd(__m128d , __m128d , int );

        

        extern __m128  _mm_round_ps(__m128  , int );
        extern __m128  _mm_round_ss(__m128 , __m128  , int );

        

        extern __m128i _mm_cvtepi8_epi32 (__m128i);
        extern __m128i _mm_cvtepi16_epi32(__m128i);
        extern __m128i _mm_cvtepi8_epi64 (__m128i);
        extern __m128i _mm_cvtepi32_epi64(__m128i);
        extern __m128i _mm_cvtepi16_epi64(__m128i);
        extern __m128i _mm_cvtepi8_epi16 (__m128i);

        

        extern __m128i _mm_cvtepu8_epi32 (__m128i);
        extern __m128i _mm_cvtepu16_epi32(__m128i);
        extern __m128i _mm_cvtepu8_epi64 (__m128i);
        extern __m128i _mm_cvtepu32_epi64(__m128i);
        extern __m128i _mm_cvtepu16_epi64(__m128i);
        extern __m128i _mm_cvtepu8_epi16 (__m128i);


        
        

        extern __m128i _mm_packus_epi32(__m128i, __m128i);

        
        
        

        extern __m128i _mm_mpsadbw_epu8(__m128i , __m128i , const int );

        



        extern __m128i _mm_stream_load_si128(const __m128i*);


}; 
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"

#line 260 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
#line 261 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
#line 262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\smmintrin.h"
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"



extern "C" {
#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"













































    extern __m128i _mm_cmpistrm (__m128i , __m128i , const int );
    extern int     _mm_cmpistri (__m128i , __m128i , const int );

    extern __m128i _mm_cmpestrm (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestri (__m128i , int , __m128i , int , const int );





    extern int     _mm_cmpistrz (__m128i , __m128i , const int );
    extern int     _mm_cmpistrc (__m128i , __m128i , const int );
    extern int     _mm_cmpistrs (__m128i , __m128i , const int );
    extern int     _mm_cmpistro (__m128i , __m128i , const int );
    extern int     _mm_cmpistra (__m128i , __m128i , const int );

    extern int     _mm_cmpestrz (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestrc (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestrs (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestro (__m128i , int , __m128i , int , const int );
    extern int     _mm_cmpestra (__m128i , int , __m128i , int , const int );






    extern __m128i _mm_cmpgt_epi64(__m128i , __m128i );





    extern int _mm_popcnt_u32(unsigned int );


    extern __int64 _mm_popcnt_u64(unsigned __int64 );
#line 121 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"





    extern unsigned int _mm_crc32_u8 (unsigned int , unsigned char );
    extern unsigned int _mm_crc32_u16(unsigned int , unsigned short );
    extern unsigned int _mm_crc32_u32(unsigned int , unsigned int );


    extern unsigned __int64 _mm_crc32_u64(unsigned __int64 , unsigned __int64 );
#line 133 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"


}; 
#line 137 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"

#line 139 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
#line 140 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
#line 141 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\nmmintrin.h"
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"



extern "C" {
#line 37 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"





extern __m128i _mm_aesdec_si128(__m128i , __m128i );





extern __m128i _mm_aesdeclast_si128(__m128i , __m128i );





extern __m128i _mm_aesenc_si128(__m128i , __m128i );





extern __m128i _mm_aesenclast_si128(__m128i , __m128i );





extern __m128i _mm_aesimc_si128(__m128i );






extern __m128i _mm_aeskeygenassist_si128(__m128i , const int );







extern __m128i _mm_clmulepi64_si128(__m128i , __m128i ,
                                            const int );



}; 
#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"

#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
#line 91 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
#line 92 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\wmmintrin.h"
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"


extern "C" {
#line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"




typedef union __declspec(intrin_type) __declspec(align(32)) __m256 {
    float m256_f32[8];
} __m256;

typedef struct __declspec(intrin_type) __declspec(align(32)) __m256d {
    double m256d_f64[4];
} __m256d;

typedef union  __declspec(intrin_type) __declspec(align(32)) __m256i {
    __int8              m256i_i8[32];
    __int16             m256i_i16[16];
    __int32             m256i_i32[8];
    __int64             m256i_i64[4];
    unsigned __int8     m256i_u8[32];
    unsigned __int16    m256i_u16[16];
    unsigned __int32    m256i_u32[8];
    unsigned __int64    m256i_u64[4];
} __m256i;



















































extern __m256d __cdecl _mm256_add_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_add_ps(__m256, __m256);












extern __m256d __cdecl _mm256_addsub_pd(__m256d, __m256d);












extern __m256 __cdecl _mm256_addsub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_and_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_and_ps(__m256, __m256);








extern __m256d __cdecl _mm256_andnot_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_andnot_ps(__m256, __m256);













extern __m256d __cdecl _mm256_blend_pd(__m256d, __m256d, const int);













extern __m256 __cdecl _mm256_blend_ps(__m256, __m256, const int);









extern __m256d __cdecl _mm256_blendv_pd(__m256d, __m256d, __m256d);









extern __m256 __cdecl _mm256_blendv_ps(__m256, __m256, __m256);








extern __m256d __cdecl _mm256_div_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_div_ps(__m256, __m256);














extern __m256 __cdecl _mm256_dp_ps(__m256, __m256, const int);








extern __m256d __cdecl _mm256_hadd_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_hadd_ps(__m256, __m256);








extern __m256d __cdecl _mm256_hsub_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_hsub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_max_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_max_ps(__m256, __m256);








extern __m256d __cdecl _mm256_min_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_min_ps(__m256, __m256);









extern __m256d __cdecl _mm256_mul_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_mul_ps(__m256, __m256);








extern __m256d __cdecl _mm256_or_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_or_ps(__m256, __m256);











extern __m256d __cdecl _mm256_shuffle_pd(__m256d, __m256d, const int);












extern __m256 __cdecl _mm256_shuffle_ps(__m256, __m256, const int);








extern __m256d __cdecl _mm256_sub_pd(__m256d, __m256d);









extern __m256 __cdecl _mm256_sub_ps(__m256, __m256);








extern __m256d __cdecl _mm256_xor_pd(__m256d, __m256d);








extern __m256 __cdecl _mm256_xor_ps(__m256, __m256);















extern __m128d __cdecl _mm_cmp_pd(__m128d, __m128d, const int);
extern __m256d __cdecl _mm256_cmp_pd(__m256d, __m256d, const int);















extern __m128 __cdecl _mm_cmp_ps(__m128, __m128, const int);
extern __m256 __cdecl _mm256_cmp_ps(__m256, __m256, const int);












extern __m128d __cdecl _mm_cmp_sd(__m128d, __m128d, const int);





extern int __cdecl _mm_comi_sd(__m128d, __m128d, const int);












extern __m128 __cdecl _mm_cmp_ss(__m128, __m128, const int);





extern int __cdecl _mm_comi_ss(__m128, __m128, const int);








extern __m256d __cdecl _mm256_cvtepi32_pd(__m128i);








extern __m256  __cdecl _mm256_cvtepi32_ps(__m256i);









extern __m128  __cdecl _mm256_cvtpd_ps(__m256d);








extern __m256i __cdecl _mm256_cvtps_epi32(__m256);









extern __m256d __cdecl _mm256_cvtps_pd(__m128);












extern __m128i __cdecl _mm256_cvttpd_epi32(__m256d);








extern __m128i __cdecl _mm256_cvtpd_epi32(__m256d);












extern __m256i __cdecl _mm256_cvttps_epi32(__m256);







extern __m128  __cdecl _mm256_extractf128_ps(__m256, const int);
extern __m128d __cdecl _mm256_extractf128_pd(__m256d, const int);
extern __m128i __cdecl _mm256_extractf128_si256(__m256i, const int);






extern void __cdecl _mm256_zeroall(void);







extern void __cdecl _mm256_zeroupper(void);









extern __m256  __cdecl _mm256_permutevar_ps(__m256, __m256i);
extern __m128  __cdecl _mm_permutevar_ps(__m128, __m128i);









extern __m256  __cdecl _mm256_permute_ps(__m256, int);
extern __m128  __cdecl _mm_permute_ps(__m128, int);









extern __m256d __cdecl _mm256_permutevar_pd(__m256d, __m256i);
extern __m128d __cdecl _mm_permutevar_pd(__m128d, __m128i);









extern __m256d __cdecl _mm256_permute_pd(__m256d, int);
extern __m128d __cdecl _mm_permute_pd(__m128d, int);








extern __m256  __cdecl _mm256_permute2f128_ps(__m256, __m256, int);
extern __m256d __cdecl _mm256_permute2f128_pd(__m256d, __m256d, int);
extern __m256i __cdecl _mm256_permute2f128_si256(__m256i, __m256i, int);








extern __m256  __cdecl _mm256_broadcast_ss(float const *);
extern __m128  __cdecl _mm_broadcast_ss(float const *);







extern __m256d __cdecl _mm256_broadcast_sd(double const *);







extern __m256  __cdecl _mm256_broadcast_ps(__m128 const *);
extern __m256d __cdecl _mm256_broadcast_pd(__m128d const *);









extern __m256  __cdecl _mm256_insertf128_ps(__m256, __m128, int);
extern __m256d __cdecl _mm256_insertf128_pd(__m256d, __m128d, int);
extern __m256i __cdecl _mm256_insertf128_si256(__m256i, __m128i, int);








extern __m256d __cdecl _mm256_load_pd(double const *);
extern void    __cdecl _mm256_store_pd(double *, __m256d);








extern __m256  __cdecl _mm256_load_ps(float const *);
extern void    __cdecl _mm256_store_ps(float *, __m256);








extern __m256d __cdecl _mm256_loadu_pd(double const *);
extern void    __cdecl _mm256_storeu_pd(double *, __m256d);








extern __m256  __cdecl _mm256_loadu_ps(float const *);
extern void    __cdecl _mm256_storeu_ps(float *, __m256);








extern __m256i __cdecl _mm256_load_si256(__m256i const *);
extern void    __cdecl _mm256_store_si256(__m256i *, __m256i);








extern __m256i __cdecl _mm256_loadu_si256(__m256i const *);
extern void    __cdecl _mm256_storeu_si256(__m256i *, __m256i);







































































extern __m256d __cdecl _mm256_maskload_pd(double const *, __m256i);
extern void    __cdecl _mm256_maskstore_pd(double *, __m256i, __m256d);
extern __m128d __cdecl _mm_maskload_pd(double const *, __m128i);
extern void    __cdecl _mm_maskstore_pd(double *, __m128i, __m128d);



















extern __m256  __cdecl _mm256_maskload_ps(float const *, __m256i);
extern void    __cdecl _mm256_maskstore_ps(float *, __m256i, __m256);
extern __m128  __cdecl _mm_maskload_ps(float const *, __m128i);
extern void    __cdecl _mm_maskstore_ps(float *, __m128i, __m128);







extern __m256  __cdecl _mm256_movehdup_ps(__m256);







extern __m256  __cdecl _mm256_moveldup_ps(__m256);







extern __m256d __cdecl _mm256_movedup_pd(__m256d);









extern __m256i __cdecl _mm256_lddqu_si256(__m256i const *);







extern void    __cdecl _mm256_stream_si256(__m256i *, __m256i);








extern void    __cdecl _mm256_stream_pd(double *, __m256d);








extern void    __cdecl _mm256_stream_ps(float *, __m256);









extern __m256  __cdecl _mm256_rcp_ps(__m256);










extern __m256  __cdecl _mm256_rsqrt_ps(__m256);








extern __m256d __cdecl _mm256_sqrt_pd(__m256d);








extern __m256  __cdecl _mm256_sqrt_ps(__m256);












extern __m256d __cdecl _mm256_round_pd(__m256d, int);














extern __m256  __cdecl _mm256_round_ps(__m256, int);









extern __m256d __cdecl _mm256_unpackhi_pd(__m256d, __m256d);







extern __m256  __cdecl _mm256_unpackhi_ps(__m256, __m256);







extern __m256d __cdecl _mm256_unpacklo_pd(__m256d, __m256d);







extern __m256  __cdecl _mm256_unpacklo_ps(__m256, __m256);









extern int     __cdecl _mm256_testz_si256(__m256i, __m256i);



extern int     __cdecl _mm256_testc_si256(__m256i, __m256i);



extern int     __cdecl _mm256_testnzc_si256(__m256i, __m256i);














extern int     __cdecl _mm256_testz_pd(__m256d, __m256d);
extern int     __cdecl _mm256_testc_pd(__m256d, __m256d);
extern int     __cdecl _mm256_testnzc_pd(__m256d, __m256d);
extern int     __cdecl _mm_testz_pd(__m128d, __m128d);
extern int     __cdecl _mm_testc_pd(__m128d, __m128d);
extern int     __cdecl _mm_testnzc_pd(__m128d, __m128d);












extern int     __cdecl _mm256_testz_ps(__m256, __m256);
extern int     __cdecl _mm256_testc_ps(__m256, __m256);
extern int     __cdecl _mm256_testnzc_ps(__m256, __m256);
extern int     __cdecl _mm_testz_ps(__m128, __m128);
extern int     __cdecl _mm_testc_ps(__m128, __m128);
extern int     __cdecl _mm_testnzc_ps(__m128, __m128);








extern int     __cdecl _mm256_movemask_pd(__m256d);








extern int     __cdecl _mm256_movemask_ps(__m256);




extern __m256d __cdecl _mm256_setzero_pd(void);
extern __m256  __cdecl _mm256_setzero_ps(void);
extern __m256i __cdecl _mm256_setzero_si256(void);




extern __m256d __cdecl _mm256_set_pd(double, double, double, double);
extern __m256  __cdecl _mm256_set_ps(float, float, float, float,
                                            float, float, float, float);
extern __m256i __cdecl _mm256_set_epi8(char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char,
                                              char, char, char, char);
extern __m256i __cdecl _mm256_set_epi16(short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short,
                                               short, short, short, short);
extern __m256i __cdecl _mm256_set_epi32(int, int, int, int,
                                               int, int, int, int);
extern __m256i __cdecl _mm256_set_epi64x(__int64, __int64,
                                                __int64, __int64);










extern __m256d __cdecl _mm256_setr_pd(double, double, double, double);
extern __m256  __cdecl _mm256_setr_ps(float, float, float, float,
                                             float, float, float, float);
extern __m256i __cdecl _mm256_setr_epi8(char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char,
                                               char, char, char, char);
extern __m256i __cdecl _mm256_setr_epi16(short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short,
                                                short, short, short, short);
extern __m256i __cdecl _mm256_setr_epi32(int, int, int, int,
                                                int, int, int, int);
extern __m256i __cdecl _mm256_setr_epi64x(__int64, __int64,
                                                 __int64, __int64);







extern __m256d __cdecl _mm256_set1_pd(double);
extern __m256  __cdecl _mm256_set1_ps(float);
extern __m256i __cdecl _mm256_set1_epi8(char);
extern __m256i __cdecl _mm256_set1_epi16(short);
extern __m256i __cdecl _mm256_set1_epi32(int);
extern __m256i __cdecl _mm256_set1_epi64x(long long);







extern __m256  __cdecl _mm256_castpd_ps(__m256d);
extern __m256d __cdecl _mm256_castps_pd(__m256);
extern __m256i __cdecl _mm256_castps_si256(__m256);
extern __m256i __cdecl _mm256_castpd_si256(__m256d);
extern __m256  __cdecl _mm256_castsi256_ps(__m256i);
extern __m256d __cdecl _mm256_castsi256_pd(__m256i);
extern __m128  __cdecl _mm256_castps256_ps128(__m256);
extern __m128d __cdecl _mm256_castpd256_pd128(__m256d);
extern __m128i __cdecl _mm256_castsi256_si128(__m256i);
extern __m256  __cdecl _mm256_castps128_ps256(__m128);
extern __m256d __cdecl _mm256_castpd128_pd256(__m128d);
extern __m256i __cdecl _mm256_castsi128_si256(__m128i);






extern __m128  __cdecl _mm_cvtph_ps(__m128i);
extern __m256  __cdecl _mm256_cvtph_ps(__m128i);
extern __m128i __cdecl _mm_cvtps_ph(__m128 , const int );
extern __m128i __cdecl _mm256_cvtps_ph(__m256, int);




















extern unsigned __int64 __cdecl _xgetbv(unsigned int);


extern void __cdecl _xsetbv(unsigned int, unsigned __int64);






extern void __cdecl _xsave(void *, unsigned __int64);

extern void __cdecl _xsave64(void *, unsigned __int64);
#line 1233 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"






extern void __cdecl _xsaveopt(void *, unsigned __int64);

extern void __cdecl _xsaveopt64(void *, unsigned __int64);
#line 1243 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"





extern void __cdecl _xsavec(void *, unsigned __int64);

extern void __cdecl _xsavec64(void *, unsigned __int64);
#line 1252 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"






extern void __cdecl _xrstor(void const *, unsigned __int64);

extern void __cdecl _xrstor64(void const *, unsigned __int64);
#line 1262 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"






extern void __cdecl _xsaves(void *, unsigned __int64);

extern void __cdecl _xsaves64(void *, unsigned __int64);
#line 1272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"






extern void __cdecl _xrstors(void const *, unsigned __int64);

extern void __cdecl _xrstors64(void const *, unsigned __int64);
#line 1282 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"





extern void __cdecl _fxsave(void *);

extern void __cdecl _fxsave64(void *);
#line 1291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"





extern void __cdecl _fxrstor(void const *);

extern void __cdecl _fxrstor64(void const *);
#line 1300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"







extern int __cdecl _rdrand16_step(unsigned short *);
extern int __cdecl _rdrand32_step(unsigned int *);

extern int __cdecl _rdrand64_step(unsigned __int64 *);
#line 1312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"





extern unsigned int     __cdecl _readfsbase_u32();
extern unsigned int     __cdecl _readgsbase_u32();
extern unsigned __int64 __cdecl _readfsbase_u64();
extern unsigned __int64 __cdecl _readgsbase_u64();




extern void __cdecl _writefsbase_u32(unsigned int);
extern void __cdecl _writegsbase_u32(unsigned int);
extern void __cdecl _writefsbase_u64(unsigned __int64);
extern void __cdecl _writegsbase_u64(unsigned __int64);
#line 1330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"




extern __m128  __cdecl _mm_fmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmadd_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsub_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmadd_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmadd_sd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fnmsub_ss(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fnmsub_sd(__m128d, __m128d, __m128d);

extern __m256  __cdecl _mm256_fmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmadd_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsub_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fnmadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmadd_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fnmsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fnmsub_pd(__m256d, __m256d, __m256d);





extern __m128  __cdecl _mm_fmaddsub_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmaddsub_pd(__m128d, __m128d, __m128d);
extern __m128  __cdecl _mm_fmsubadd_ps(__m128, __m128, __m128);
extern __m128d __cdecl _mm_fmsubadd_pd(__m128d, __m128d, __m128d);

extern __m256  __cdecl _mm256_fmaddsub_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmaddsub_pd(__m256d, __m256d, __m256d);
extern __m256  __cdecl _mm256_fmsubadd_ps(__m256, __m256, __m256);
extern __m256d __cdecl _mm256_fmsubadd_pd(__m256d, __m256d, __m256d);





extern __m256i __cdecl _mm256_cmpeq_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpeq_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_cmpgt_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_cmpgt_epi64(__m256i, __m256i);





extern __m256i __cdecl _mm256_max_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_max_epu32(__m256i, __m256i);

extern __m256i __cdecl _mm256_min_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu16(__m256i, __m256i);
extern __m256i __cdecl _mm256_min_epu32(__m256i, __m256i);





extern __m256i __cdecl _mm256_and_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_andnot_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_or_si256(__m256i, __m256i);
extern __m256i __cdecl _mm256_xor_si256(__m256i, __m256i);





extern __m256i __cdecl _mm256_abs_epi8(__m256i);
extern __m256i __cdecl _mm256_abs_epi16(__m256i);
extern __m256i __cdecl _mm256_abs_epi32(__m256i);

extern __m256i __cdecl _mm256_add_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_add_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_adds_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_adds_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sub_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sub_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_subs_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_subs_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_avg_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_avg_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hadd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadd_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hadds_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_hsub_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsub_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_hsubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_madd_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_maddubs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mulhi_epu16(__m256i, __m256i);

extern __m256i __cdecl _mm256_mullo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_mullo_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mul_epu32(__m256i, __m256i);
extern __m256i __cdecl _mm256_mul_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_sign_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_sign_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_mulhrs_epi16(__m256i, __m256i);

extern __m256i __cdecl _mm256_sad_epu8(__m256i, __m256i);
extern __m256i __cdecl _mm256_mpsadbw_epu8(__m256i, __m256i, const int);





extern __m256i __cdecl _mm256_slli_si256(__m256i, const int);

extern __m256i __cdecl _mm256_srli_si256(__m256i, const int);


extern __m256i __cdecl _mm256_sll_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_sll_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_slli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_slli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_sllv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_sllv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_sllv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_sllv_epi64(__m128i, __m128i);

extern __m256i __cdecl _mm256_sra_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_sra_epi32(__m256i, __m128i);

extern __m256i __cdecl _mm256_srai_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srai_epi32(__m256i, int);

extern __m256i __cdecl _mm256_srav_epi32(__m256i, __m256i);

extern __m128i __cdecl _mm_srav_epi32(__m128i, __m128i);

extern __m256i __cdecl _mm256_srl_epi16(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi32(__m256i, __m128i);
extern __m256i __cdecl _mm256_srl_epi64(__m256i, __m128i);

extern __m256i __cdecl _mm256_srli_epi16(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi32(__m256i, int);
extern __m256i __cdecl _mm256_srli_epi64(__m256i, int);

extern __m256i __cdecl _mm256_srlv_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_srlv_epi64(__m256i, __m256i);

extern __m128i __cdecl _mm_srlv_epi32(__m128i, __m128i);
extern __m128i __cdecl _mm_srlv_epi64(__m128i, __m128i);





extern __m128i __cdecl _mm_blend_epi32(__m128i, __m128i, const int);

extern __m256i __cdecl _mm256_blend_epi32(__m256i,__m256i, const int);

extern __m256i __cdecl _mm256_alignr_epi8(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_blendv_epi8(__m256i, __m256i, __m256i);
extern __m256i __cdecl _mm256_blend_epi16(__m256i, __m256i, const int);

extern __m256i __cdecl _mm256_packs_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packs_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_packus_epi32(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpackhi_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpackhi_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_unpacklo_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi16(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi32(__m256i, __m256i);
extern __m256i __cdecl _mm256_unpacklo_epi64(__m256i, __m256i);

extern __m256i __cdecl _mm256_shuffle_epi8(__m256i, __m256i);
extern __m256i __cdecl _mm256_shuffle_epi32(__m256i, const int);

extern __m256i __cdecl _mm256_shufflehi_epi16(__m256i, const int);
extern __m256i __cdecl _mm256_shufflelo_epi16(__m256i, const int);

extern __m128i __cdecl _mm256_extracti128_si256(__m256i, const int);
extern __m256i __cdecl _mm256_inserti128_si256(__m256i, __m128i, const int);





extern __m128  __cdecl _mm_broadcastss_ps(__m128);
extern __m128d __cdecl _mm_broadcastsd_pd(__m128d);

extern __m128i __cdecl _mm_broadcastb_epi8(__m128i);
extern __m128i __cdecl _mm_broadcastw_epi16(__m128i);
extern __m128i __cdecl _mm_broadcastd_epi32(__m128i);
extern __m128i __cdecl _mm_broadcastq_epi64(__m128i);

extern __m256  __cdecl _mm256_broadcastss_ps(__m128);
extern __m256d __cdecl _mm256_broadcastsd_pd(__m128d);

extern __m256i __cdecl _mm256_broadcastb_epi8(__m128i);
extern __m256i __cdecl _mm256_broadcastw_epi16(__m128i);
extern __m256i __cdecl _mm256_broadcastd_epi32(__m128i);
extern __m256i __cdecl _mm256_broadcastq_epi64(__m128i);

extern __m256i __cdecl _mm256_broadcastsi128_si256(__m128i);






extern __m256i __cdecl _mm256_cvtepi8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepi16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepi32_epi64(__m128i);

extern __m256i __cdecl _mm256_cvtepu8_epi16(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu8_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi32(__m128i);
extern __m256i __cdecl _mm256_cvtepu16_epi64(__m128i);
extern __m256i __cdecl _mm256_cvtepu32_epi64(__m128i);






extern int __cdecl _mm256_movemask_epi8(__m256i);





extern __m128i __cdecl _mm_maskload_epi32(int const * ,
                                          __m128i     );
extern __m128i __cdecl _mm_maskload_epi64(__int64 const * ,
                                          __m128i         );

extern void __cdecl _mm_maskstore_epi32(int *   ,
                                        __m128i ,
                                        __m128i );
extern void __cdecl _mm_maskstore_epi64(__int64 * ,
                                        __m128i   ,
                                        __m128i   );

extern __m256i __cdecl _mm256_maskload_epi32(int const * ,
                                             __m256i     );
extern __m256i __cdecl _mm256_maskload_epi64(__int64 const * ,
                                             __m256i         );

extern void __cdecl _mm256_maskstore_epi32(int *   ,
                                           __m256i ,
                                           __m256i );
extern void __cdecl _mm256_maskstore_epi64(__int64 * ,
                                           __m256i   ,
                                           __m256i   );





extern __m256i __cdecl _mm256_permutevar8x32_epi32(__m256i, __m256i);
extern __m256  __cdecl _mm256_permutevar8x32_ps(__m256, __m256i);

extern __m256i __cdecl _mm256_permute4x64_epi64(__m256i, const int);
extern __m256d __cdecl _mm256_permute4x64_pd(__m256d, const int);

extern __m256i __cdecl _mm256_permute2x128_si256(__m256i, __m256i, const int);





extern __m256i  __cdecl _mm256_stream_load_si256(__m256i const *);






extern __m256d __cdecl _mm256_mask_i32gather_pd(__m256d        ,
                                                double const * ,
                                                __m128i        ,
                                                __m256d        ,
                                                const int      );
extern __m256  __cdecl _mm256_mask_i32gather_ps(__m256         ,
                                                float const *  ,
                                                __m256i        ,
                                                __m256         ,
                                                const int      );
extern __m256d __cdecl _mm256_mask_i64gather_pd(__m256d        ,
                                                double const * ,
                                                __m256i        ,
                                                __m256d        ,
                                                const int      );
extern __m128  __cdecl _mm256_mask_i64gather_ps(__m128         ,
                                                float const *  ,
                                                __m256i        ,
                                                __m128         ,
                                                const int      );

extern __m128d __cdecl _mm_mask_i32gather_pd(__m128d        ,
                                             double const * ,
                                             __m128i        ,
                                             __m128d        ,
                                             const int      );
extern __m128  __cdecl _mm_mask_i32gather_ps(__m128         ,
                                             float const *  ,
                                             __m128i        ,
                                             __m128         ,
                                             const int      );
extern __m128d __cdecl _mm_mask_i64gather_pd(__m128d        ,
                                             double const * ,
                                             __m128i        ,
                                             __m128d        ,
                                             const int      );
extern __m128  __cdecl _mm_mask_i64gather_ps(__m128         ,
                                             float const *  ,
                                             __m128i        ,
                                             __m128         ,
                                             const int      );


extern __m256i __cdecl _mm256_mask_i32gather_epi32(__m256i     ,
                                                   int const * ,
                                                   __m256i     ,
                                                   __m256i     ,
                                                   const int   );
extern __m256i __cdecl _mm256_mask_i32gather_epi64(__m256i     ,
                                                   __int64 const * ,
                                                   __m128i     ,
                                                   __m256i     ,
                                                   const int   );
extern __m128i __cdecl _mm256_mask_i64gather_epi32(__m128i     ,
                                                   int     const * ,
                                                   __m256i     ,
                                                   __m128i     ,
                                                   const int   );
extern __m256i __cdecl _mm256_mask_i64gather_epi64(__m256i     ,
                                                   __int64 const * ,
                                                   __m256i     ,
                                                   __m256i     ,
                                                   const int   );

extern __m128i __cdecl _mm_mask_i32gather_epi32(__m128i         ,
                                                int const *     ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i32gather_epi64(__m128i         ,
                                                __int64 const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i64gather_epi32(__m128i         ,
                                                int     const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );
extern __m128i __cdecl _mm_mask_i64gather_epi64(__m128i         ,
                                                __int64 const * ,
                                                __m128i         ,
                                                __m128i         ,
                                                const int       );





extern __m256d __cdecl _mm256_i32gather_pd(double const * ,
                                           __m128i        ,
                                           const int      );
extern __m256  __cdecl _mm256_i32gather_ps(float  const * ,
                                           __m256i        ,
                                           const int      );
extern __m256d __cdecl _mm256_i64gather_pd(double const * ,
                                           __m256i        ,
                                           const int      );
extern __m128  __cdecl _mm256_i64gather_ps(float  const * ,
                                           __m256i        ,
                                           const int      );

extern __m128d __cdecl _mm_i32gather_pd(double const * ,
                                        __m128i        ,
                                        const int      );
extern __m128  __cdecl _mm_i32gather_ps(float  const * ,
                                        __m128i        ,
                                        const int      );
extern __m128d __cdecl _mm_i64gather_pd(double const * ,
                                        __m128i        ,
                                        const int      );
extern __m128  __cdecl _mm_i64gather_ps(float  const * ,
                                        __m128i        ,
                                        const int      );

extern __m256i __cdecl _mm256_i32gather_epi32(int const *     ,
                                              __m256i         ,
                                              const int       );
extern __m256i __cdecl _mm256_i32gather_epi64(__int64 const * ,
                                              __m128i         ,
                                              const int       );
extern __m128i __cdecl _mm256_i64gather_epi32(int const *     ,
                                              __m256i         ,
                                              const int       );
extern __m256i __cdecl _mm256_i64gather_epi64(__int64 const * ,
                                              __m256i         ,
                                              const int       );

extern __m128i __cdecl _mm_i32gather_epi32(int const *     ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i32gather_epi64(__int64 const * ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i64gather_epi32(int     const * ,
                                           __m128i         ,
                                           const int       );
extern __m128i __cdecl _mm_i64gather_epi64(__int64 const * ,
                                           __m128i         ,
                                           const int       );







extern unsigned int     _bextr_u32(unsigned int ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned int     _blsi_u32(unsigned int);
extern unsigned int     _blsmsk_u32(unsigned int);
extern unsigned int     _blsr_u32(unsigned int);
extern unsigned int     _bzhi_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _mulx_u32(unsigned int ,
                                  unsigned int ,
                                  unsigned int * );
extern unsigned int     _pdep_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _pext_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _rorx_u32(unsigned int ,
                                  const unsigned int );
extern int              _sarx_i32(int ,
                                  unsigned int );
extern unsigned int     _shlx_u32(unsigned int ,
                                  unsigned int );
extern unsigned int     _shrx_u32(unsigned int ,
                                          unsigned int );


extern unsigned __int64 _bextr_u64(unsigned __int64 ,
                                   unsigned int ,
                                   unsigned int );
extern unsigned __int64 _blsi_u64(unsigned __int64);
extern unsigned __int64 _blsmsk_u64(unsigned __int64);
extern unsigned __int64 _blsr_u64(unsigned __int64);
extern unsigned __int64 _bzhi_u64(unsigned __int64 ,
                                  unsigned int );
extern unsigned __int64 _mulx_u64(unsigned __int64 ,
                                  unsigned __int64 ,
                                  unsigned __int64 * );
extern unsigned __int64 _pdep_u64(unsigned __int64 ,
                                  unsigned __int64 );
extern unsigned __int64 _pext_u64(unsigned __int64 ,
                                  unsigned __int64 );
extern unsigned __int64 _rorx_u64(unsigned __int64 ,
                                  const unsigned int );
extern __int64          _sarx_i64(__int64 ,
                                  unsigned int );
extern unsigned __int64 _shlx_u64(unsigned __int64 ,
                                  unsigned int );
extern unsigned __int64 _shrx_u64(unsigned __int64 ,
                                          unsigned int );
#line 1854 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"








extern unsigned int     _lzcnt_u32(unsigned int);

extern unsigned __int64 _lzcnt_u64(unsigned __int64);
#line 1866 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"








extern unsigned int     _tzcnt_u32(unsigned int);

extern unsigned __int64 _tzcnt_u64(unsigned __int64);
#line 1878 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"






extern void __cdecl _invpcid(unsigned int , void * );


extern void _Store_HLERelease(long volatile *,long);
extern void _StorePointer_HLERelease(void * volatile *,void *);

extern long _InterlockedExchange_HLEAcquire(long volatile *,long);
extern long _InterlockedExchange_HLERelease(long volatile *,long);
extern void * _InterlockedExchangePointer_HLEAcquire(void *volatile *,void *);
extern void * _InterlockedExchangePointer_HLERelease(void *volatile *,void *);

extern long _InterlockedCompareExchange_HLEAcquire(long volatile *,long,long);
extern long _InterlockedCompareExchange_HLERelease(long volatile *,long,long);
extern __int64 _InterlockedCompareExchange64_HLEAcquire(__int64 volatile *,__int64,__int64);
extern __int64 _InterlockedCompareExchange64_HLERelease(__int64 volatile *,__int64,__int64);
extern void * _InterlockedCompareExchangePointer_HLEAcquire(void *volatile *,void *,void *);
extern void * _InterlockedCompareExchangePointer_HLERelease(void *volatile *,void *,void *);

extern long _InterlockedExchangeAdd_HLEAcquire(long volatile *,long);
extern long _InterlockedExchangeAdd_HLERelease(long volatile *,long);

extern long _InterlockedAnd_HLEAcquire(long volatile *,long);
extern long _InterlockedAnd_HLERelease(long volatile *,long);
extern long _InterlockedOr_HLEAcquire(long volatile *,long);
extern long _InterlockedOr_HLERelease(long volatile *,long);
extern long _InterlockedXor_HLEAcquire(long volatile *,long);
extern long _InterlockedXor_HLERelease(long volatile *,long);

extern unsigned char _interlockedbittestandset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandset_HLERelease(long *,long);
extern unsigned char _interlockedbittestandreset_HLEAcquire(long *,long);
extern unsigned char _interlockedbittestandreset_HLERelease(long *,long);


extern void _Store64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedExchange64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedExchange64_HLERelease(__int64 volatile *,__int64);

extern __int64 _InterlockedExchangeAdd64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedExchangeAdd64_HLERelease(__int64 volatile *,__int64);

extern __int64 _InterlockedAnd64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedAnd64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedOr64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedOr64_HLERelease(__int64 volatile *,__int64);
extern __int64 _InterlockedXor64_HLEAcquire(__int64 volatile *,__int64);
extern __int64 _InterlockedXor64_HLERelease(__int64 volatile *,__int64);

extern unsigned char _interlockedbittestandset64_HLEAcquire(__int64 *,__int64);
extern unsigned char _interlockedbittestandset64_HLERelease(__int64 *,__int64);
extern unsigned char _interlockedbittestandreset64_HLEAcquire(__int64 *,__int64);
extern unsigned char _interlockedbittestandreset64_HLERelease(__int64 *,__int64);
#line 1937 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"











extern unsigned int     __cdecl _xbegin(void);
extern void             __cdecl _xend(void);
extern void             __cdecl _xabort(const unsigned int);
extern unsigned char    __cdecl _xtest(void);








extern int __cdecl _rdseed16_step(unsigned short *);
extern int __cdecl _rdseed32_step(unsigned int *);

extern int __cdecl _rdseed64_step(unsigned __int64 *);
#line 1965 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"










extern unsigned char __cdecl _addcarryx_u32(unsigned char ,
                                                   unsigned int ,
                                                   unsigned int ,
                                                   unsigned int * );



extern unsigned char __cdecl _addcarryx_u64(unsigned char ,
                                                   unsigned __int64 ,
                                                   unsigned __int64 ,
                                                   unsigned __int64 * );
#line 1987 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"





extern unsigned short   __cdecl _load_be_u16(void const*);
extern unsigned int     __cdecl _load_be_u32(void const*);
extern unsigned __int64 __cdecl _load_be_u64(void const*);







extern void __cdecl _store_be_u16(void *, unsigned short);
extern void __cdecl _store_be_u32(void *, unsigned int);
extern void __cdecl _store_be_u64(void *, unsigned __int64);







extern __m128i __cdecl _mm_sha1msg1_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1msg2_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1nexte_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha1rnds4_epu32(__m128i, __m128i, const int);

extern __m128i __cdecl _mm_sha256msg1_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha256msg2_epu32(__m128i, __m128i);
extern __m128i __cdecl _mm_sha256rnds2_epu32(__m128i, __m128i, __m128i);




extern void * __cdecl _bnd_set_ptr_bounds(const void *, size_t);
extern void * __cdecl _bnd_narrow_ptr_bounds(const void *, const void *, size_t);
extern void * __cdecl _bnd_copy_ptr_bounds(const void *, const void *);
extern void * __cdecl _bnd_init_ptr_bounds(const void *);
extern void __cdecl _bnd_store_ptr_bounds(const void **, const void *);
extern void __cdecl _bnd_chk_ptr_lbounds(const void *);
extern void __cdecl _bnd_chk_ptr_ubounds(const void *);
extern void __cdecl _bnd_chk_ptr_bounds(const void *, size_t);
extern void * __cdecl _bnd_load_ptr_bounds(const void **, const void *);
extern const void * __cdecl _bnd_get_ptr_lbound(const void *);
extern const void * __cdecl _bnd_get_ptr_ubound(const void *);


}; 
#line 2039 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"

#line 2041 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
#line 2042 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"
#line 2043 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\immintrin.h"

#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
        #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"












#pragma once



#line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"







#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"



#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"


extern "C" { 
#line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"





























































































__m128 _mm_macc_ps(__m128, __m128, __m128);
__m128d _mm_macc_pd(__m128d, __m128d, __m128d);
__m128 _mm_macc_ss(__m128, __m128, __m128);
__m128d _mm_macc_sd(__m128d, __m128d, __m128d);
__m128 _mm_maddsub_ps(__m128, __m128, __m128);
__m128d _mm_maddsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msubadd_ps(__m128, __m128, __m128);
__m128d _mm_msubadd_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ps(__m128, __m128, __m128);
__m128d _mm_msub_pd(__m128d, __m128d, __m128d);
__m128 _mm_msub_ss(__m128, __m128, __m128);
__m128d _mm_msub_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ps(__m128, __m128, __m128);
__m128d _mm_nmacc_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmacc_ss(__m128, __m128, __m128);
__m128d _mm_nmacc_sd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ps(__m128, __m128, __m128);
__m128d _mm_nmsub_pd(__m128d, __m128d, __m128d);
__m128 _mm_nmsub_ss(__m128, __m128, __m128);
__m128d _mm_nmsub_sd(__m128d, __m128d, __m128d);


__m128i _mm_maccs_epi16(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maccs_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macc_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccslo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macclo_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maccshi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_macchi_epi32(__m128i, __m128i, __m128i);
__m128i _mm_maddsd_epi16(__m128i, __m128i, __m128i);
__m128i _mm_maddd_epi16(__m128i, __m128i, __m128i);


__m128i _mm_haddw_epi8(__m128i);
__m128i _mm_haddd_epi8(__m128i);
__m128i _mm_haddq_epi8(__m128i);
__m128i _mm_haddd_epi16(__m128i);
__m128i _mm_haddq_epi16(__m128i);
__m128i _mm_haddq_epi32(__m128i);
__m128i _mm_haddw_epu8(__m128i);
__m128i _mm_haddd_epu8(__m128i);
__m128i _mm_haddq_epu8(__m128i);
__m128i _mm_haddd_epu16(__m128i);
__m128i _mm_haddq_epu16(__m128i);
__m128i _mm_haddq_epu32(__m128i);
__m128i _mm_hsubw_epi8(__m128i);
__m128i _mm_hsubd_epi16(__m128i);
__m128i _mm_hsubq_epi32(__m128i);


__m128i _mm_cmov_si128(__m128i, __m128i, __m128i);
__m128i _mm_perm_epi8(__m128i, __m128i, __m128i);


__m128i _mm_rot_epi8(__m128i, __m128i);
__m128i _mm_rot_epi16(__m128i, __m128i);
__m128i _mm_rot_epi32(__m128i, __m128i);
__m128i _mm_rot_epi64(__m128i, __m128i);
__m128i _mm_roti_epi8(__m128i, int);
__m128i _mm_roti_epi16(__m128i, int);
__m128i _mm_roti_epi32(__m128i, int);
__m128i _mm_roti_epi64(__m128i, int);
__m128i _mm_shl_epi8(__m128i, __m128i);
__m128i _mm_shl_epi16(__m128i, __m128i);
__m128i _mm_shl_epi32(__m128i, __m128i);
__m128i _mm_shl_epi64(__m128i, __m128i);
__m128i _mm_sha_epi8(__m128i, __m128i);
__m128i _mm_sha_epi16(__m128i, __m128i);
__m128i _mm_sha_epi32(__m128i, __m128i);
__m128i _mm_sha_epi64(__m128i, __m128i);



__m128i _mm_com_epu8(__m128i, __m128i, int);
__m128i _mm_com_epu16(__m128i, __m128i, int);
__m128i _mm_com_epu32(__m128i, __m128i, int);
__m128i _mm_com_epu64(__m128i, __m128i, int);
__m128i _mm_com_epi8(__m128i, __m128i, int);
__m128i _mm_com_epi16(__m128i, __m128i, int);
__m128i _mm_com_epi32(__m128i, __m128i, int);
__m128i _mm_com_epi64(__m128i, __m128i, int);



__m128 _mm_frcz_ps(__m128);
__m128d _mm_frcz_pd(__m128d);
__m128 _mm_frcz_ss(__m128, __m128);
__m128d _mm_frcz_sd(__m128d, __m128d);








__m128 _mm_permute2_ps(__m128, __m128, __m128i, int);
__m128d _mm_permute2_pd(__m128d, __m128d, __m128i, int);



__m256 _mm256_macc_ps(__m256, __m256, __m256);
__m256d _mm256_macc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_maddsub_ps(__m256, __m256, __m256);
__m256d _mm256_maddsub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msubadd_ps(__m256, __m256, __m256);
__m256d _mm256_msubadd_pd(__m256d, __m256d, __m256d);
__m256 _mm256_msub_ps(__m256, __m256, __m256);
__m256d _mm256_msub_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmacc_ps(__m256, __m256, __m256);
__m256d _mm256_nmacc_pd(__m256d, __m256d, __m256d);
__m256 _mm256_nmsub_ps(__m256, __m256, __m256);
__m256d _mm256_nmsub_pd(__m256d, __m256d, __m256d);
__m256i _mm256_cmov_si256(__m256i, __m256i, __m256i);
__m256 _mm256_frcz_ps(__m256);
__m256d _mm256_frcz_pd(__m256d);
__m256 _mm256_permute2_ps(__m256, __m256, __m256i, int);
__m256d _mm256_permute2_pd(__m256d, __m256d, __m256i, int);


void __llwpcb(void *);
void *__slwpcb();
void __lwpval32(unsigned int, unsigned int, unsigned int);
unsigned char __lwpins32(unsigned int, unsigned int, unsigned int);

void __lwpval64(unsigned __int64, unsigned int, unsigned int);
unsigned char __lwpins64(unsigned __int64, unsigned int, unsigned int);
#line 258 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"


unsigned int _bextr_u32(unsigned int, unsigned int, unsigned int);
unsigned int _andn_u32(unsigned int, unsigned int);
unsigned int _tzcnt_u32(unsigned int);
unsigned int _lzcnt_u32(unsigned int);
unsigned int _blsr_u32(unsigned int);
unsigned int _blsmsk_u32(unsigned int);
unsigned int _blsi_u32(unsigned int);

unsigned __int64 _bextr_u64(unsigned __int64, unsigned int, unsigned int);
unsigned __int64 _andn_u64(unsigned __int64, unsigned __int64);
unsigned __int64 _tzcnt_u64(unsigned __int64);
unsigned __int64 _lzcnt_u64(unsigned __int64);
unsigned __int64 _blsr_u64(unsigned __int64);
unsigned __int64 _blsmsk_u64(unsigned __int64);
unsigned __int64 _blsi_u64(unsigned __int64);
#line 276 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"


unsigned int _bextri_u32(unsigned int, unsigned int);
unsigned int _blcfill_u32(unsigned int);
unsigned int _blsfill_u32(unsigned int);
unsigned int _blcs_u32(unsigned int);
unsigned int _tzmsk_u32(unsigned int);
unsigned int _blcic_u32(unsigned int);
unsigned int _blsic_u32(unsigned int);
unsigned int _t1mskc_u32(unsigned int);
unsigned int _blcmsk_u32(unsigned int);
unsigned int _blci_u32(unsigned int);

unsigned __int64 _bextri_u64(unsigned __int64, unsigned int);
unsigned __int64 _blcfill_u64(unsigned __int64);
unsigned __int64 _blsfill_u64(unsigned __int64);
unsigned __int64 _blcs_u64(unsigned __int64);
unsigned __int64 _tzmsk_u64(unsigned __int64);
unsigned __int64 _blcic_u64(unsigned __int64);
unsigned __int64 _blsic_u64(unsigned __int64);
unsigned __int64 _t1mskc_u64(unsigned __int64);
unsigned __int64 _blcmsk_u64(unsigned __int64);
unsigned __int64 _blci_u64(unsigned __int64);
#line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"

void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);

void _mm_clzero(void const *);


}; 
#line 309 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"

#line 311 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
#line 312 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
#line 313 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ammintrin.h"
#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
    #line 27 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"

    

#line 31 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"

    


#line 36 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"

    


#line 41 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"


extern "C" {
#line 46 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"




























#line 75 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"


#line 78 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"






#line 85 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"




#line 90 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"




#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"




#line 100 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"






#line 107 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"




#line 112 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"




#line 117 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"




#line 122 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"




#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"


void * _AddressOfReturnAddress(void);
unsigned char _BitScanForward(unsigned long * _Index, unsigned long _Mask);
unsigned char _BitScanForward64(unsigned long * _Index, unsigned __int64 _Mask);

unsigned char _BitScanReverse(unsigned long * _Index, unsigned long _Mask);
unsigned char _BitScanReverse64(unsigned long * _Index, unsigned __int64 _Mask);
























long _InterlockedAnd(long volatile * _Value, long _Mask);
short _InterlockedAnd16(short volatile * _Value, short _Mask);


short _InterlockedAnd16_np(short volatile * _Value, short _Mask);

__int64 _InterlockedAnd64(__int64 volatile * _Value, __int64 _Mask);


__int64 _InterlockedAnd64_np(__int64 volatile * _Value, __int64 _Mask);

char _InterlockedAnd8(char volatile * _Value, char _Mask);


char _InterlockedAnd8_np(char volatile * _Value, char _Mask);



long _InterlockedAnd_np(long volatile * _Value, long _Mask);

long  _InterlockedCompareExchange(long volatile * _Destination, long _Exchange, long _Comparand);

unsigned char _InterlockedCompareExchange128(__int64 volatile * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult);


unsigned char _InterlockedCompareExchange128_np(__int64 volatile * _Destination, __int64 _ExchangeHigh, __int64 _ExchangeLow, __int64 * _ComparandResult);

short _InterlockedCompareExchange16(short volatile * _Destination, short _Exchange, short _Comparand);


short _InterlockedCompareExchange16_np(short volatile * _Destination, short _Exchange, short _Comparand);

__int64 _InterlockedCompareExchange64(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);


__int64 _InterlockedCompareExchange64_np(__int64 volatile * _Destination, __int64 _Exchange, __int64 _Comparand);

char _InterlockedCompareExchange8(char volatile * _Destination, char _Exchange, char _Comparand);



void * _InterlockedCompareExchangePointer(void * volatile * _Destination, void * _Exchange, void * _Comparand);


void * _InterlockedCompareExchangePointer_np(void * volatile * _Destination, void * _Exchange, void * _Comparand);



long _InterlockedCompareExchange_np(long volatile * _Destination, long _Exchange, long _Comparand);

long  _InterlockedDecrement(long volatile * _Addend);

short _InterlockedDecrement16(short volatile * _Addend);



__int64 _InterlockedDecrement64(__int64 volatile * _Addend);






long  _InterlockedExchange(long volatile * _Target, long _Value);

short _InterlockedExchange16(short volatile * _Target, short _Value);



__int64 _InterlockedExchange64(__int64 volatile * _Target, __int64 _Value);



char _InterlockedExchange8(char volatile * _Target, char _Value);



long  _InterlockedExchangeAdd(long volatile * _Addend, long _Value);
short _InterlockedExchangeAdd16(short volatile * _Addend, short _Value);



__int64 _InterlockedExchangeAdd64(__int64 volatile * _Addend, __int64 _Value);



char _InterlockedExchangeAdd8(char volatile * _Addend, char _Value);






void * _InterlockedExchangePointer(void * volatile * _Target, void * _Value);






long  _InterlockedIncrement(long volatile * _Addend);

short _InterlockedIncrement16(short volatile * _Addend);



__int64 _InterlockedIncrement64(__int64 volatile * _Addend);






long _InterlockedOr(long volatile * _Value, long _Mask);
short _InterlockedOr16(short volatile * _Value, short _Mask);


short _InterlockedOr16_np(short volatile * _Value, short _Mask);

__int64 _InterlockedOr64(__int64 volatile * _Value, __int64 _Mask);


__int64 _InterlockedOr64_np(__int64 volatile * _Value, __int64 _Mask);

char _InterlockedOr8(char volatile * _Value, char _Mask);


char _InterlockedOr8_np(char volatile * _Value, char _Mask);



long _InterlockedOr_np(long volatile * _Value, long _Mask);

long _InterlockedXor(long volatile * _Value, long _Mask);
short _InterlockedXor16(short volatile * _Value, short _Mask);


short _InterlockedXor16_np(short volatile * _Value, short _Mask);

__int64 _InterlockedXor64(__int64 volatile * _Value, __int64 _Mask);


__int64 _InterlockedXor64_np(__int64 volatile * _Value, __int64 _Mask);

char _InterlockedXor8(char volatile * _Value, char _Mask);


char _InterlockedXor8_np(char volatile * _Value, char _Mask);



long _InterlockedXor_np(long volatile * _Value, long _Mask);









void _ReadBarrier(void);






void _ReadWriteBarrier(void);
void * _ReturnAddress(void);

void _WriteBarrier(void);









void __addgsbyte(unsigned long, unsigned char);
void __addgsdword(unsigned long, unsigned long);
void __addgsqword(unsigned long, unsigned __int64);
void __addgsword(unsigned long, unsigned short);




void __code_seg(const char *);
void __cpuid(int[4], int);
void __cpuidex(int[4], int, int);
void __cdecl __debugbreak(void);

__int64 __emul(int, int);
unsigned __int64 __emulu(unsigned int, unsigned int);
__declspec(noreturn) void __fastfail(unsigned int);
void __faststorefence(void);
unsigned int __getcallerseflags(void);
void __halt(void);


unsigned char __inbyte(unsigned short);
void __inbytestring(unsigned short, unsigned char *, unsigned long);



void __incgsbyte(unsigned long);
void __incgsdword(unsigned long);
void __incgsqword(unsigned long);
void __incgsword(unsigned long);




unsigned long __indword(unsigned short);
void __indwordstring(unsigned short, unsigned long *, unsigned long);
void __int2c(void);
void __invlpg(void *);
unsigned short __inword(unsigned short);
void __inwordstring(unsigned short, unsigned short *, unsigned long);









void __lidt(void *);
unsigned __int64 __ll_lshift(unsigned __int64, int);
__int64 __ll_rshift(__int64, int);
unsigned int __lzcnt(unsigned int);
unsigned short __lzcnt16(unsigned short);
unsigned __int64 __lzcnt64(unsigned __int64);
void __movsb(unsigned char *, unsigned char const *, size_t);
void __movsd(unsigned long *, unsigned long const *, size_t);
void __movsq(unsigned long long *, unsigned long long const *, size_t);
void __movsw(unsigned short *, unsigned short const *, size_t);
__int64 __mulh(__int64, __int64);
void __nop(void);
void __nvreg_restore_fence(void);
void __nvreg_save_fence(void);
void __outbyte(unsigned short, unsigned char);
void __outbytestring(unsigned short, unsigned char *, unsigned long);
void __outdword(unsigned short, unsigned long);
void __outdwordstring(unsigned short, unsigned long *, unsigned long);
void __outword(unsigned short, unsigned short);
void __outwordstring(unsigned short, unsigned short *, unsigned long);
unsigned int __popcnt(unsigned int);
unsigned short __popcnt16(unsigned short);
unsigned __int64 __popcnt64(unsigned __int64);



unsigned __int64 __rdtsc(void);
unsigned __int64 __rdtscp(unsigned int *);
unsigned __int64 __readcr0(void);

unsigned __int64 __readcr2(void);

unsigned __int64 __readcr3(void);

unsigned __int64 __readcr4(void);

unsigned __int64 __readcr8(void);

unsigned __int64 __readdr(unsigned int);

unsigned __int64 __readeflags(void);





unsigned char __readgsbyte(unsigned long);
unsigned long __readgsdword(unsigned long);
unsigned __int64 __readgsqword(unsigned long);
unsigned short __readgsword(unsigned long);
unsigned __int64 __readmsr(unsigned long);
unsigned __int64 __readpmc(unsigned long);




unsigned long __segmentlimit(unsigned long);

unsigned __int64 __shiftleft128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift);
unsigned __int64 __shiftright128(unsigned __int64 _LowPart, unsigned __int64 _HighPart, unsigned char _Shift);
void __sidt(void *);

void __stosb(unsigned char *, unsigned char, size_t);
void __stosd(unsigned long *, unsigned long, size_t);
void __stosq(unsigned __int64 *, unsigned __int64, size_t);
void __stosw(unsigned short *, unsigned short, size_t);
void __svm_clgi(void);
void __svm_invlpga(void *, int);
void __svm_skinit(int);
void __svm_stgi(void);
void __svm_vmload(size_t);
void __svm_vmrun(size_t);
void __svm_vmsave(size_t);





void __ud2(void);
unsigned __int64 __ull_rshift(unsigned __int64, int);
unsigned __int64 __umulh(unsigned __int64, unsigned __int64);
void __vmx_off(void);
unsigned char __vmx_on(unsigned __int64 *);
unsigned char __vmx_vmclear(unsigned __int64 *);
unsigned char __vmx_vmlaunch(void);
unsigned char __vmx_vmptrld(unsigned __int64 *);
void __vmx_vmptrst(unsigned __int64 *);
unsigned char __vmx_vmread(size_t, size_t *);
unsigned char __vmx_vmresume(void);
unsigned char __vmx_vmwrite(size_t, size_t);
void __wbinvd(void);


void __writecr0(unsigned __int64);

void __writecr3(unsigned __int64);

void __writecr4(unsigned __int64);

void __writecr8(unsigned __int64);

void __writedr(unsigned int, unsigned __int64);

void __writeeflags(unsigned __int64);





void __writegsbyte(unsigned long, unsigned char);
void __writegsdword(unsigned long, unsigned long);
void __writegsqword(unsigned long, unsigned __int64);
void __writegsword(unsigned long, unsigned short);
void __writemsr(unsigned long, unsigned __int64);





unsigned char _bittest(long const *, long);
unsigned char _bittest64(__int64 const *, __int64);
unsigned char _bittestandcomplement(long *, long);
unsigned char _bittestandcomplement64(__int64 *, __int64);
unsigned char _bittestandreset(long *, long);
unsigned char _bittestandreset64(__int64 *, __int64);
unsigned char _bittestandset(long *, long);
unsigned char _bittestandset64(__int64 *, __int64);
  unsigned __int64 __cdecl _byteswap_uint64(  unsigned __int64);
  unsigned long __cdecl _byteswap_ulong(  unsigned long);
  unsigned short __cdecl _byteswap_ushort(  unsigned short);
void __cdecl _disable(void);
void __cdecl _enable(void);
unsigned char _interlockedbittestandreset(long volatile *, long);
unsigned char _interlockedbittestandreset64(__int64 volatile *, __int64);






unsigned char _interlockedbittestandset(long volatile *, long);
unsigned char _interlockedbittestandset64(__int64 volatile *, __int64);
















  unsigned long __cdecl _lrotl(  unsigned long,   int);
  unsigned long __cdecl _lrotr(  unsigned long,   int);




























































void _m_prefetch(void *);
void _m_prefetchw(volatile const void *);



































__m128i _mm_abs_epi16(__m128i);
__m128i _mm_abs_epi32(__m128i);
__m128i _mm_abs_epi8(__m128i);



__m128i _mm_add_epi16(__m128i, __m128i);
__m128i _mm_add_epi32(__m128i, __m128i);
__m128i _mm_add_epi64(__m128i, __m128i);
__m128i _mm_add_epi8(__m128i, __m128i);
__m128d _mm_add_pd(__m128d, __m128d);
__m128 _mm_add_ps(__m128, __m128);
__m128d _mm_add_sd(__m128d, __m128d);

__m128 _mm_add_ss(__m128, __m128);
__m128i _mm_adds_epi16(__m128i, __m128i);
__m128i _mm_adds_epi8(__m128i, __m128i);
__m128i _mm_adds_epu16(__m128i, __m128i);
__m128i _mm_adds_epu8(__m128i, __m128i);
__m128d _mm_addsub_pd(__m128d, __m128d);
__m128 _mm_addsub_ps(__m128, __m128);
__m128i _mm_alignr_epi8(__m128i, __m128i, int);

__m128d _mm_and_pd(__m128d, __m128d);
__m128 _mm_and_ps(__m128, __m128);
__m128i _mm_and_si128(__m128i, __m128i);
__m128d _mm_andnot_pd(__m128d, __m128d);
__m128 _mm_andnot_ps(__m128, __m128);
__m128i _mm_andnot_si128(__m128i, __m128i);
__m128i _mm_avg_epu16(__m128i, __m128i);
__m128i _mm_avg_epu8(__m128i, __m128i);
__m128i _mm_blend_epi16(__m128i, __m128i, int);
__m128d _mm_blend_pd(__m128d, __m128d, int);
__m128 _mm_blend_ps(__m128, __m128, int);
__m128i _mm_blendv_epi8(__m128i, __m128i, __m128i);
__m128d _mm_blendv_pd(__m128d, __m128d, __m128d);
__m128 _mm_blendv_ps(__m128, __m128, __m128);
void _mm_clflush(void const *);
void _mm_clflushopt(void const *);
void _mm_clwb(void const *);
void _mm_clzero(void const *);
__m128i _mm_cmpeq_epi16(__m128i, __m128i);
__m128i _mm_cmpeq_epi32(__m128i, __m128i);
__m128i _mm_cmpeq_epi64(__m128i, __m128i);
__m128i _mm_cmpeq_epi8(__m128i, __m128i);
__m128d _mm_cmpeq_pd(__m128d, __m128d);
__m128 _mm_cmpeq_ps(__m128, __m128);
__m128d _mm_cmpeq_sd(__m128d, __m128d);
__m128 _mm_cmpeq_ss(__m128, __m128);
int _mm_cmpestra(__m128i, int, __m128i, int, int);
int _mm_cmpestrc(__m128i, int, __m128i, int, int);
int _mm_cmpestri(__m128i, int, __m128i, int, int);
__m128i _mm_cmpestrm(__m128i, int, __m128i, int, int);
int _mm_cmpestro(__m128i, int, __m128i, int, int);
int _mm_cmpestrs(__m128i, int, __m128i, int, int);
int _mm_cmpestrz(__m128i, int, __m128i, int, int);
__m128d _mm_cmpge_pd(__m128d, __m128d);
__m128 _mm_cmpge_ps(__m128, __m128);
__m128d _mm_cmpge_sd(__m128d, __m128d);
__m128 _mm_cmpge_ss(__m128, __m128);
__m128i _mm_cmpgt_epi16(__m128i, __m128i);
__m128i _mm_cmpgt_epi32(__m128i, __m128i);
__m128i _mm_cmpgt_epi64(__m128i, __m128i);
__m128i _mm_cmpgt_epi8(__m128i, __m128i);
__m128d _mm_cmpgt_pd(__m128d, __m128d);
__m128 _mm_cmpgt_ps(__m128, __m128);
__m128d _mm_cmpgt_sd(__m128d, __m128d);
__m128 _mm_cmpgt_ss(__m128, __m128);
int _mm_cmpistra(__m128i, __m128i, int);
int _mm_cmpistrc(__m128i, __m128i, int);
int _mm_cmpistri(__m128i, __m128i, int);
__m128i _mm_cmpistrm(__m128i, __m128i, int);
int _mm_cmpistro(__m128i, __m128i, int);
int _mm_cmpistrs(__m128i, __m128i, int);
int _mm_cmpistrz(__m128i, __m128i, int);
__m128d _mm_cmple_pd(__m128d, __m128d);
__m128 _mm_cmple_ps(__m128, __m128);
__m128d _mm_cmple_sd(__m128d, __m128d);
__m128 _mm_cmple_ss(__m128, __m128);
__m128i _mm_cmplt_epi16(__m128i, __m128i);
__m128i _mm_cmplt_epi32(__m128i, __m128i);
__m128i _mm_cmplt_epi8(__m128i, __m128i);
__m128d _mm_cmplt_pd(__m128d, __m128d);
__m128 _mm_cmplt_ps(__m128, __m128);
__m128d _mm_cmplt_sd(__m128d, __m128d);
__m128 _mm_cmplt_ss(__m128, __m128);
__m128d _mm_cmpneq_pd(__m128d, __m128d);
__m128 _mm_cmpneq_ps(__m128, __m128);
__m128d _mm_cmpneq_sd(__m128d, __m128d);
__m128 _mm_cmpneq_ss(__m128, __m128);
__m128d _mm_cmpnge_pd(__m128d, __m128d);
__m128 _mm_cmpnge_ps(__m128, __m128);
__m128d _mm_cmpnge_sd(__m128d, __m128d);
__m128 _mm_cmpnge_ss(__m128, __m128);
__m128d _mm_cmpngt_pd(__m128d, __m128d);
__m128 _mm_cmpngt_ps(__m128, __m128);
__m128d _mm_cmpngt_sd(__m128d, __m128d);
__m128 _mm_cmpngt_ss(__m128, __m128);
__m128d _mm_cmpnle_pd(__m128d, __m128d);
__m128 _mm_cmpnle_ps(__m128, __m128);
__m128d _mm_cmpnle_sd(__m128d, __m128d);
__m128 _mm_cmpnle_ss(__m128, __m128);
__m128d _mm_cmpnlt_pd(__m128d, __m128d);
__m128 _mm_cmpnlt_ps(__m128, __m128);
__m128d _mm_cmpnlt_sd(__m128d, __m128d);
__m128 _mm_cmpnlt_ss(__m128, __m128);
__m128d _mm_cmpord_pd(__m128d, __m128d);
__m128 _mm_cmpord_ps(__m128, __m128);
__m128d _mm_cmpord_sd(__m128d, __m128d);
__m128 _mm_cmpord_ss(__m128, __m128);
__m128d _mm_cmpunord_pd(__m128d, __m128d);
__m128 _mm_cmpunord_ps(__m128, __m128);
__m128d _mm_cmpunord_sd(__m128d, __m128d);
__m128 _mm_cmpunord_ss(__m128, __m128);
int _mm_comieq_sd(__m128d, __m128d);
int _mm_comieq_ss(__m128, __m128);
int _mm_comige_sd(__m128d, __m128d);
int _mm_comige_ss(__m128, __m128);
int _mm_comigt_sd(__m128d, __m128d);
int _mm_comigt_ss(__m128, __m128);
int _mm_comile_sd(__m128d, __m128d);
int _mm_comile_ss(__m128, __m128);
int _mm_comilt_sd(__m128d, __m128d);
int _mm_comilt_ss(__m128, __m128);
int _mm_comineq_sd(__m128d, __m128d);
int _mm_comineq_ss(__m128, __m128);
unsigned int _mm_crc32_u16(unsigned int, unsigned short);
unsigned int _mm_crc32_u32(unsigned int, unsigned int);
unsigned __int64 _mm_crc32_u64(unsigned __int64, unsigned __int64);
unsigned int _mm_crc32_u8(unsigned int, unsigned char);


__m128 _mm_cvt_si2ss(__m128, int);
int _mm_cvt_ss2si(__m128);
__m128i _mm_cvtepi16_epi32(__m128i);
__m128i _mm_cvtepi16_epi64(__m128i);
__m128i _mm_cvtepi32_epi64(__m128i);
__m128d _mm_cvtepi32_pd(__m128i);
__m128 _mm_cvtepi32_ps(__m128i);
__m128i _mm_cvtepi8_epi16(__m128i);
__m128i _mm_cvtepi8_epi32(__m128i);
__m128i _mm_cvtepi8_epi64(__m128i);
__m128i _mm_cvtepu16_epi32(__m128i);
__m128i _mm_cvtepu16_epi64(__m128i);
__m128i _mm_cvtepu32_epi64(__m128i);
__m128i _mm_cvtepu8_epi16(__m128i);
__m128i _mm_cvtepu8_epi32(__m128i);
__m128i _mm_cvtepu8_epi64(__m128i);
__m128i _mm_cvtpd_epi32(__m128d);

__m128 _mm_cvtpd_ps(__m128d);

__m128i _mm_cvtps_epi32(__m128);
__m128d _mm_cvtps_pd(__m128);
int _mm_cvtsd_si32(__m128d);
__int64 _mm_cvtsd_si64(__m128d);
__int64 _mm_cvtsd_si64x(__m128d);
__m128 _mm_cvtsd_ss(__m128, __m128d);
int _mm_cvtsi128_si32(__m128i);
__int64 _mm_cvtsi128_si64(__m128i);
__int64 _mm_cvtsi128_si64x(__m128i);
__m128d _mm_cvtsi32_sd(__m128d, int);
__m128i _mm_cvtsi32_si128(int);
__m128d _mm_cvtsi64_sd(__m128d, __int64);
__m128i _mm_cvtsi64_si128(__int64);
__m128 _mm_cvtsi64_ss(__m128, __int64);
__m128d _mm_cvtsi64x_sd(__m128d, __int64);
__m128i _mm_cvtsi64x_si128(__int64);
__m128 _mm_cvtsi64x_ss(__m128, __int64);
__m128d _mm_cvtss_sd(__m128d, __m128);
__int64 _mm_cvtss_si64(__m128);
__int64 _mm_cvtss_si64x(__m128);

int _mm_cvtt_ss2si(__m128);
__m128i _mm_cvttpd_epi32(__m128d);

__m128i _mm_cvttps_epi32(__m128);
int _mm_cvttsd_si32(__m128d);
__int64 _mm_cvttsd_si64(__m128d);
__int64 _mm_cvttsd_si64x(__m128d);
__int64 _mm_cvttss_si64(__m128);
__int64 _mm_cvttss_si64x(__m128);
__m128d _mm_div_pd(__m128d, __m128d);
__m128 _mm_div_ps(__m128, __m128);
__m128d _mm_div_sd(__m128d, __m128d);
__m128 _mm_div_ss(__m128, __m128);
__m128d _mm_dp_pd(__m128d, __m128d, int);
__m128 _mm_dp_ps(__m128, __m128, int);
int _mm_extract_epi16(__m128i, int);
int _mm_extract_epi32(__m128i, int);
__int64 _mm_extract_epi64(__m128i, int);
int _mm_extract_epi8(__m128i, int);
int _mm_extract_ps(__m128, int);
__m128i _mm_extract_si64(__m128i, __m128i);
__m128i _mm_extracti_si64(__m128i, int, int);
unsigned int _mm_getcsr(void);
__m128i _mm_hadd_epi16(__m128i, __m128i);
__m128i _mm_hadd_epi32(__m128i, __m128i);
__m128d _mm_hadd_pd(__m128d, __m128d);


__m128 _mm_hadd_ps(__m128, __m128);
__m128i _mm_hadds_epi16(__m128i, __m128i);

__m128i _mm_hsub_epi16(__m128i, __m128i);
__m128i _mm_hsub_epi32(__m128i, __m128i);
__m128d _mm_hsub_pd(__m128d, __m128d);


__m128 _mm_hsub_ps(__m128, __m128);
__m128i _mm_hsubs_epi16(__m128i, __m128i);

__m128i _mm_insert_epi16(__m128i, int, int);
__m128i _mm_insert_epi32(__m128i, int, int);
__m128i _mm_insert_epi64(__m128i, __int64, int);
__m128i _mm_insert_epi8(__m128i, int, int);
__m128 _mm_insert_ps(__m128, __m128, int);
__m128i _mm_insert_si64(__m128i, __m128i);
__m128i _mm_inserti_si64(__m128i, __m128i, int, int);
__m128i _mm_lddqu_si128(__m128i const *);
void _mm_lfence(void);
__m128d _mm_load1_pd(double const *);
__m128d _mm_load_pd(double const *);
__m128 _mm_load_ps(float const *);
__m128 _mm_load_ps1(float const *);
__m128d _mm_load_sd(double const *);
__m128i _mm_load_si128(__m128i const *);
__m128 _mm_load_ss(float const *);
__m128d _mm_loaddup_pd(double const *);
__m128d _mm_loadh_pd(__m128d, double const *);
__m128 _mm_loadh_pi(__m128, __m64 const *);
__m128i _mm_loadl_epi64(__m128i const *);
__m128d _mm_loadl_pd(__m128d, double const *);
__m128 _mm_loadl_pi(__m128, __m64 const *);
__m128d _mm_loadr_pd(double const *);
__m128 _mm_loadr_ps(float const *);
__m128d _mm_loadu_pd(double const *);
__m128 _mm_loadu_ps(float const *);
__m128i _mm_loadu_si128(__m128i const *);
__m128i _mm_madd_epi16(__m128i, __m128i);
__m128i _mm_maddubs_epi16(__m128i, __m128i);

void _mm_maskmoveu_si128(__m128i, __m128i, char *);
__m128i _mm_max_epi16(__m128i, __m128i);
__m128i _mm_max_epi32(__m128i, __m128i);
__m128i _mm_max_epi8(__m128i, __m128i);
__m128i _mm_max_epu16(__m128i, __m128i);
__m128i _mm_max_epu32(__m128i, __m128i);
__m128i _mm_max_epu8(__m128i, __m128i);
__m128d _mm_max_pd(__m128d, __m128d);
__m128 _mm_max_ps(__m128, __m128);
__m128d _mm_max_sd(__m128d, __m128d);
__m128 _mm_max_ss(__m128, __m128);
void _mm_mfence(void);
__m128i _mm_min_epi16(__m128i, __m128i);
__m128i _mm_min_epi32(__m128i, __m128i);
__m128i _mm_min_epi8(__m128i, __m128i);
__m128i _mm_min_epu16(__m128i, __m128i);
__m128i _mm_min_epu32(__m128i, __m128i);
__m128i _mm_min_epu8(__m128i, __m128i);
__m128d _mm_min_pd(__m128d, __m128d);
__m128 _mm_min_ps(__m128, __m128);
__m128d _mm_min_sd(__m128d, __m128d);
__m128 _mm_min_ss(__m128, __m128);
__m128i _mm_minpos_epu16(__m128i);
void _mm_monitor(void const *, unsigned int, unsigned int);
__m128i _mm_move_epi64(__m128i);
__m128d _mm_move_sd(__m128d, __m128d);
__m128 _mm_move_ss(__m128, __m128);
__m128d _mm_movedup_pd(__m128d);
__m128 _mm_movehdup_ps(__m128);
__m128 _mm_movehl_ps(__m128, __m128);
__m128 _mm_moveldup_ps(__m128);
__m128 _mm_movelh_ps(__m128, __m128);
int _mm_movemask_epi8(__m128i);
int _mm_movemask_pd(__m128d);
int _mm_movemask_ps(__m128);


__m128i _mm_mpsadbw_epu8(__m128i, __m128i, int);
__m128i _mm_mul_epi32(__m128i, __m128i);
__m128i _mm_mul_epu32(__m128i, __m128i);
__m128d _mm_mul_pd(__m128d, __m128d);
__m128 _mm_mul_ps(__m128, __m128);
__m128d _mm_mul_sd(__m128d, __m128d);
__m128 _mm_mul_ss(__m128, __m128);

__m128i _mm_mulhi_epi16(__m128i, __m128i);
__m128i _mm_mulhi_epu16(__m128i, __m128i);
__m128i _mm_mulhrs_epi16(__m128i, __m128i);

__m128i _mm_mullo_epi16(__m128i, __m128i);
__m128i _mm_mullo_epi32(__m128i, __m128i);
void _mm_mwait(unsigned int, unsigned int);
__m128d _mm_or_pd(__m128d, __m128d);
__m128 _mm_or_ps(__m128, __m128);
__m128i _mm_or_si128(__m128i, __m128i);
__m128i _mm_packs_epi16(__m128i, __m128i);
__m128i _mm_packs_epi32(__m128i, __m128i);
__m128i _mm_packus_epi16(__m128i, __m128i);
__m128i _mm_packus_epi32(__m128i, __m128i);
void _mm_pause(void);
int _mm_popcnt_u32(unsigned int);
__int64 _mm_popcnt_u64(unsigned __int64);
void _mm_prefetch(char const *, int);
__m128 _mm_rcp_ps(__m128);
__m128 _mm_rcp_ss(__m128);
__m128d _mm_round_pd(__m128d, int);
__m128 _mm_round_ps(__m128, int);
__m128d _mm_round_sd(__m128d, __m128d, int);
__m128 _mm_round_ss(__m128, __m128, int);
__m128 _mm_rsqrt_ps(__m128);
__m128 _mm_rsqrt_ss(__m128);
__m128i _mm_sad_epu8(__m128i, __m128i);
__m128i _mm_set1_epi16(short);
__m128i _mm_set1_epi32(int);

__m128i _mm_set1_epi64x(__int64);
__m128i _mm_set1_epi8(char);
__m128d _mm_set1_pd(double);



__m128i _mm_set_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_set_epi32(int, int, int, int);

__m128i _mm_set_epi64x(__int64, __int64);
__m128i _mm_set_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_set_pd(double, double);



__m128 _mm_set_ps(float, float, float, float);
__m128 _mm_set_ps1(float);
__m128d _mm_set_sd(double);
__m128 _mm_set_ss(float);
void _mm_setcsr(unsigned int);
__m128i _mm_setl_epi64(__m128i);
__m128i _mm_setr_epi16(short, short, short, short, short, short, short, short);
__m128i _mm_setr_epi32(int, int, int, int);

__m128i _mm_setr_epi64x(__int64, __int64);
__m128i _mm_setr_epi8(char, char, char, char, char, char, char, char, char, char, char, char, char, char, char, char);
__m128d _mm_setr_pd(double, double);



__m128 _mm_setr_ps(float, float, float, float);
__m128d _mm_setzero_pd(void);
__m128 _mm_setzero_ps(void);
__m128i _mm_setzero_si128(void);

void _mm_sfence(void);
__m128i _mm_shuffle_epi32(__m128i, int);
__m128i _mm_shuffle_epi8(__m128i, __m128i);
__m128d _mm_shuffle_pd(__m128d, __m128d, int);

__m128 _mm_shuffle_ps(__m128, __m128, unsigned int);
__m128i _mm_shufflehi_epi16(__m128i, int);
__m128i _mm_shufflelo_epi16(__m128i, int);
__m128i _mm_sign_epi16(__m128i, __m128i);
__m128i _mm_sign_epi32(__m128i, __m128i);
__m128i _mm_sign_epi8(__m128i, __m128i);



__m128i _mm_sll_epi16(__m128i, __m128i);
__m128i _mm_sll_epi32(__m128i, __m128i);
__m128i _mm_sll_epi64(__m128i, __m128i);
__m128i _mm_slli_epi16(__m128i, int);
__m128i _mm_slli_epi32(__m128i, int);
__m128i _mm_slli_epi64(__m128i, int);
__m128i _mm_slli_si128(__m128i, int);
__m128d _mm_sqrt_pd(__m128d);
__m128 _mm_sqrt_ps(__m128);
__m128d _mm_sqrt_sd(__m128d, __m128d);
__m128 _mm_sqrt_ss(__m128);
__m128i _mm_sra_epi16(__m128i, __m128i);
__m128i _mm_sra_epi32(__m128i, __m128i);
__m128i _mm_srai_epi16(__m128i, int);
__m128i _mm_srai_epi32(__m128i, int);
__m128i _mm_srl_epi16(__m128i, __m128i);
__m128i _mm_srl_epi32(__m128i, __m128i);
__m128i _mm_srl_epi64(__m128i, __m128i);
__m128i _mm_srli_epi16(__m128i, int);
__m128i _mm_srli_epi32(__m128i, int);
__m128i _mm_srli_epi64(__m128i, int);
__m128i _mm_srli_si128(__m128i, int);
void _mm_store1_pd(double *, __m128d);
void _mm_store_pd(double *, __m128d);
void _mm_store_ps(float *, __m128);
void _mm_store_ps1(float *, __m128);
void _mm_store_sd(double *, __m128d);
void _mm_store_si128(__m128i *, __m128i);
void _mm_store_ss(float *, __m128);
void _mm_storeh_pd(double *, __m128d);
void _mm_storeh_pi(__m64 *, __m128);
void _mm_storel_epi64(__m128i *, __m128i);
void _mm_storel_pd(double *, __m128d);
void _mm_storel_pi(__m64 *, __m128);
void _mm_storer_pd(double *, __m128d);
void _mm_storer_ps(float *, __m128);
void _mm_storeu_pd(double *, __m128d);
void _mm_storeu_ps(float *, __m128);
void _mm_storeu_si128(__m128i *, __m128i);
__m128i _mm_stream_load_si128(const __m128i *);
void _mm_stream_pd(double *, __m128d);

void _mm_stream_ps(float *, __m128);
void _mm_stream_sd(double *, __m128d);
void _mm_stream_si128(__m128i *, __m128i);
void _mm_stream_si32(int *, int);
void _mm_stream_si64x(__int64 *, __int64);
void _mm_stream_ss(float *, __m128);
__m128i _mm_sub_epi16(__m128i, __m128i);
__m128i _mm_sub_epi32(__m128i, __m128i);
__m128i _mm_sub_epi64(__m128i, __m128i);
__m128i _mm_sub_epi8(__m128i, __m128i);
__m128d _mm_sub_pd(__m128d, __m128d);
__m128 _mm_sub_ps(__m128, __m128);
__m128d _mm_sub_sd(__m128d, __m128d);

__m128 _mm_sub_ss(__m128, __m128);
__m128i _mm_subs_epi16(__m128i, __m128i);
__m128i _mm_subs_epi8(__m128i, __m128i);
__m128i _mm_subs_epu16(__m128i, __m128i);
__m128i _mm_subs_epu8(__m128i, __m128i);
int _mm_testc_si128(__m128i, __m128i);
int _mm_testnzc_si128(__m128i, __m128i);
int _mm_testz_si128(__m128i, __m128i);
int _mm_ucomieq_sd(__m128d, __m128d);
int _mm_ucomieq_ss(__m128, __m128);
int _mm_ucomige_sd(__m128d, __m128d);
int _mm_ucomige_ss(__m128, __m128);
int _mm_ucomigt_sd(__m128d, __m128d);
int _mm_ucomigt_ss(__m128, __m128);
int _mm_ucomile_sd(__m128d, __m128d);
int _mm_ucomile_ss(__m128, __m128);
int _mm_ucomilt_sd(__m128d, __m128d);
int _mm_ucomilt_ss(__m128, __m128);
int _mm_ucomineq_sd(__m128d, __m128d);
int _mm_ucomineq_ss(__m128, __m128);
__m128i _mm_unpackhi_epi16(__m128i, __m128i);
__m128i _mm_unpackhi_epi32(__m128i, __m128i);
__m128i _mm_unpackhi_epi64(__m128i, __m128i);
__m128i _mm_unpackhi_epi8(__m128i, __m128i);
__m128d _mm_unpackhi_pd(__m128d, __m128d);
__m128 _mm_unpackhi_ps(__m128, __m128);
__m128i _mm_unpacklo_epi16(__m128i, __m128i);
__m128i _mm_unpacklo_epi32(__m128i, __m128i);
__m128i _mm_unpacklo_epi64(__m128i, __m128i);
__m128i _mm_unpacklo_epi8(__m128i, __m128i);
__m128d _mm_unpacklo_pd(__m128d, __m128d);
__m128 _mm_unpacklo_ps(__m128, __m128);
__m128d _mm_xor_pd(__m128d, __m128d);
__m128 _mm_xor_ps(__m128, __m128);
__m128i _mm_xor_si128(__m128i, __m128i);
__int64 _mul128(__int64 _Multiplier, __int64 _Multiplicand, __int64 * _HighProduct);
unsigned int __cdecl _rotl(  unsigned int _Value,   int _Shift);
unsigned short __cdecl _rotl16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotl64(  unsigned __int64 _Value,   int _Shift);
unsigned char __cdecl _rotl8(unsigned char _Value, unsigned char _Shift);
unsigned int __cdecl _rotr(  unsigned int _Value,   int _Shift);
unsigned short __cdecl _rotr16(unsigned short _Value, unsigned char _Shift);
unsigned __int64 __cdecl _rotr64(  unsigned __int64 _Value,   int _Shift);
unsigned char __cdecl _rotr8(unsigned char _Value, unsigned char _Shift);
int __cdecl _setjmp(jmp_buf);
int __cdecl _setjmpex(jmp_buf);
unsigned __int64 _umul128(unsigned __int64 _Multiplier, unsigned __int64 _Multiplicand, unsigned __int64 * _HighProduct);
void _rsm(void);
void _lgdt(void *);
void _sgdt(void *);
void _clac(void);
void _stac(void);
unsigned char __cdecl _addcarry_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _subborrow_u8(unsigned char, unsigned char, unsigned char, unsigned char *);
unsigned char __cdecl _addcarry_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _subborrow_u16(unsigned char, unsigned short, unsigned short, unsigned short *);
unsigned char __cdecl _addcarry_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _subborrow_u32(unsigned char, unsigned int, unsigned int, unsigned int *);
unsigned char __cdecl _addcarry_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *);
unsigned char __cdecl _subborrow_u64(unsigned char, unsigned __int64, unsigned __int64, unsigned __int64 *);
void _mm_monitorx(void const *, unsigned int, unsigned int);
void _mm_mwaitx(unsigned int, unsigned int, unsigned int);


}
#line 1134 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
#line 1135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"
#line 1136 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\intrin.h"

#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\climits"

#pragma once





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\climits"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"

#pragma once




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"

#pragma once










 #line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"









#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_stdio_config.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {





#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_stdio_config.h"
    
#line 23 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_stdio_config.h"



#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_stdio_config.h"
    


#line 31 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_stdio_config.h"























#line 55 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_stdio_config.h"




#line 60 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_stdio_config.h"


    


        #pragma detect_mismatch("_CRT_STDIO_ISO_WIDE_SPECIFIERS", "0")
    #line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_stdio_config.h"
#line 68 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_stdio_config.h"






#line 75 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_stdio_config.h"



   
__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_printf_options(void)
{
    static unsigned __int64 _OptionsStorage;
    return &_OptionsStorage;
}



   
__declspec(noinline) __inline unsigned __int64* __cdecl __local_stdio_scanf_options(void)
{
    static unsigned __int64 _OptionsStorage;
    return &_OptionsStorage;
}



#line 97 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_stdio_config.h"



















} __pragma(pack(pop))

#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_stdio_config.h"
#line 14 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

__pragma(pack(push, 8)) extern "C" {








    
    typedef struct _iobuf
    {
        void* _Placeholder;
    } FILE;
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

__declspec(dllimport) FILE* __cdecl __acrt_iob_func(unsigned);















__declspec(dllimport) wint_t __cdecl fgetwc(
      FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _fgetwchar(void);


__declspec(dllimport) wint_t __cdecl fputwc(
         wchar_t _Character,
      FILE*   _Stream);


__declspec(dllimport) wint_t __cdecl _fputwchar(
      wchar_t _Character
    );

 
__declspec(dllimport) wint_t __cdecl getwc(
      FILE* _Stream
    );

 
__declspec(dllimport) wint_t __cdecl getwchar(void);



 
__declspec(dllimport) wchar_t* __cdecl fgetws(
      wchar_t* _Buffer,
                              int      _BufferCount,
                           FILE*    _Stream
    );


__declspec(dllimport) int __cdecl fputws(
       wchar_t const* _Buffer,
      FILE*          _Stream
    );


 
__declspec(dllimport) wchar_t* __cdecl _getws_s(
      wchar_t* _Buffer,
                              size_t   _BufferCount
    );

extern "C++" { template <size_t _Size> inline   wchar_t* __cdecl _getws_s(  wchar_t (&_Buffer)[_Size]) throw() { return _getws_s(_Buffer, _Size); } }
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__declspec(dllimport) wint_t __cdecl putwc(
         wchar_t _Character,
      FILE*   _Stream
    );


__declspec(dllimport) wint_t __cdecl putwchar(
      wchar_t _Character
    );


__declspec(dllimport) int __cdecl _putws(
      wchar_t const* _Buffer
    );


__declspec(dllimport) wint_t __cdecl ungetwc(
         wint_t _Character,
      FILE*  _Stream
    );

 
__declspec(dllimport) FILE * __cdecl _wfdopen(
        int            _FileHandle,
      wchar_t const* _Mode
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl _wfopen(
      wchar_t const* _FileName,
      wchar_t const* _Mode
    );


__declspec(dllimport) errno_t __cdecl _wfopen_s(
      FILE**         _Stream,
                         wchar_t const* _FileName,
                         wchar_t const* _Mode
    );

 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wfreopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl _wfreopen(
       wchar_t const* _FileName,
       wchar_t const* _Mode,
      FILE*          _OldStream
    );


__declspec(dllimport) errno_t __cdecl _wfreopen_s(
      FILE**         _Stream,
                         wchar_t const* _FileName,
                         wchar_t const* _Mode,
                        FILE*          _OldStream
    );

 
__declspec(dllimport) FILE* __cdecl _wfsopen(
      wchar_t const* _FileName,
      wchar_t const* _Mode,
        int            _ShFlag
    );

__declspec(dllimport) void __cdecl _wperror(
      wchar_t const* _ErrorMessage
    );



     
    __declspec(dllimport) FILE* __cdecl _wpopen(
          wchar_t const* _Command,
          wchar_t const* _Mode
        );

#line 177 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

__declspec(dllimport) int __cdecl _wremove(
      wchar_t const* _FileName
    );




 
__declspec(dllimport)  wchar_t* __cdecl _wtempnam(
      wchar_t const* _Directory,
      wchar_t const* _FilePrefix
    );



 

__declspec(dllimport) errno_t __cdecl _wtmpnam_s(
      wchar_t* _Buffer,
                              size_t   _BufferCount
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wtmpnam_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wtmpnam_s(_Buffer, _Size); } }
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wtmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  wchar_t* __cdecl _wtmpnam(  wchar_t *_Buffer);
#line 210 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"









__declspec(dllimport) wint_t __cdecl _fgetwc_nolock(
      FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _fputwc_nolock(
         wchar_t _Character, 
      FILE*   _Stream
    );


__declspec(dllimport) wint_t __cdecl _getwc_nolock(
      FILE* _Stream
    );


__declspec(dllimport) wint_t __cdecl _putwc_nolock(
         wchar_t _Character,
      FILE*   _Stream
    );


__declspec(dllimport) wint_t __cdecl _ungetwc_nolock(
         wint_t _Character,
      FILE*  _Stream
    );





#line 251 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
















__declspec(dllimport) int __cdecl __stdio_common_vfwprintf(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_s(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__declspec(dllimport) int __cdecl __stdio_common_vfwprintf_p(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__inline int __cdecl _vfwprintf_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 307 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl vfwprintf(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_l(_Stream, _Format, 0, _ArgList);
}
#line 321 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vfwprintf_s_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 332 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl vfwprintf_s(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 348 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
    }
#line 352 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

#line 354 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vfwprintf_p_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 365 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vfwprintf_p(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 379 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
}
#line 383 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 397 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl vwprintf(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 406 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}
#line 410 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwprintf_s_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 424 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl vwprintf_s(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
#line 439 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

#line 441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwprintf_p(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 464 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}
#line 468 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwprintf_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 478 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 487 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl fwprintf(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
    ...)


#line 496 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 505 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwprintf_s_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl fwprintf_s(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)


#line 535 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 544 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

#line 546 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwprintf_p_l(
                                      FILE*          const _Stream,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 556 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_p_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 565 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwprintf_p(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
    ...)


#line 574 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_p_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 583 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 592 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl wprintf(
        wchar_t const* const _Format,
    ...)


#line 609 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 618 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wprintf_s_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 636 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl wprintf_s(
            wchar_t const* const _Format,
        ...)


#line 646 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 655 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

#line 657 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 666 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wprintf_p(
        wchar_t const* const _Format,
    ...)


#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 692 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"








__declspec(dllimport) int __cdecl __stdio_common_vfwscanf(
                                        unsigned __int64 _Options,
                                     FILE*            _Stream,
        wchar_t const*   _Format,
                                    _locale_t        _Locale,
                                           va_list          _ArgList
    );


__inline int __cdecl _vfwscanf_l(
      FILE*                                const _Stream,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwscanf(
        (*__local_stdio_scanf_options ()),
        _Stream, _Format, _Locale, _ArgList);
}
#line 724 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl vfwscanf(
      FILE*                                const _Stream,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 734 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwscanf_l(_Stream, _Format, 0, _ArgList);
}
#line 738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vfwscanf_s_l(
                            FILE*          const _Stream,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 749 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vfwscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Stream, _Format, _Locale, _ArgList);
}
#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl vfwscanf_s(
                                FILE*          const _Stream,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 767 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
    }
#line 771 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

#line 773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

__inline int __cdecl _vwscanf_l(
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 782 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}
#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl vwscanf(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 795 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
}
#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _vwscanf_s_l(
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 809 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}
#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl vwscanf_s(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 824 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }
#line 828 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

#line 830 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _fwscanf_l(
                                     FILE*          const _Stream,
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
    ...)


#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 849 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "fwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl fwscanf(
                           FILE*          const _Stream,
        wchar_t const* const _Format,
    ...)


#line 858 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwscanf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 867 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _fwscanf_s_l(
                                       FILE*          const _Stream,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 877 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 886 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl fwscanf_s(
                                 FILE*          const _Stream,
            wchar_t const* const _Format,
        ...)


#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwscanf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

#line 908 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _wscanf_l(
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
    ...)


#line 917 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 926 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "wscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl wscanf(
        wchar_t const* const _Format,
    ...)


#line 934 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfwscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"


__inline int __cdecl _wscanf_s_l(
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 952 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"



    
    __inline int __cdecl wscanf_s(
            wchar_t const* const _Format,
        ...)


#line 971 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfwscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

#line 982 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"









    





#line 998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__declspec(dllimport) int __cdecl __stdio_common_vswprintf(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 

__declspec(dllimport) int __cdecl __stdio_common_vswprintf_s(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 

__declspec(dllimport) int __cdecl __stdio_common_vsnwprintf_s(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
                                         size_t           _MaxCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 

__declspec(dllimport) int __cdecl __stdio_common_vswprintf_p(
                                         unsigned __int64 _Options,
                 wchar_t*         _Buffer,
                                         size_t           _BufferCount,
        wchar_t const*   _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsnwprintf_l(
           wchar_t*       const _Buffer,
                                             size_t         const _BufferCount,
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
    )


#line 1056 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(push)
#pragma warning(disable: 4793)

 

__inline int __cdecl _vsnwprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
                                         size_t         const _MaxCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1081 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vsnwprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vsnwprintf_s(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
                               size_t         const _MaxCount,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1102 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
}
#line 1106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _snwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _vsnwprintf(    wchar_t *_Buffer,   size_t _BufferCount,     wchar_t const* _Format, va_list _Args);
#line 1115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(pop)

 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsnwprintf(
        wchar_t*       _Buffer,
                                          size_t         _BufferCount,
                   wchar_t const* _Format,
                                             va_list        _ArgList
    )


#line 1129 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)
}
#line 1136 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { template <size_t _Size> inline   int __cdecl _vsnwprintf_s(  wchar_t (&_Buffer)[_Size],   size_t _BufferCount,     wchar_t const* _Format, va_list _ArgList) throw() { return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1145 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_c_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1158 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_c(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1178 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_l(
                         wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1195 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)
}
#line 1202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl __vswprintf_l(
                         wchar_t*       const _Buffer,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1214 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 1218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf(
               wchar_t*       const _Buffer,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
}
#line 1233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl vswprintf(
                         wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                            va_list              _ArgList
    )


#line 1245 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1262 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"



     
    __inline int __cdecl vswprintf_s(
           wchar_t*       const _Buffer,
                                   size_t         const _BufferCount,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 1283 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
#line 1287 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

#line 1289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { template <size_t _Size> inline   int __cdecl vswprintf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _ArgList) throw() { return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1297 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_p_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf_p(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1318 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswprintf_p(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1334 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vscwprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1345 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vscwprintf(
        wchar_t const* const _Format,
                                  va_list              _ArgList
    )


#line 1363 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vscwprintf_l(_Format, 0, _ArgList);
}
#line 1367 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vscwprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
                                            va_list              _ArgList
    )


#line 1378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int const _Result = __stdio_common_vswprintf_p(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1386 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _vscwprintf_p(
        wchar_t const* const _Format, 
                                  va_list              _ArgList
    )


#line 1396 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vscwprintf_p_l(_Format, 0, _ArgList);
}
#line 1400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl __swprintf_l(
                         wchar_t*       const _Buffer,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1411 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = __vswprintf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_l(
                         wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1432 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1441 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf(
               wchar_t*       const _Buffer,
        wchar_t const* const _Format,
    ...)


#line 1451 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = __vswprintf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1460 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl swprintf(
               wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
    ...)


#line 1471 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(push)


#pragma warning(disable:4793 4996)

__declspec(deprecated("This function or variable may be unsafe. Consider using " "__swprintf_l_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl __swprintf_l(    wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl __vswprintf_l(    wchar_t *_Buffer,     wchar_t const* _Format,   _locale_t _Locale, va_list _Args);
#line 1494 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _swprintf(    wchar_t *_Buffer,     wchar_t const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __inline   int __cdecl _vswprintf(    wchar_t *_Buffer,     wchar_t const* _Format, va_list _Args);
#line 1501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

#pragma warning(pop)

 

__inline int __cdecl _swprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1524 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"



     
    __inline int __cdecl swprintf_s(
           wchar_t*       const _Buffer,
                                   size_t         const _BufferCount,
            wchar_t const* const _Format,
        ...)


#line 1536 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 1545 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

#line 1547 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl swprintf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return vswprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1554 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_p_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1575 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_p(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
    ...)


#line 1586 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1595 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_c_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1607 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1616 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swprintf_c(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
        wchar_t const* const _Format,
    ...)


#line 1627 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1636 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snwprintf_l(
        wchar_t*       const _Buffer,
                                          size_t         const _BufferCount,
         wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 1648 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwprintf(
        wchar_t*       _Buffer,
                                          size_t         _BufferCount,
                   wchar_t const* _Format,
    ...)


#line 1673 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwprintf_s_l(
                 wchar_t*       const _Buffer,
                                         size_t         const _BufferCount,
                                         size_t         const _MaxCount,
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwprintf_s(
       wchar_t*       const _Buffer,
                               size_t         const _BufferCount,
                               size_t         const _MaxCount,
        wchar_t const* const _Format,
    ...)


#line 1721 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnwprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1730 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl _snwprintf_s(  wchar_t (&_Buffer)[_Size],   size_t _BufferCount,     wchar_t const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return _vsnwprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 
__inline int __cdecl _scwprintf_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1747 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscwprintf_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1756 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _scwprintf(
        wchar_t const* const _Format,
    ...)


#line 1765 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscwprintf_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _scwprintf_p_l(
        wchar_t const* const _Format,
                                     _locale_t      const _Locale,
    ...)


#line 1784 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscwprintf_p_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1793 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 
 
__inline int __cdecl _scwprintf_p(
        wchar_t const* const _Format,
    ...)


#line 1802 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscwprintf_p_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1811 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"



    #pragma warning(push)
    #pragma warning(disable: 4141 4412 4793 4996 6054)

    

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "swprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        inline int swprintf(
                       wchar_t*       const _Buffer,
                wchar_t const* const _Format,
            ...) throw()
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
            #pragma warning(suppress: 28719)
            _Result = vswprintf(_Buffer, 2147483647, _Format, _ArgList);       
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "vswprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        inline int __cdecl vswprintf(
                       wchar_t*       const _Buffer,
                wchar_t const* const _Format,
                                          va_list              _ArgList
            ) throw()
        {
            #pragma warning(suppress: 28719)
            return vswprintf(_Buffer, 2147483647, _Format, _ArgList);
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        inline int _swprintf_l(
                                 wchar_t*       const _Buffer,
                wchar_t const* const _Format,
                                             _locale_t      const _Locale,
            ...) throw()
        {
            int _Result;
            va_list _ArgList;
            ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
            _Result = _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
            ((void)(_ArgList = (va_list)0));
            return _Result;
        }

        extern "C++" __declspec(deprecated("function has been changed to conform with the ISO C standard, " "adding an extra character count parameter. To use the traditional " "Microsoft version, set _CRT_NON_CONFORMING_SWPRINTFS.")) __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vswprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
        inline int __cdecl _vswprintf_l(
                                 wchar_t*       const _Buffer,
                wchar_t const* const _Format,
                                             _locale_t      const _Locale,
                                                    va_list              _ArgList
            ) throw()
        {
            return _vswprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
        }

    #line 1872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

    #pragma warning(pop)
#line 1875 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"






#line 1882 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"







 
__declspec(dllimport) int __cdecl __stdio_common_vswscanf(
                                        unsigned __int64 _Options,
              wchar_t const*   _Buffer,
                                        size_t           _BufferCount,
        wchar_t const*   _Format,
                                    _locale_t        _Locale,
                                           va_list          _ArgList
    );

 

__inline int __cdecl _vswscanf_l(
                             wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 1910 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 1916 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl vswscanf(
                             wchar_t const* _Buffer,
        wchar_t const* _Format,
                                  va_list        _ArgList
    )


#line 1927 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return _vswscanf_l(_Buffer, _Format, 0, _ArgList);
}
#line 1931 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vswscanf_s_l(
                             wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                           _locale_t      const _Locale,
                                  va_list              _ArgList
    )


#line 1943 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 1949 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"



     
    
    __inline int __cdecl vswscanf_s(
                                 wchar_t const* const _Buffer,
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 1962 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
    {
        return _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);
    }
#line 1966 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

#line 1968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

extern "C++" { template <size_t _Size> inline   int __cdecl vswscanf_s(  wchar_t (&_Buffer)[_Size],     wchar_t const* _Format, va_list _Args) throw() { return vswscanf_s(_Buffer, _Size, _Format, _Args); } }
#line 1976 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsnwscanf_l(
              wchar_t const* const _Buffer,
                                        size_t         const _BufferCount,
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
                                           va_list              _ArgList
    )


#line 1989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);
}
#line 1995 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _vsnwscanf_s_l(
                wchar_t const* const _Buffer,
                                          size_t         const _BufferCount,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
                                             va_list              _ArgList
    )


#line 2008 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    return __stdio_common_vswscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);
}
#line 2014 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_swscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _swscanf_l(
                                      wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                                    _locale_t            _Locale,
    ...)


#line 2025 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswscanf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2034 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "swscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl swscanf(
                            wchar_t const* const _Buffer,
        wchar_t const* const _Format,
    ...)


#line 2044 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vswscanf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2053 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _swscanf_s_l(
                                        wchar_t const* const _Buffer,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 2064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vswscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2073 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"



     
    
    __inline int __cdecl swscanf_s(
                                  wchar_t const* const _Buffer,
            wchar_t const* const _Format,
        ...)


#line 2085 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vswscanf_s_l(_Buffer, _Format, 0, _ArgList);  
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 2094 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

#line 2096 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snwscanf_l(
              wchar_t const* const _Buffer,
                                        size_t         const _BufferCount,
        wchar_t const* const _Format,
                                    _locale_t      const _Locale,
    ...)


#line 2108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snwscanf(
        wchar_t const* const _Buffer,
                                  size_t         const _BufferCount,
            wchar_t const* const _Format,
    ...)


#line 2133 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnwscanf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2147 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwscanf_s_l(
                wchar_t const* const _Buffer,
                                          size_t         const _BufferCount,
        wchar_t const* const _Format,
                                      _locale_t      const _Locale,
    ...)


#line 2159 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2168 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"

 

__inline int __cdecl _snwscanf_s(
         wchar_t const* const _Buffer,
                                   size_t         const _BufferCount,
           wchar_t const* const _Format,
    ...)


#line 2179 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnwscanf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2188 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wstdio.h"







} __pragma(pack(pop))

#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

__pragma(pack(push, 8)) extern "C" {































    
#line 48 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"















    
    
#line 66 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


typedef __int64 fpos_t;




__declspec(dllimport) errno_t __cdecl _get_stream_buffer_pointers(
           FILE*   _Stream,
      char*** _Base,
      char*** _Pointer,
      int**   _Count
    );









    
    __declspec(dllimport) errno_t __cdecl clearerr_s(
          FILE* _Stream
        );

    
    __declspec(dllimport) errno_t __cdecl fopen_s(
          FILE**      _Stream,
                             char const* _FileName,
                             char const* _Mode
        );
    
    
     
    __declspec(dllimport) size_t __cdecl fread_s(
            void*  _Buffer,
                       size_t _BufferSize,
                                                                        size_t _ElementSize,
                                                                        size_t _ElementCount,
                                                                     FILE*  _Stream
        );
    
    
    __declspec(dllimport) errno_t __cdecl freopen_s(
          FILE**      _Stream,
                             char const* _FileName,
                             char const* _Mode,
                            FILE*       _OldStream
        );

     
    __declspec(dllimport) char* __cdecl gets_s(
          char*   _Buffer,
                           rsize_t _Size
        );

    
    __declspec(dllimport) errno_t __cdecl tmpfile_s(
            FILE** _Stream
        );

     
    
    __declspec(dllimport) errno_t __cdecl tmpnam_s(
          char*   _Buffer,
                           rsize_t _Size
        );

#line 137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

__declspec(dllimport) void __cdecl clearerr(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl fclose(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fcloseall(void);

 
__declspec(dllimport) FILE* __cdecl _fdopen(
        int         _FileHandle,
      char const* _Mode
    );

 
__declspec(dllimport) int __cdecl feof(
      FILE* _Stream
    );

 
__declspec(dllimport) int __cdecl ferror(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl fflush(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl fgetc(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fgetchar(void);

 

__declspec(dllimport) int __cdecl fgetpos(
      FILE*   _Stream,
        fpos_t* _Position
    );

 

__declspec(dllimport) char* __cdecl fgets(
      char* _Buffer,
                           int   _MaxCount,
                        FILE* _Stream
    );

 
__declspec(dllimport) int __cdecl _fileno(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _flushall(void);

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "fopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl fopen(
      char const* _FileName,
      char const* _Mode
    );


 

__declspec(dllimport) int __cdecl fputc(
         int   _Character,
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _fputchar(
      int _Character
    );

 

__declspec(dllimport) int __cdecl fputs(
       char const* _Buffer,
      FILE*       _Stream
    );


__declspec(dllimport) size_t __cdecl fread(
      void*  _Buffer,
                                                  size_t _ElementSize,
                                                  size_t _ElementCount,
                                               FILE*  _Stream
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "freopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl freopen(
       char const* _FileName,
       char const* _Mode,
      FILE*       _Stream
    );

 
__declspec(dllimport) FILE* __cdecl _fsopen(
      char const* _FileName,
      char const* _Mode,
        int         _ShFlag
    );

 

__declspec(dllimport) int __cdecl fsetpos(
      FILE*         _Stream,
         fpos_t const* _Position
    );

 

__declspec(dllimport) int __cdecl fseek(
      FILE* _Stream,
         long  _Offset,
         int   _Origin
    );

 

__declspec(dllimport) int __cdecl _fseeki64(
      FILE*   _Stream,
         __int64 _Offset,
         int     _Origin
    );

 
 
__declspec(dllimport) long __cdecl ftell(
      FILE* _Stream
    );

 
 
__declspec(dllimport) __int64 __cdecl _ftelli64(
      FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl fwrite(
      void const* _Buffer,
                                                size_t      _ElementSize,
                                                size_t      _ElementCount,
                                             FILE*       _Stream
    );

 
 
__declspec(dllimport) int __cdecl getc(
      FILE* _Stream
    );

 
__declspec(dllimport) int __cdecl getchar(void);

 
__declspec(dllimport) int __cdecl _getmaxstdio(void);

extern "C++" { template <size_t _Size> inline char* __cdecl gets_s(char (&_Buffer)[_Size]) throw() { return gets_s(_Buffer, _Size); } }
#line 311 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 
__declspec(dllimport) int __cdecl _getw(
      FILE* _Stream
    );

__declspec(dllimport) void __cdecl perror(
      char const* _ErrorMessage
    );



     
    
    __declspec(dllimport) int __cdecl _pclose(
          FILE* _Stream
        );

     
    __declspec(dllimport) FILE* __cdecl _popen(
          char const* _Command,
          char const* _Mode
        );

#line 336 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__declspec(dllimport) int __cdecl putc(
         int   _Character,
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl putchar(
      int _Character
    );


__declspec(dllimport) int __cdecl puts(
      char const* _Buffer
    );

 

__declspec(dllimport) int __cdecl _putw(
         int   _Word, 
      FILE* _Stream
    );



__declspec(dllimport) int __cdecl remove(
      char const* _FileName
    );

 
__declspec(dllimport) int __cdecl rename(
      char const* _OldFileName,
      char const* _NewFileName
    );

__declspec(dllimport) int __cdecl _unlink(
      char const* _FileName
    );



    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_unlink" ". See online help for details."))
    __declspec(dllimport) int __cdecl unlink(
          char const* _FileName
        );

#line 385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"



__declspec(dllimport) void __cdecl rewind(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _rmtmp(void);

__declspec(deprecated("This function or variable may be unsafe. Consider using " "setvbuf" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) void __cdecl setbuf(
                                                  FILE* _Stream,
        char* _Buffer
    );


__declspec(dllimport) int __cdecl _setmaxstdio(
      int _Maximum
    );

 

__declspec(dllimport) int __cdecl setvbuf(
                           FILE*  _Stream,
        char*  _Buffer,
                              int    _Mode,
                              size_t _Size
    );




#line 419 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 
__declspec(dllimport)  char* __cdecl _tempnam(
      char const* _DirectoryName,
      char const* _FilePrefix
    );



#line 429 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpfile_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) FILE* __cdecl tmpfile(void);

extern "C++" { template <size_t _Size> inline errno_t __cdecl tmpnam_s(  char (&_Buffer)[_Size]) throw() { return tmpnam_s(_Buffer, _Size); } }
#line 437 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "tmpnam_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  char* __cdecl tmpnam(  char *_Buffer);
#line 443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__declspec(dllimport) int __cdecl ungetc(
         int   _Character,
      FILE* _Stream
    );








__declspec(dllimport) void __cdecl _lock_file(
      FILE* _Stream
    );

__declspec(dllimport) void __cdecl _unlock_file(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl _fclose_nolock(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl _fflush_nolock(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl _fgetc_nolock(
      FILE* _Stream
    );

 

__declspec(dllimport) int __cdecl _fputc_nolock(
         int   _Character,
      FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl _fread_nolock(
      void*  _Buffer,
                                                  size_t _ElementSize,
                                                  size_t _ElementCount,
                                               FILE*  _Stream
    );


 
__declspec(dllimport) size_t __cdecl _fread_nolock_s(
      void*  _Buffer,
               size_t _BufferSize,
                                                                  size_t _ElementSize,
                                                                  size_t _ElementCount,
                                                               FILE*  _Stream
    );


__declspec(dllimport) int __cdecl _fseek_nolock(
      FILE* _Stream,
         long  _Offset,
         int   _Origin
    );


__declspec(dllimport) int __cdecl _fseeki64_nolock(
      FILE*   _Stream,
         __int64 _Offset,
         int     _Origin
    );

 
__declspec(dllimport) long __cdecl _ftell_nolock(
      FILE* _Stream
    );

 
__declspec(dllimport) __int64 __cdecl _ftelli64_nolock(
      FILE* _Stream
    );


__declspec(dllimport) size_t __cdecl _fwrite_nolock(
      void const* _Buffer,
                                                size_t      _ElementSize,
                                                size_t      _ElementCount,
                                             FILE*       _Stream
    );


__declspec(dllimport) int __cdecl _getc_nolock(
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _putc_nolock(
         int   _Character,
      FILE* _Stream
    );


__declspec(dllimport) int __cdecl _ungetc_nolock(
         int   _Character,
      FILE* _Stream
    );






















#line 580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"



__declspec(dllimport) int* __cdecl __p__commode(void);




    
#line 590 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"






#line 597 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"






__declspec(dllimport) int __cdecl __stdio_common_vfprintf(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

__declspec(dllimport) int __cdecl __stdio_common_vfprintf_s(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
__declspec(dllimport) int __cdecl __stdio_common_vfprintf_p(
                                         unsigned __int64 _Options,
                                      FILE*            _Stream,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );


__inline int __cdecl _vfprintf_l(
       FILE*       const _Stream,
        char const* const _Format,
      _locale_t   const _Locale,
             va_list           _ArgList
    )


#line 638 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfprintf((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 642 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl vfprintf(
                            FILE*       const _Stream,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 652 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vfprintf_l(_Stream, _Format, 0, _ArgList);
}
#line 656 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _vfprintf_s_l(
       FILE*       const _Stream,
        char const* const _Format,
      _locale_t   const _Locale,
             va_list           _ArgList
    )


#line 667 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfprintf_s((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"



    
    __inline int __cdecl vfprintf_s(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 683 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
    {
        return _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
    }
#line 687 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

#line 689 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _vfprintf_p_l(
       FILE*       const _Stream,
        char const* const _Format,
      _locale_t   const _Locale,
             va_list           _ArgList
    )


#line 700 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfprintf_p((*__local_stdio_printf_options()), _Stream, _Format, _Locale, _ArgList);
}
#line 704 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _vfprintf_p(
                            FILE*       const _Stream,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 714 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
}
#line 718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _vprintf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 728 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 732 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl vprintf(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 741 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}
#line 745 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _vprintf_s_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 755 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 759 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"



    
    __inline int __cdecl vprintf_s(
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 770 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
    {
        return _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    }
#line 774 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

#line 776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _vprintf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 786 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
}
#line 790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _vprintf_p(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
}
#line 803 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _fprintf_l(
                                      FILE*       const _Stream,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 813 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 822 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl fprintf(
                            FILE*       const _Stream,
        char const* const _Format,
    ...)


#line 831 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 840 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

__declspec(dllimport) int __cdecl _set_printf_count_output(
      int _Value
    );

__declspec(dllimport) int __cdecl _get_printf_count_output(void);


__inline int __cdecl _fprintf_s_l(
                                      FILE*       const _Stream,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 856 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 865 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"



    
    __inline int __cdecl fprintf_s(
                                FILE*       const _Stream,
            char const* const _Format,
        ...)


#line 876 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 885 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

#line 887 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _fprintf_p_l(
                                      FILE*       const _Stream,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 897 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_p_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 906 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _fprintf_p(
                            FILE*       const _Stream,
        char const* const _Format,
    ...)


#line 915 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_p_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 924 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _printf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 933 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 942 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl printf(
        char const* const _Format,
    ...)


#line 950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 959 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _printf_s_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 968 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 977 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"



    
    __inline int __cdecl printf_s(
            char const* const _Format,
        ...)


#line 987 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfprintf_s_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 996 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

#line 998 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _printf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1007 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1016 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _printf_p(
        char const* const _Format,
    ...)


#line 1024 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfprintf_p_l((__acrt_iob_func(1)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"







__declspec(dllimport) int __cdecl __stdio_common_vfscanf(
                                        unsigned __int64 _Options,
                                     FILE*            _Stream,
        char const*      _Format,
                                    _locale_t        _Locale,
                                           va_list          _Arglist
    );


__inline int __cdecl _vfscanf_l(
                            FILE*       const _Stream,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 1058 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfscanf(
        (*__local_stdio_scanf_options ()),
        _Stream, _Format, _Locale, _ArgList);
}
#line 1064 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl vfscanf(
                            FILE*       const _Stream,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1074 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vfscanf_l(_Stream, _Format, 0, _ArgList);
}
#line 1078 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _vfscanf_s_l(
                            FILE*       const _Stream,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 1089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return __stdio_common_vfscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Stream, _Format, _Locale, _ArgList);
}
#line 1095 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"




    
    __inline int __cdecl vfscanf_s(
                                FILE*       const _Stream,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 1108 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
    {
        return _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
    }
#line 1112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

#line 1114 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _vscanf_l(
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 1124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}
#line 1128 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl vscanf(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1137 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
}
#line 1141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _vscanf_s_l(
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 1151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
}
#line 1155 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"



    
    __inline int __cdecl vscanf_s(
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 1166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
    {
        return _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    }
#line 1170 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

#line 1172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_fscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _fscanf_l(
                                     FILE*       const _Stream,
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)


#line 1182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "fscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl fscanf(
                           FILE*       const _Stream,
        char const* const _Format,
    ...)


#line 1200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfscanf_l(_Stream, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _fscanf_s_l(
                                       FILE*       const _Stream,
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)


#line 1219 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_s_l(_Stream, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1228 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"



    
    __inline int __cdecl fscanf_s(
                                 FILE*       const _Stream,
            char const* const _Format,
        ...)


#line 1239 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfscanf_s_l(_Stream, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 1248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

#line 1250 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_scanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _scanf_l(
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)


#line 1259 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1268 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "scanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl scanf(
        char const* const _Format,
    ...)


#line 1276 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vfscanf_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1285 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _scanf_s_l(
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)


#line 1294 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1303 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"



    
    __inline int __cdecl scanf_s(
            char const* const _Format,
        ...)


#line 1313 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vfscanf_s_l((__acrt_iob_func(0)), _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 1322 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

#line 1324 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"








 
__declspec(dllimport) int __cdecl __stdio_common_vsprintf(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_s(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
__declspec(dllimport) int __cdecl __stdio_common_vsnprintf_s(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
                                         size_t           _MaxCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
__declspec(dllimport) int __cdecl __stdio_common_vsprintf_p(
                                         unsigned __int64 _Options,
                 char*            _Buffer,
                                         size_t           _BufferCount,
        char const*      _Format,
                                     _locale_t        _Locale,
                                            va_list          _ArgList
    );

 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsnprintf_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1385 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1393 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsnprintf(
        char*       const _Buffer,
                                          size_t      const _BufferCount,
                   char const* const _Format,
                                             va_list           _ArgList
    )


#line 1405 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnprintf_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    #pragma warning(pop)
}
#line 1412 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"










#line 1423 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__inline int __cdecl vsnprintf(
         char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1435 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1443 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _vsprintf_l(
        char*       const _Buffer,
                      char const* const _Format,
                    _locale_t   const _Locale,
                           va_list           _ArgList
    )


#line 1455 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);
    #pragma warning(pop)
}
#line 1462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl vsprintf(
               char*       const _Buffer,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1473 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    #pragma warning(push)
    #pragma warning(disable: 4996) 
    return _vsnprintf_l(_Buffer, (size_t)-1, _Format, 0, _ArgList);
    #pragma warning(pop)
}
#line 1480 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1493 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1501 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"



     
    
    __inline int __cdecl vsprintf_s(
           char*       const _Buffer,
                                   size_t      const _BufferCount,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 1515 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
    {
        return _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    }
#line 1519 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
    
    extern "C++" { template <size_t _Size> inline   int __cdecl vsprintf_s(  char (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw() { return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 1527 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

#line 1529 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsprintf_p_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1542 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf_p(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1550 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsprintf_p(
       char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1562 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1566 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsnprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
                                         size_t      const _MaxCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list          _ArgList
    )


#line 1580 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsnprintf_s(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1588 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsnprintf_s(
       char*       const _Buffer,
                               size_t      const _BufferCount,
                               size_t      const _MaxCount,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1601 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
}
#line 1605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

extern "C++" { template <size_t _Size> inline   int __cdecl _vsnprintf_s(  char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, va_list _ArgList) throw() { return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1614 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"



     
    
    __inline int __cdecl vsnprintf_s(
           char*       const _Buffer,
                                   size_t      const _BufferCount,
                                   size_t      const _MaxCount,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 1629 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
    {
        return _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    }
#line 1633 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
    
    extern "C++" { template <size_t _Size> inline   int __cdecl vsnprintf_s(  char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, va_list _ArgList) throw() { return vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } }
#line 1642 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

#line 1644 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _vscprintf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1654 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 
__inline int __cdecl _vscprintf(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1671 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vscprintf_l(_Format, 0, _ArgList);
}
#line 1675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _vscprintf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf_p(
        (*__local_stdio_printf_options()) | (1ULL << 1),
        0, 0, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1693 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 
__inline int __cdecl _vscprintf_p(
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1702 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vscprintf_p_l(_Format, 0, _ArgList);
}
#line 1706 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _vsnprintf_c_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
                                            va_list           _ArgList
    )


#line 1718 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int const _Result = __stdio_common_vsprintf(
        (*__local_stdio_printf_options()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    return _Result < 0 ? -1 : _Result;
}
#line 1726 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__inline int __cdecl _vsnprintf_c(
         char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 1738 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
}
#line 1742 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _sprintf_l(
                         char*       const _Buffer,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1752 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsprintf_l(_Buffer, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__inline int __cdecl sprintf(
               char*       const _Buffer,
        char const* const _Format,
    ...)


#line 1776 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsprintf_l(_Buffer, _Format, 0, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1790 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

#pragma warning(push)
#pragma warning(disable: 4996)
__declspec(deprecated("This function or variable may be unsafe. Consider using " "sprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   int __cdecl sprintf(  char *_Buffer,  char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "vsprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))   int __cdecl vsprintf(  char *_Buffer,  char const* _Format, va_list _Args);
#line 1799 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
#pragma warning(pop)

 

__inline int __cdecl _sprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1812 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1821 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"



     
    
    __inline int __cdecl sprintf_s(
           char*       const _Buffer,
                                   size_t      const _BufferCount,
            char const* const _Format,
        ...)


#line 1834 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vsprintf_s_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 1843 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

#line 1845 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline int __cdecl sprintf_s(  char (&_Buffer)[_Size],     char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return vsprintf_s(_Buffer, _Size, _Format, _ArgList); } __pragma(warning(pop)); }
#line 1851 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__inline int __cdecl _sprintf_p_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1863 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1872 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__inline int __cdecl _sprintf_p(
       char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
    ...)


#line 1883 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsprintf_p_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1892 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 
 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snprintf_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1904 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    #pragma warning(push)
    #pragma warning(disable: 4996) 
    _Result = _vsnprintf_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    #pragma warning(pop)

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1918 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"










#line 1929 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 
 
__inline int __cdecl snprintf(
       char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
    ...)


#line 1940 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress:28719)    
    _Result = vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1950 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 
__inline int __cdecl _snprintf(
        char*       const _Buffer,
                                          size_t      const _BufferCount,
                   char const* const _Format,
    ...)


#line 1960 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
#pragma warning(suppress:28719)    
    _Result = _vsnprintf(_Buffer, _BufferCount, _Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 1970 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_snprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))    int __cdecl _snprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, ...); __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vsnprintf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))    int __cdecl _vsnprintf(    char *_Buffer,   size_t _BufferCount,     char const* _Format, va_list _Args);
#line 1979 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__inline int __cdecl _snprintf_c_l(
                   char*       const _Buffer,
                                         size_t      const _BufferCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 1991 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2000 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__inline int __cdecl _snprintf_c(
         char*       const _Buffer,
                               size_t      const _BufferCount,
        char const* const _Format,
    ...)


#line 2011 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnprintf_c_l(_Buffer, _BufferCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2020 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__inline int __cdecl _snprintf_s_l(
                 char*       const _Buffer,
                                         size_t      const _BufferCount,
                                         size_t      const _MaxCount,
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 2033 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2042 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 

__inline int __cdecl _snprintf_s(
       char*       const _Buffer,
                               size_t      const _BufferCount,
                               size_t      const _MaxCount,
        char const* const _Format,
    ...)


#line 2054 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsnprintf_s_l(_Buffer, _BufferCount, _MaxCount, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2063 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

extern "C++" { __pragma(warning(push)); __pragma(warning(disable: 4793)); template <size_t _Size> inline   int __cdecl _snprintf_s(  char (&_Buffer)[_Size],   size_t _BufferCount,     char const* _Format, ...) throw() { va_list _ArgList; ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format))))); return _vsnprintf_s(_Buffer, _Size, _BufferCount, _Format, _ArgList); } __pragma(warning(pop)); }
#line 2071 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _scprintf_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 2080 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscprintf_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2089 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 
__inline int __cdecl _scprintf(
        char const* const _Format,
    ...)


#line 2097 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscprintf_l(_Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2106 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _scprintf_p_l(
        char const* const _Format,
                                     _locale_t   const _Locale,
    ...)


#line 2115 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vscprintf_p_l(_Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 
__inline int __cdecl _scprintf_p(
        char const* const _Format,
    ...)


#line 2132 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vscprintf_p(_Format, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2141 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"






__declspec(dllimport) int __cdecl __stdio_common_vsscanf(
                                        unsigned __int64 _Options,
              char const*      _Buffer,
                                        size_t           _BufferCount,
        char const*      _Format,
                                    _locale_t        _Locale,
                                           va_list          _ArgList
    );


__inline int __cdecl _vsscanf_l(
                             char const* const _Buffer,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 2166 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 2172 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl vsscanf(
                             char const* const _Buffer,
        char const* const _Format,
                                  va_list           _ArgList
    )


#line 2182 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return _vsscanf_l(_Buffer, _Format, 0, _ArgList);
}
#line 2186 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _vsscanf_s_l(
                             char const* const _Buffer,
        char const* const _Format,
                           _locale_t   const _Locale,
                                  va_list           _ArgList
    )


#line 2197 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    return __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, (size_t)-1, _Format, _Locale, _ArgList);
}
#line 2203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"



    #pragma warning(push)
    #pragma warning(disable:6530)

    
    __inline int __cdecl vsscanf_s(
                                 char const* const _Buffer,
            char const* const _Format,
                                      va_list           _ArgList
        )


#line 2218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
    {
        return _vsscanf_s_l(_Buffer, _Format, 0, _ArgList);
    }
#line 2222 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

    extern "C++" { template <size_t _Size> inline int __cdecl vsscanf_s(  char const (&_Buffer)[_Size],     char const* _Format, va_list _ArgList) throw() { return vsscanf_s(_Buffer, _Size, _Format, _ArgList); } }
#line 2229 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
   
    #pragma warning(pop)

#line 2233 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_sscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _sscanf_l(
                                      char const* const _Buffer,
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)


#line 2243 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsscanf_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2252 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "sscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl sscanf(
                            char const* const _Buffer,
        char const* const _Format,
    ...)


#line 2261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
    _Result = _vsscanf_l(_Buffer, _Format, 0, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _sscanf_s_l(
                                        char const* const _Buffer,
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)


#line 2280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
    _Result = _vsscanf_s_l(_Buffer, _Format, _Locale, _ArgList);
    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2289 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"



    
    __inline int __cdecl sscanf_s(
                                  char const* const _Buffer,
            char const* const _Format,
        ...)


#line 2300 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = vsscanf_s(_Buffer, _Format, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 2314 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

#line 2316 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

#pragma warning(push)
#pragma warning(disable:6530)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snscanf_l(
        char const* const _Buffer,
                                        size_t      const _BufferCount,
        char const* const _Format,
                                    _locale_t   const _Locale,
    ...)


#line 2330 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2343 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_snscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__inline int __cdecl _snscanf(
        char const* const _Buffer,
                                        size_t      const _BufferCount,
                  char const* const _Format,
    ...)


#line 2353 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2366 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"



__inline int __cdecl _snscanf_s_l(
          char const* const _Buffer,
                                          size_t      const _BufferCount,
        char const* const _Format,
                                      _locale_t   const _Locale,
    ...)


#line 2378 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, _Locale, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"


__inline int __cdecl _snscanf_s(
        char const* const _Buffer,
                                        size_t      const _BufferCount,
                char const* const _Format,
    ...)


#line 2401 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"
{
    int _Result;
    va_list _ArgList;
    ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

    _Result = __stdio_common_vsscanf(
        (*__local_stdio_scanf_options ()) | (1ULL << 0),
        _Buffer, _BufferCount, _Format, 0, _ArgList);

    ((void)(_ArgList = (va_list)0));
    return _Result;
}
#line 2414 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

#pragma warning(pop)



#line 2420 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"










    

    


#line 2436 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

    __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_tempnam" ". See online help for details."))
    __declspec(dllimport) char* __cdecl tempnam(
          char const* _Directory,
          char const* _FilePrefix
        );

    

#line 2446 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"

     __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fcloseall" ". See online help for details.")) __declspec(dllimport) int   __cdecl fcloseall(void);
          __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fdopen" ". See online help for details."))    __declspec(dllimport) FILE* __cdecl fdopen(  int _FileHandle,   char const* _Format);
     __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fgetchar" ". See online help for details."))  __declspec(dllimport) int   __cdecl fgetchar(void);
          __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fileno" ". See online help for details."))    __declspec(dllimport) int   __cdecl fileno(  FILE* _Stream);
     __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_flushall" ". See online help for details."))  __declspec(dllimport) int   __cdecl flushall(void);
     __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_fputchar" ". See online help for details."))  __declspec(dllimport) int   __cdecl fputchar(  int _Ch);
          __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_getw" ". See online help for details."))      __declspec(dllimport) int   __cdecl getw(  FILE* _Stream);
     __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_putw" ". See online help for details."))      __declspec(dllimport) int   __cdecl putw(  int _Ch,   FILE* _Stream);
          __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_rmtmp" ". See online help for details."))     __declspec(dllimport) int   __cdecl rmtmp(void);

#line 2458 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\stdio.h"



} __pragma(pack(pop))

#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"


 
 
 
 
 
 
 

 
 
 
 

  

typedef FILE FILE;

 
namespace std {
using :: FILE; using :: _Mbstatet;

using :: size_t; using :: fpos_t; using :: FILE;
using :: clearerr; using :: fclose; using :: feof;
using :: ferror; using :: fflush; using :: fgetc;
using :: fgetpos; using :: fgets; using :: fopen;
using :: fprintf; using :: fputc; using :: fputs;
using :: fread; using :: freopen; using :: fscanf;
using :: fseek; using :: fsetpos; using :: ftell;
using :: fwrite; using :: getc; using :: getchar;
using :: perror;
using :: putc; using :: putchar;
using :: printf; using :: puts; using :: remove;
using :: rename; using :: rewind; using :: scanf;
using :: setbuf; using :: setvbuf; using :: sprintf;
using :: sscanf; using :: tmpfile; using :: tmpnam;
using :: ungetc; using :: vfprintf; using :: vprintf;
using :: vsprintf;

using :: snprintf; using :: vsnprintf;
using :: vfscanf; using :: vscanf; using :: vsscanf;
}
 #line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"

#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdio"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"

#pragma once










 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"

 
namespace std {
using :: size_t; using :: memchr; using :: memcmp;
using :: memcpy; using :: memmove; using :: memset;
using :: strcat; using :: strchr; using :: strcmp;
using :: strcoll; using :: strcpy; using :: strcspn;
using :: strerror; using :: strlen; using :: strncat;
using :: strncmp; using :: strncpy; using :: strpbrk;
using :: strrchr; using :: strspn; using :: strstr;
using :: strtok; using :: strxfrm;
}
 #line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"

#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstring"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"

#pragma once










 #line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"









#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"








#pragma once




__pragma(pack(push, 8)) extern "C" {









    
     
    __declspec(dllimport) errno_t __cdecl _cgetws_s(
          wchar_t* _Buffer,
                                               size_t   _BufferCount,
                                              size_t*  _SizeRead
        );

    extern "C++" { template <size_t _Size> inline   errno_t __cdecl _cgetws_s(  wchar_t (&_Buffer)[_Size],   size_t* _SizeRead) throw() { return _cgetws_s(_Buffer, _Size, _SizeRead); } }
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

    
    __declspec(dllimport) int __cdecl _cputws(
          wchar_t const* _Buffer
        );

          __declspec(dllimport) wint_t __cdecl _getwch  (void);
          __declspec(dllimport) wint_t __cdecl _getwche (void);
     __declspec(dllimport) wint_t __cdecl _putwch  (  wchar_t _Character);
     __declspec(dllimport) wint_t __cdecl _ungetwch(  wint_t  _Character);

          __declspec(dllimport) wint_t __cdecl _getwch_nolock  (void);
          __declspec(dllimport) wint_t __cdecl _getwche_nolock (void);
     __declspec(dllimport) wint_t __cdecl _putwch_nolock  (  wchar_t _Character);
     __declspec(dllimport) wint_t __cdecl _ungetwch_nolock(  wint_t  _Character);



    
    
    
    
    
    
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_s(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __declspec(dllimport) int __cdecl __conio_common_vcwprintf_p(
                                             unsigned __int64 _Options,
            wchar_t const*   _Format,
                                         _locale_t        _Locale,
                                                va_list          _ArgList
        );

    
    __inline int __cdecl _vcwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )


#line 94 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwprintf((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }
#line 98 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 107 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        return _vcwprintf_l(_Format, 0, _ArgList);
    }
#line 111 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )


#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwprintf_s((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }
#line 125 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf_s(
            wchar_t const* const _Format,
                                      va_list              _ArgList
        )


#line 134 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        return _vcwprintf_s_l(_Format, 0, _ArgList);
    }
#line 138 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
                                                va_list              _ArgList
        )


#line 148 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwprintf_p((*__local_stdio_printf_options()), _Format, _Locale, _ArgList);
    }
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwprintf_p(
            const wchar_t* const _Format,
                                      va_list              _ArgList
        )


#line 161 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        return _vcwprintf_p_l(_Format, 0, _ArgList);
    }
#line 165 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)


#line 174 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 183 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf(
            wchar_t const* const _Format,
        ...)


#line 191 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 200 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_s_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)


#line 209 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 218 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_s(
            wchar_t const* const _Format,
        ...)


#line 226 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 235 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_p_l(
            wchar_t const* const _Format,
                                         _locale_t      const _Locale,
        ...)


#line 244 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwprintf_p_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 253 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwprintf_p(
            wchar_t const* const _Format,
        ...)


#line 261 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwprintf_p_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"



    
    
    
    
    
    
    __declspec(dllimport) int __cdecl __conio_common_vcwscanf(
                                            unsigned __int64 _Options,
            wchar_t const*   _Format,
                                        _locale_t        _Locale,
                                               va_list          _ArgList
        );

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vcwscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )


#line 295 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()),
            _Format, _Locale, _ArgList);
    }
#line 301 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_vcwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _vcwscanf(
            wchar_t const* const _Format,
                                               va_list              _ArgList
        )


#line 310 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        #pragma warning(push)
        #pragma warning(disable: 4996) 
        return _vcwscanf_l(_Format, 0, _ArgList);
        #pragma warning(pop)
    }
#line 317 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwscanf_s_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
                                               va_list              _ArgList
        )


#line 327 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        return __conio_common_vcwscanf(
            (*__local_stdio_scanf_options ()) | (1ULL << 0),
            _Format, _Locale, _ArgList);
    }
#line 333 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _vcwscanf_s(
            wchar_t const* const _Format,
                                               va_list              _ArgList
        )


#line 342 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        return _vcwscanf_s_l(_Format, 0, _ArgList);
    }
#line 346 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s_l" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _cwscanf_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)


#line 355 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vcwscanf_l(_Format, _Locale, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 369 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

     __declspec(deprecated("This function or variable may be unsafe. Consider using " "_cwscanf_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    __inline int __cdecl _cwscanf(
            wchar_t const* const _Format,
        ...)


#line 377 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));

        #pragma warning(push)
        #pragma warning(disable: 4996) 
        _Result = _vcwscanf_l(_Format, 0, _ArgList);
        #pragma warning(pop)

        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 391 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwscanf_s_l(
            wchar_t const* const _Format,
                                        _locale_t      const _Locale,
        ...)


#line 400 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Locale)>(), ((void)(__va_start(&_ArgList, _Locale)))));
        _Result = _vcwscanf_s_l(_Format, _Locale, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 409 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

    
    __inline int __cdecl _cwscanf_s(
            wchar_t const* const _Format,
        ...)


#line 417 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"
    {
        int _Result;
        va_list _ArgList;
        ((void)(__vcrt_va_start_verify_argument_type<decltype(_Format)>(), ((void)(__va_start(&_ArgList, _Format)))));
        _Result = _vcwscanf_s_l(_Format, 0, _ArgList);
        ((void)(_ArgList = (va_list)0));
        return _Result;
    }
#line 426 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"

#line 428 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wconio.h"



} __pragma(pack(pop))
#line 16 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wctype.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {











    

#line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wctype.h"
        
    #line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wctype.h"

    __declspec(dllimport) const unsigned short* __cdecl __pctype_func(void);
    __declspec(dllimport) const wctype_t*       __cdecl __pwctype_func(void);

    



        
        
    #line 41 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wctype.h"
#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wctype.h"





















  __declspec(dllimport) int __cdecl iswalnum  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswalpha  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswascii  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswblank  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswcntrl  (  wint_t _C);


  __declspec(dllimport) int __cdecl iswdigit  (  wint_t _C);

  __declspec(dllimport) int __cdecl iswgraph  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswlower  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswprint  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswpunct  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswspace  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswupper  (  wint_t _C);
  __declspec(dllimport) int __cdecl iswxdigit (  wint_t _C);
  __declspec(dllimport) int __cdecl __iswcsymf(  wint_t _C);
  __declspec(dllimport) int __cdecl __iswcsym (  wint_t _C);

  __declspec(dllimport) int __cdecl _iswalnum_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswalpha_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswblank_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswcntrl_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswdigit_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswgraph_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswlower_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswprint_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswpunct_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswspace_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswupper_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswxdigit_l(  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswcsymf_l (  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int __cdecl _iswcsym_l  (  wint_t _C,   _locale_t _Locale);


  __declspec(dllimport) wint_t __cdecl towupper(  wint_t _C);
  __declspec(dllimport) wint_t __cdecl towlower(  wint_t _C);
  __declspec(dllimport) int    __cdecl iswctype(  wint_t _C,   wctype_t _Type);

  __declspec(dllimport) wint_t __cdecl _towupper_l(  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) wint_t __cdecl _towlower_l(  wint_t _C,   _locale_t _Locale);
  __declspec(dllimport) int    __cdecl _iswctype_l(  wint_t _C,   wctype_t _Type,   _locale_t _Locale);



      __declspec(dllimport) int __cdecl isleadbyte(  int _C);
      __declspec(dllimport) int __cdecl _isleadbyte_l(  int _C,   _locale_t _Locale);

    __declspec(deprecated("This function or variable has been superceded by newer library " "or operating system functionality. Consider using " "iswctype" " " "instead. See online help for details.")) __declspec(dllimport) int __cdecl is_wctype(  wint_t _C,   wctype_t _Type);
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wctype.h"


















































































#line 196 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wctype.h"



} __pragma(pack(pop))
#line 17 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wdirect.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {






 
   
__declspec(dllimport)  wchar_t* __cdecl _wgetcwd(
      wchar_t* _DstBuf,
                                  int      _SizeInWords
    );

 
   
__declspec(dllimport)  wchar_t* __cdecl _wgetdcwd(
                                  int      _Drive,
      wchar_t* _DstBuf,
                                  int      _SizeInWords
    );






 
__declspec(dllimport) int __cdecl _wchdir(
      wchar_t const* _Path
    );

 
__declspec(dllimport) int __cdecl _wmkdir(
      wchar_t const* _Path
    );

 
__declspec(dllimport) int __cdecl _wrmdir(
      wchar_t const* _Path
    );



} __pragma(pack(pop))
#line 18 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wio.h"








#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_share.h"








#pragma once












    
    
    
    
#line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_share.h"
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wio.h"

__pragma(pack(push, 8)) extern "C" {



#pragma warning(push)
#pragma warning(disable:4820) 
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wio.h"











    
    
#line 35 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wio.h"

typedef unsigned long _fsize_t;

struct _wfinddata32_t
{
    unsigned   attrib;
    __time32_t time_create;    
    __time32_t time_access;    
    __time32_t time_write;
    _fsize_t   size;
    wchar_t    name[260];
};

struct _wfinddata32i64_t
{
    unsigned   attrib;
    __time32_t time_create;    
    __time32_t time_access;    
    __time32_t time_write;
    __int64    size;
    wchar_t    name[260];
};

struct _wfinddata64i32_t
{
    unsigned   attrib;
    __time64_t time_create;    
    __time64_t time_access;    
    __time64_t time_write;
    _fsize_t   size;
    wchar_t    name[260];
};

struct _wfinddata64_t
{
    unsigned   attrib;
    __time64_t time_create;    
    __time64_t time_access;    
    __time64_t time_write;
    __int64    size;
    wchar_t    name[260];
};














    
    
    
    
#line 96 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wio.h"

 
__declspec(dllimport) int __cdecl _waccess(
      wchar_t const* _FileName,
        int            _AccessMode
    );


__declspec(dllimport) errno_t __cdecl _waccess_s(
      wchar_t const* _FileName,
        int            _AccessMode
    );

 
__declspec(dllimport) int __cdecl _wchmod(
      wchar_t const* _FileName,
        int            _Mode
    );

  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) int __cdecl _wcreat(
      wchar_t const* _FileName,
        int            _PermissionMode
    );

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst32(
      wchar_t const*         _FileName,
       struct _wfinddata32_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext32(
       intptr_t               _FindHandle,
      struct _wfinddata32_t* _FindData
    );

__declspec(dllimport) int __cdecl _wunlink(
      wchar_t const* _FileName
    );

 
__declspec(dllimport) int __cdecl _wrename(
      wchar_t const* _OldFileName,
      wchar_t const* _NewFileName
    );

__declspec(dllimport) errno_t __cdecl _wmktemp_s(
      wchar_t* _TemplateName,
                                 size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wmktemp_s(wchar_t (&_TemplateName)[_Size]) throw() { return _wmktemp_s(_TemplateName, _Size); } }
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wio.h"

 
__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wmktemp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) wchar_t* __cdecl _wmktemp( wchar_t *_TemplateName);
#line 160 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wio.h"

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst32i64(
      wchar_t const*            _FileName,
       struct _wfinddata32i64_t* _FindData
    );

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst64i32(
      wchar_t const*            _FileName,
       struct _wfinddata64i32_t* _FindData
    );

 
 
__declspec(dllimport) intptr_t __cdecl _wfindfirst64(
      wchar_t const*         _FileName,
       struct _wfinddata64_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext32i64(
       intptr_t                  _FindHandle,
      struct _wfinddata32i64_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext64i32(
       intptr_t                  _FindHandle,
      struct _wfinddata64i32_t* _FindData
    );

 
 
__declspec(dllimport) int __cdecl _wfindnext64(
       intptr_t               _FindHandle,
      struct _wfinddata64_t* _FindData
    );


__declspec(dllimport) errno_t __cdecl _wsopen_s(
       int*           _FileHandle,
      wchar_t const* _FileName,
        int            _OpenFlag,
        int            _ShareFlag,
        int            _PermissionFlag
    );

__declspec(dllimport) errno_t __cdecl _wsopen_dispatch(
      wchar_t const* _FileName,
        int            _OFlag,
        int            _ShFlag,
        int            _PMode,
       int*           _PFileHandle,
        int            _BSecure
    );





    
    extern "C++"   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _wopen(
          wchar_t const* _FileName,
            int            _OFlag,
            int            _PMode = 0
        )
    {
        int _FileHandle;
        
        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, 0x40, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }

    extern "C++"   __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wsopen_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
    inline int __cdecl _wsopen(
          wchar_t const* _FileName,
            int            _OFlag,
            int            _ShFlag,
            int            _PMode = 0
        )
    {
        int _FileHandle;
        
        errno_t const _Result = _wsopen_dispatch(_FileName, _OFlag, _ShFlag, _PMode, &_FileHandle, 0);
        return _Result ? -1 : _FileHandle;
    }

















#line 270 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wio.h"



#pragma warning(pop)
#line 275 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wio.h"


} __pragma(pack(pop))
#line 19 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wprocess.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {


    


    __declspec(dllimport) intptr_t __cdecl _wexecl(
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexecle(
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexeclp(
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexeclpe(
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wexecv(
          wchar_t const*        _FileName,
          wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wexecve(
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList,
          wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wexecvp(
          wchar_t const*        _FileName,
          wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wexecvpe(
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList,
          wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnl(
            int            _Mode,
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnle(
            int            _Mode,
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnlp(
            int            _Mode,
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnlpe(
            int            _Mode,
          wchar_t const* _FileName,
          wchar_t const* _ArgList,
        ...);

    __declspec(dllimport) intptr_t __cdecl _wspawnv(
            int                   _Mode,
          wchar_t const*        _FileName,
          wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnve(
                int                   _Mode,
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList,
          wchar_t const* const* _Env
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnvp(
            int                   _Mode,
          wchar_t const*        _FileName,
          wchar_t const* const* _ArgList
        );

    __declspec(dllimport) intptr_t __cdecl _wspawnvpe(
                int                   _Mode,
              wchar_t const*        _FileName,
              wchar_t const* const* _ArgList,
          wchar_t const* const* _Env
        );

    __declspec(dllimport) int __cdecl _wsystem(
          wchar_t const* _Command
        );

#line 116 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wprocess.h"



} __pragma(pack(pop))
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"



#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wtime.h"








#pragma once



__pragma(pack(push, 8)) extern "C" {








struct tm
{
    int tm_sec;   
    int tm_min;   
    int tm_hour;  
    int tm_mday;  
    int tm_mon;   
    int tm_year;  
    int tm_wday;  
    int tm_yday;  
    int tm_isdst; 
};







  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wasctime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
 
 
__declspec(dllimport) wchar_t* __cdecl _wasctime(
      struct tm const* _Tm
    );

 

__declspec(dllimport) errno_t __cdecl _wasctime_s(
        wchar_t*         _Buffer,
                                          size_t           _SizeInWords,
                                                       struct tm const* _Tm
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl _wasctime_s(  wchar_t (&_Buffer)[_Size],   struct tm const* _Time) throw() { return _wasctime_s(_Buffer, _Size, _Time); } }
#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wtime.h"

 

__declspec(dllimport) size_t __cdecl wcsftime(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm
    );

 

__declspec(dllimport) size_t __cdecl _wcsftime_l(
       wchar_t*         _Buffer,
                               size_t           _SizeInWords,
                             wchar_t const*   _Format,
                               struct tm const* _Tm,
                           _locale_t        _Locale
    );

 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime32_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wctime32(
      __time32_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime32_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time32_t const* _Time
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime32_s(  wchar_t (&_Buffer)[_Size],   __time32_t const* _Time) throw() { return _wctime32_s(_Buffer, _Size, _Time); } }
#line 100 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wtime.h"

 
 
  __declspec(deprecated("This function or variable may be unsafe. Consider using " "_wctime64_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) wchar_t* __cdecl _wctime64(
      __time64_t const* _Time
    );


__declspec(dllimport) errno_t __cdecl _wctime64_s(
        wchar_t*          _Buffer,
                                      size_t            _SizeInWords,
                                                       __time64_t const* _Time);

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wctime64_s(  wchar_t (&_Buffer)[_Size],   __time64_t const* _Time) throw() { return _wctime64_s(_Buffer, _Size, _Time); } }
#line 119 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wtime.h"


__declspec(dllimport) errno_t __cdecl _wstrdate_s(
        wchar_t* _Buffer,
                                      size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrdate_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrdate_s(_Buffer, _Size); } }
#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wtime.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrdate_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  wchar_t* __cdecl _wstrdate( wchar_t *_Buffer);
#line 135 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wtime.h"


__declspec(dllimport) errno_t __cdecl _wstrtime_s(
        wchar_t* _Buffer,
                                      size_t   _SizeInWords
    );

extern "C++" { template <size_t _Size> inline errno_t __cdecl _wstrtime_s(  wchar_t (&_Buffer)[_Size]) throw() { return _wstrtime_s(_Buffer, _Size); } }
#line 146 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wtime.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "_wstrtime_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport)  wchar_t* __cdecl _wstrtime( wchar_t *_Buffer);
#line 151 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wtime.h"









    #pragma warning(push)
    #pragma warning(disable: 4996)

    




















         
        static __inline wchar_t * __cdecl _wctime(
              time_t const* const _Time)
        {
            return _wctime64(_Time);
        }

        
        static __inline errno_t __cdecl _wctime_s(
                  wchar_t*      const _Buffer,
                                                             size_t        const _SizeInWords,
                                                             time_t const* const _Time
            )
        {
            return _wctime64_s(_Buffer, _SizeInWords, _Time);
        }

    #line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wtime.h"

    #pragma warning(pop)
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_wtime.h"



} __pragma(pack(pop))
#line 24 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"
#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\sys/stat.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\sys/types.h"







#pragma once




    

    typedef unsigned short _ino_t; 

    
        typedef _ino_t ino_t;
    #line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\sys/types.h"
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\sys/types.h"




    

    typedef unsigned int _dev_t; 

    
        typedef _dev_t dev_t;
    #line 32 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\sys/types.h"
#line 33 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\sys/types.h"




    

    typedef long _off_t; 

    
        typedef _off_t off_t;
    #line 44 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\sys/types.h"
#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\sys/types.h"
#line 12 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\sys/stat.h"

__pragma(pack(push, 8)) extern "C" {



#pragma warning(push)
#pragma warning(disable:4820) 
#line 20 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\sys/stat.h"







struct _stat32
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    _off_t         st_size;
    __time32_t     st_atime;
    __time32_t     st_mtime;
    __time32_t     st_ctime;
};

struct _stat32i64
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    __int64        st_size;
    __time32_t     st_atime;
    __time32_t     st_mtime;
    __time32_t     st_ctime;
};

struct _stat64i32
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    _off_t         st_size;
    __time64_t     st_atime;
    __time64_t     st_mtime;
    __time64_t     st_ctime;
};

struct _stat64
{
    _dev_t         st_dev;
    _ino_t         st_ino;
    unsigned short st_mode;
    short          st_nlink;
    short          st_uid;
    short          st_gid;
    _dev_t         st_rdev;
    __int64        st_size;
    __time64_t     st_atime;
    __time64_t     st_mtime;
    __time64_t     st_ctime;
};




    struct stat
    {
        _dev_t         st_dev;
        _ino_t         st_ino;
        unsigned short st_mode;
        short          st_nlink;
        short          st_uid;
        short          st_gid;
        _dev_t         st_rdev;
        _off_t         st_size;
        time_t         st_atime;
        time_t         st_mtime;
        time_t         st_ctime;
    };
#line 105 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\sys/stat.h"


















    
    
    
    
    
    
    
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\sys/stat.h"
















    
    
    
    
    
    
#line 154 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\sys/stat.h"



__declspec(dllimport) int __cdecl _fstat32(
       int             _FileHandle,
      struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat32i64(
       int                _FileHandle,
      struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64i32(
       int                _FileHandle,
      struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _fstat64(
       int             _FileHandle,
      struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _stat32(
      char const*     _FileName,
       struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _stat32i64(
      char const*        _FileName,
       struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _stat64i32(
      char const*        _FileName,
       struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _stat64(
      char const*     _FileName,
       struct _stat64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32(
      wchar_t const*  _FileName,
       struct _stat32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat32i64(
      wchar_t const*     _FileName,
       struct _stat32i64* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64i32(
      wchar_t const*     _FileName,
       struct _stat64i32* _Stat
    );

__declspec(dllimport) int __cdecl _wstat64(
      wchar_t const*  _FileName,
       struct _stat64* _Stat
    );




    















        static __inline int __cdecl fstat(int const _FileHandle, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _fstat64i32(_FileHandle, (struct _stat64i32*)_Stat);
        }
        static __inline int __cdecl stat(char const* const _FileName, struct stat* const _Stat)
        {
            typedef char __static_assert_t[(sizeof(struct stat) == sizeof(struct _stat64i32)) != 0];
            return _stat64i32(_FileName, (struct _stat64i32*)_Stat);
        }

    #line 248 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\sys/stat.h"
#line 249 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\sys/stat.h"



#pragma warning(pop)
#line 254 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\sys/stat.h"


} __pragma(pack(pop))
#line 25 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"



__pragma(pack(push, 8)) extern "C" {








typedef wchar_t _Wint_t;




__declspec(dllimport) wchar_t* __cdecl _wsetlocale(
            int            _Category,
      wchar_t const* _Locale
    );


__declspec(dllimport) _locale_t __cdecl _wcreate_locale(
        int            _Category,
      wchar_t const* _Locale
    );



__declspec(dllimport) wint_t __cdecl btowc(
      int _Ch
    );

__declspec(dllimport) size_t __cdecl mbrlen(
        char const* _Ch,
                                                size_t      _SizeInBytes,
                                             mbstate_t*  _State
    );

__declspec(dllimport) size_t __cdecl mbrtowc(
                              wchar_t*    _DstCh,
        char const* _SrcCh,
                                                size_t      _SizeInBytes,
                                             mbstate_t*  _State
    );

 
__declspec(dllimport) errno_t __cdecl mbsrtowcs_s(
                              size_t*      _Retval,
              wchar_t*     _Dst,
                                   size_t       _Size,
                      char const** _PSrc,
                                   size_t       _N,
                                mbstate_t*   _State
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl mbsrtowcs_s(  size_t* _Retval,   wchar_t (&_Dest)[_Size],     char const** _PSource,   size_t _Count,   mbstate_t* _State) throw() { return mbsrtowcs_s(_Retval, _Dest, _Size, _PSource, _Count, _State); } }
#line 91 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "mbsrtowcs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))  __declspec(dllimport) size_t __cdecl mbsrtowcs( wchar_t *_Dest,  char const** _PSrc,  size_t _Count,  mbstate_t* _State);
#line 99 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"

 
__declspec(dllimport) errno_t __cdecl wcrtomb_s(
                             size_t*    _Retval,
      char*      _Dst,
                                  size_t     _SizeInBytes,
                                  wchar_t    _Ch,
                           mbstate_t* _State
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl wcrtomb_s(  size_t* _Retval,   char (&_Dest)[_Size],   wchar_t _Source,   mbstate_t* _State) throw() { return wcrtomb_s(_Retval, _Dest, _Size, _Source, _State); } }
#line 117 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcrtomb_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcrtomb(  char *_Dest,  wchar_t _Source,  mbstate_t* _State);
#line 124 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"

 
__declspec(dllimport) errno_t __cdecl wcsrtombs_s(
                                              size_t*         _Retval,
      char*           _Dst,
                                                   size_t          _SizeInBytes,
                                wchar_t const** _Src,
                                                   size_t          _Size,
                                            mbstate_t*      _State
    );

extern "C++" { template <size_t _Size> inline   errno_t __cdecl wcsrtombs_s(  size_t* _Retval,   char (&_Dest)[_Size],     wchar_t const** _PSrc,   size_t _Count,   mbstate_t* _State) throw() { return wcsrtombs_s(_Retval, _Dest, _Size, _PSrc, _Count, _State); } }
#line 144 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"

__declspec(deprecated("This function or variable may be unsafe. Consider using " "wcsrtombs_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details.")) __declspec(dllimport) size_t __cdecl wcsrtombs(  char *_Dest,  wchar_t const** _PSource,  size_t _Count,  mbstate_t* _State);
#line 152 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"

__declspec(dllimport) int __cdecl wctob(
      wint_t _WCh
    );





    

         
        errno_t __cdecl wmemcpy_s(
              wchar_t*       _S1,
                                      rsize_t        _N1,
                        wchar_t const* _S2,
                                      rsize_t        _N
            );

         
        errno_t __cdecl wmemmove_s(
              wchar_t*       _S1,
                                      rsize_t        _N1,
                        wchar_t const* _S2,
                                      rsize_t        _N
            );

    #line 180 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"

    __inline int __cdecl fwide(
          FILE* _F,
              int   _M
        )
    {
        (void)_F;
        return (_M);
    }

    __inline int __cdecl mbsinit(
          mbstate_t const* _P
        )
    {
        return _P == 0 || _P->_Wchar == 0;
    }

    __inline wchar_t const* __cdecl wmemchr(
          wchar_t const* _S,
                    wchar_t        _C,
                    size_t         _N
        )
    {
        for (; 0 < _N; ++_S, --_N)
            if (*_S == _C)
                return (wchar_t const*)_S;

        return 0;
    }

    __inline int __cdecl wmemcmp(
          wchar_t const* _S1,
          wchar_t const* _S2,
                    size_t         _N
        )
    {
        for (; 0 < _N; ++_S1, ++_S2, --_N)
            if (*_S1 != *_S2)
                return *_S1 < *_S2 ? -1 : 1;

        return 0;
    }

     
    
    __inline 
    wchar_t* __cdecl wmemcpy(
          wchar_t*       _S1,
                wchar_t const* _S2,
                          size_t         _N
        )
    {
        #pragma warning(push)
        #pragma warning(disable : 4995 4996 6386)
        return (wchar_t*)memcpy(_S1, _S2, _N*sizeof(wchar_t));
        #pragma warning(pop)
    }

    __inline 
    wchar_t* __cdecl wmemmove(
          wchar_t*       _S1,
                wchar_t const* _S2,
                              size_t         _N
        )
    {
        #pragma warning(push)
        #pragma warning(disable : 4996 6386)
        return (wchar_t*)memmove(_S1, _S2, _N*sizeof(wchar_t));
        #pragma warning(pop)
    }

     
    
    __inline wchar_t* __cdecl wmemset(
          wchar_t* _S,
                          wchar_t  _C,
                          size_t   _N
        )
    {
        wchar_t *_Su = _S;
        for (; 0 < _N; ++_Su, --_N)
        {
            *_Su = _C;
        }
        return _S;
    }

    

        extern "C++" inline wchar_t* __cdecl wmemchr(
              wchar_t* _S,
                        wchar_t  _C,
                        size_t   _N
            )
        {
            wchar_t const* const _SC = _S;
            return const_cast<wchar_t*>(wmemchr(_SC, _C, _N));
        }

    #line 280 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"

#line 282 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\wchar.h"



} __pragma(pack(pop))
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"

typedef mbstate_t _Mbstatet;

 
namespace std {
using :: _Mbstatet;

using :: mbstate_t; using :: size_t; using :: tm; using :: wint_t;

using :: btowc; using :: fgetwc; using :: fgetws; using :: fputwc;
using :: fputws; using :: fwide; using :: fwprintf;
using :: fwscanf; using :: getwc; using :: getwchar;
using :: mbrlen; using :: mbrtowc; using :: mbsrtowcs;
using :: mbsinit; using :: putwc; using :: putwchar;
using :: swprintf; using :: swscanf; using :: ungetwc;
using :: vfwprintf; using :: vswprintf; using :: vwprintf;
using :: wcrtomb; using :: wprintf; using :: wscanf;
using :: wcsrtombs; using :: wcstol; using :: wcscat;
using :: wcschr; using :: wcscmp; using :: wcscoll;
using :: wcscpy; using :: wcscspn; using :: wcslen;
using :: wcsncat; using :: wcsncmp; using :: wcsncpy;
using :: wcspbrk; using :: wcsrchr; using :: wcsspn;
using :: wcstod; using :: wcstoul; using :: wcsstr;
using :: wcstok; using :: wcsxfrm; using :: wctob;
using :: wmemchr; using :: wmemcmp; using :: wmemcpy;
using :: wmemmove; using :: wmemset; using :: wcsftime;

using :: vfwscanf; using :: vswscanf; using :: vwscanf;
using :: wcstof; using :: wcstold;
using :: wcstoll; using :: wcstoull;
}
 #line 47 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"

#line 49 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cwchar"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\crtdbg.h"







#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"


extern "C++" {

#pragma pack(push, 8)

#pragma warning(push)
#pragma warning(disable: 4985) 






    namespace std
    {
        struct nothrow_t { };

        extern nothrow_t const nothrow;
    }
#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"

   
__declspec(allocator) void* __cdecl operator new(
    size_t _Size
    );

     
__declspec(allocator) void* __cdecl operator new(
    size_t                _Size,
    std::nothrow_t const&
    ) throw();

   
__declspec(allocator) void* __cdecl operator new[](
    size_t _Size
    );

     
__declspec(allocator) void* __cdecl operator new[](
    size_t                _Size,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void* _Block
    ) throw();

void __cdecl operator delete(
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete[](
    void* _Block
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    std::nothrow_t const&
    ) throw();

void __cdecl operator delete(
    void*  _Block,
    size_t _Size
    ) throw();

void __cdecl operator delete[](
    void* _Block,
    size_t _Size
    ) throw();


    
       
    inline void* __cdecl operator new(size_t _Size,   void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete(void*, void*) throw()
    {
        return;
    }
#line 97 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"


    
       
    inline void* __cdecl operator new[](size_t _Size,   void* _Where) throw()
    {
        (void)_Size;
        return _Where;
    }

    inline void __cdecl operator delete[](void*, void*) throw()
    {
    }
#line 111 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"



#pragma warning(pop)
#pragma pack(pop)

} 
#line 119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new.h"
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"


extern "C++" {

#pragma pack(push, 8)






         
    __declspec(allocator) void* __cdecl operator new(
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

         
    __declspec(allocator) void* __cdecl operator new[](
            size_t      _Size,
            int         _BlockUse,
          char const* _FileName,
            int         _LineNumber
        );

    void __cdecl operator delete(
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) throw();

    void __cdecl operator delete[](
        void*       _Block,
        int         _BlockUse,
        char const* _FileName,
        int         _LineNumber
        ) throw();

#line 53 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"



#pragma pack(pop)

} 
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_new_debug.h"
#line 13 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\crtdbg.h"

__pragma(pack(push, 8)) extern "C" {



typedef void* _HFILE; 

























typedef int (__cdecl* _CRT_REPORT_HOOK )(int, char*,    int*);
typedef int (__cdecl* _CRT_REPORT_HOOKW)(int, wchar_t*, int*);





typedef int (__cdecl* _CRT_ALLOC_HOOK)(int, void*, size_t, int, long, unsigned char const*, int);























































typedef void (__cdecl* _CRT_DUMP_CLIENT)(void*, size_t);





struct _CrtMemBlockHeader;

typedef struct _CrtMemState
{
    struct _CrtMemBlockHeader* pBlockHeader;
    size_t lCounts[5];
    size_t lSizes[5];
    size_t lHighWaterCount;
    size_t lTotalCount;
} _CrtMemState;



    
    

    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
























































































#line 234 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\crtdbg.h"










    
    
    
    
    
    
    

    
    
    
    
    
    
    
    

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    

















































































































































































































































































































#line 585 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\crtdbg.h"











    
    
    
    
    
    
    

















































































#line 685 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\crtdbg.h"











    

    
        
    #line 701 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\crtdbg.h"

    
        
    #line 705 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\crtdbg.h"

    
        
    #line 709 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\crtdbg.h"

    
    

    
    

    
    

    
    












































#line 766 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\crtdbg.h"













    
#line 781 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\crtdbg.h"



























} __pragma(pack(pop))

#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		

typedef _Longlong streamoff;
typedef _Longlong streamsize;

  
  

  



extern __declspec(dllimport)  const streamoff _BADOFF;
  #line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"

		
template<class _Statetype>
	class fpos
	{	
	typedef fpos<_Statetype> _Myt;

public:
	 fpos(streamoff _Off = 0)
		: _Myoff(_Off), _Fpos(0), _Mystate()
		{	
		}

	 fpos(_Statetype _State, fpos_t _Fileposition)
		: _Myoff(0), _Fpos(_Fileposition), _Mystate(_State)
		{	
		}

	_Statetype  state() const
		{	
		return (_Mystate);
		}

	void  state(_Statetype _State)
		{	
		_Mystate = _State;
		}

	fpos_t  seekpos() const
		{	
		return (_Fpos);
		}

	 operator streamoff() const
		{	
		return ((streamoff)(_Myoff + ((long long)(_Fpos))));
		}

	streamoff  operator-(const _Myt& _Right) const
		{	
		return ((streamoff)*this - (streamoff)_Right);
		}

	_Myt&  operator+=(streamoff _Off)
		{	
		_Myoff += _Off;
		return (*this);
		}

	_Myt&  operator-=(streamoff _Off)
		{	
		_Myoff -= _Off;
		return (*this);
		}

	_Myt  operator+(streamoff _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myt  operator-(streamoff _Off) const
		{	
		_Myt _Tmp = *this;
		return (_Tmp -= _Off);
		}

	bool  operator==(const _Myt& _Right) const
		{	
		return ((streamoff)*this == (streamoff)_Right);
		}

	bool  operator==(streamoff _Right) const
		{	
		return ((streamoff)*this == _Right);
		}

	bool  operator!=(const _Myt& _Right) const
		{	
		return (!(*this == _Right));
		}

private:
	streamoff _Myoff;	
	fpos_t _Fpos;	
	_Statetype _Mystate;	
	};

 

 
 

typedef fpos<_Mbstatet> streampos;

typedef streampos wstreampos;

		
template<class _Elem,
	class _Int_type>
	struct _Char_traits
	{	
	typedef _Elem char_type;
	typedef _Int_type int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(
		  const _Elem *_First1,
		  const _Elem *_First2, size_t _Count)
		{	
		for (; 0 < _Count; --_Count, ++_First1, ++_First2)
			if (!eq(*_First1, *_First2))
				return (lt(*_First1, *_First2) ? -1 : +1);
		return (0);
		}

	static size_t __cdecl length(  const _Elem *_First)
		{	
		size_t _Count;
		for (_Count = 0; !eq(*_First, _Elem()); ++_First)
			++_Count;
		return (_Count);
		}

	static _Elem *__cdecl copy(
		  _Elem *_First1,
		  const _Elem *_First2, size_t _Count)
		{	
		_Elem *_Next = _First1;
		for (; 0 < _Count; --_Count, ++_Next, ++_First2)
			assign(*_Next, *_First2);
		return (_First1);
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Dest_size,
		  const _Elem *_First2, size_t _Count)
		{	
		{ if (!(_Count <= _Dest_size)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); return (0); } };
		return (copy(_First1, _First2, _Count));
		}

	static const _Elem *__cdecl find(
		  const _Elem *_First,
		size_t _Count, const _Elem& _Ch)
		{	
		for (; 0 < _Count; --_Count, ++_First)
			if (eq(*_First, _Ch))
				return (_First);
		return (0);
		}

	static _Elem *__cdecl move(
		  _Elem *_First1,
		  const _Elem *_First2, size_t _Count)
		{	
		_Elem *_Next = _First1;
		if (_First2 < _Next && _Next < _First2 + _Count)
			for (_Next += _Count, _First2 += _Count; 0 < _Count; --_Count)
				assign(*--_Next, *--_First2);
		else
			for (; 0 < _Count; --_Count, ++_Next, ++_First2)
				assign(*_Next, *_First2);
		return (_First1);
		}

	static _Elem *__cdecl assign(
		  _Elem *_First,
		size_t _Count, _Elem _Ch)
		{	
		_Elem *_Next = _First;
		for (; 0 < _Count; --_Count, ++_Next)
			assign(*_Next, _Ch);
		return (_First);
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
		{	
		_Left = _Right;
		}

	static constexpr bool __cdecl eq(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr bool __cdecl lt(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left < _Right);
		}

	static constexpr _Elem __cdecl to_char_type(
		const int_type& _Meta) noexcept
		{	
		return ((_Elem)_Meta);
		}

	static constexpr int_type __cdecl to_int_type(
		const _Elem& _Ch) noexcept
		{	
		return ((int_type)_Ch);
		}

	static constexpr bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr int_type __cdecl not_eof(
		const int_type& _Meta) noexcept
		{	
		return (_Meta != eof() ? (int_type)_Meta : (int_type)!eof());
		}

	static constexpr int_type __cdecl eof() noexcept
		{	
		return ((int_type)(-1));
		}
	};

		
template<class _Elem>
	struct char_traits
		: public _Char_traits<_Elem, long>
	{	
	};

		
template<>
	struct char_traits<char16_t>
	: public _Char_traits<char16_t, unsigned short>
	{	
	};

typedef streampos u16streampos;

		
template<>
	struct char_traits<char32_t>
	: public _Char_traits<char32_t, unsigned int>
	{	
	};

typedef streampos u32streampos;

		
template<>
	struct char_traits<wchar_t>
	{	
	typedef wchar_t _Elem;
	typedef _Elem char_type;	
	typedef wint_t int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? 0
			: :: wmemcmp(_First1, _First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (*_First == 0 ? 0
			: :: wcslen(_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: wmemcpy(_First1, _First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_words,
		  const _Elem *_First2, size_t _Count)
		{	
		if (0 < _Count)
			::wmemcpy_s((_First1), (_Size_in_words), (_First2), (_Count));
		return (_First1);
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return (_Count == 0 ? (const _Elem *)0
			: (const _Elem *):: wmemchr(_First, _Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: wmemmove(_First1, _First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
		_Elem _Ch)
		{	
		return ((_Elem *):: wmemset(_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
		{	
		_Left = _Right;
		}

	static constexpr bool __cdecl eq(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr bool __cdecl lt(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left < _Right);
		}

	static constexpr _Elem __cdecl to_char_type(
		const int_type& _Meta) noexcept
		{	
		return (_Meta);
		}

	static constexpr int_type __cdecl to_int_type(
		const _Elem& _Ch) noexcept
		{	
		return (_Ch);
		}

	static constexpr bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr int_type __cdecl not_eof(
		const int_type& _Meta) noexcept
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static constexpr int_type __cdecl eof() noexcept
		{	
		return (((wint_t)(0xFFFF)));
		}
	};

 
		
template<>
	struct char_traits<unsigned short>
	{	
	typedef unsigned short _Elem;
	typedef _Elem char_type;	
	typedef wint_t int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? 0
			: :: wmemcmp((const wchar_t *)_First1,
				(const wchar_t *)_First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (*_First == 0 ? 0
			: :: wcslen((const wchar_t *)_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: wmemcpy((wchar_t *)_First1,
				(const wchar_t *)_First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_words,
		  const _Elem *_First2, size_t _Count)
		{	
		if (0 < _Count)
			::wmemcpy_s(((wchar_t *)_First1), (_Size_in_words), ((const wchar_t *)_First2), (_Count));
#line 431 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
		return (_First1);
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return (_Count == 0 ? (const _Elem *)0
			: (const _Elem *):: wmemchr((const wchar_t *)_First,
				_Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: wmemmove((wchar_t *)_First1,
				(const wchar_t *)_First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
		_Elem _Ch)
		{	
		return ((_Elem *):: wmemset((wchar_t *)_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
		{	
		_Left = _Right;
		}

	static constexpr bool __cdecl eq(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr bool __cdecl lt(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left < _Right);
		}

	static constexpr _Elem __cdecl to_char_type(const int_type& _Meta)
		noexcept
		{	
		return (_Meta);
		}

	static constexpr int_type __cdecl to_int_type(const _Elem& _Ch)
		noexcept
		{	
		return (_Ch);
		}

	static constexpr bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr int_type __cdecl not_eof(const int_type& _Meta)
		noexcept
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static constexpr int_type __cdecl eof() noexcept
		{	
		return (((wint_t)(0xFFFF)));
		}
	};
 #line 503 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"

		
template<> struct char_traits<char>
	{	
	typedef char _Elem;
	typedef _Elem char_type;
	typedef int int_type;
	typedef streampos pos_type;
	typedef streamoff off_type;
	typedef _Mbstatet state_type;

	static int __cdecl compare(const _Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? 0
			: :: memcmp(_First1, _First2, _Count));
		}

	static size_t __cdecl length(const _Elem *_First)
		{	
		return (*_First == 0 ? 0
			: :: strlen(_First));
		}

	static _Elem *__cdecl copy(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: memcpy(_First1, _First2, _Count));
		}

	static _Elem *__cdecl _Copy_s(
		  _Elem *_First1, size_t _Size_in_bytes,
		  const _Elem *_First2, size_t _Count)
		{	
		if (0 < _Count)
			::memcpy_s((_First1), (_Size_in_bytes), (_First2), (_Count));
		return (_First1);
		}

	static const _Elem *__cdecl find(const _Elem *_First, size_t _Count,
		const _Elem& _Ch)
		{	
		return (_Count == 0 ? (const _Elem *)0
			: (const _Elem *):: memchr(_First, _Ch, _Count));
		}

	static _Elem *__cdecl move(_Elem *_First1, const _Elem *_First2,
		size_t _Count)
		{	
		return (_Count == 0 ? _First1
			: (_Elem *):: memmove(_First1, _First2, _Count));
		}

	static _Elem *__cdecl assign(_Elem *_First, size_t _Count,
		_Elem _Ch)
		{	
		return ((_Elem *):: memset(_First, _Ch, _Count));
		}

	static void __cdecl assign(_Elem& _Left, const _Elem& _Right) noexcept
		{	
		_Left = _Right;
		}

	static constexpr bool __cdecl eq(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr bool __cdecl lt(const _Elem& _Left,
		const _Elem& _Right) noexcept
		{	
		return ((unsigned char)_Left < (unsigned char)_Right);
		}

	static constexpr _Elem __cdecl to_char_type(
		const int_type& _Meta) noexcept
		{	
		return ((_Elem)_Meta);
		}

	static constexpr int_type __cdecl to_int_type(
		const _Elem& _Ch) noexcept
		{	
		return ((unsigned char)_Ch);
		}

	static constexpr bool __cdecl eq_int_type(const int_type& _Left,
		const int_type& _Right) noexcept
		{	
		return (_Left == _Right);
		}

	static constexpr int_type __cdecl not_eof(
		const int_type& _Meta) noexcept
		{	
		return (_Meta != eof() ? _Meta : !eof());
		}

	static constexpr int_type __cdecl eof() noexcept
		{	
		return ((-1));
		}
	};

		
template<class _Ty>
	class allocator;
class ios_base;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ios;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class istreambuf_iterator;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class ostreambuf_iterator;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_streambuf;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_istream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ostream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_iostream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_stringbuf;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_istringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_ostringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem>,
	class _Alloc = allocator<_Elem> >
	class basic_stringstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_filebuf;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ifstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_ofstream;
template<class _Elem,
	class _Traits = char_traits<_Elem> >
	class basic_fstream;

 
template<class _Elem,
	class _InIt >
	class num_get;
template<class _Elem,
	class _OutIt >
	class num_put;
template<class _Elem>
	class collate;
 #line 674 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"

		
typedef basic_ios<char, char_traits<char> > ios;
typedef basic_streambuf<char, char_traits<char> > streambuf;
typedef basic_istream<char, char_traits<char> > istream;
typedef basic_ostream<char, char_traits<char> > ostream;
typedef basic_iostream<char, char_traits<char> > iostream;
typedef basic_stringbuf<char, char_traits<char>,
	allocator<char> > stringbuf;
typedef basic_istringstream<char, char_traits<char>,
	allocator<char> > istringstream;
typedef basic_ostringstream<char, char_traits<char>,
	allocator<char> > ostringstream;
typedef basic_stringstream<char, char_traits<char>,
	allocator<char> > stringstream;
typedef basic_filebuf<char, char_traits<char> > filebuf;
typedef basic_ifstream<char, char_traits<char> > ifstream;
typedef basic_ofstream<char, char_traits<char> > ofstream;
typedef basic_fstream<char, char_traits<char> > fstream;

		
typedef basic_ios<wchar_t, char_traits<wchar_t> > wios;
typedef basic_streambuf<wchar_t, char_traits<wchar_t> >
	wstreambuf;
typedef basic_istream<wchar_t, char_traits<wchar_t> > wistream;
typedef basic_ostream<wchar_t, char_traits<wchar_t> > wostream;
typedef basic_iostream<wchar_t, char_traits<wchar_t> > wiostream;
typedef basic_stringbuf<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wstringbuf;
typedef basic_istringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wistringstream;
typedef basic_ostringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wostringstream;
typedef basic_stringstream<wchar_t, char_traits<wchar_t>,
	allocator<wchar_t> > wstringstream;
typedef basic_filebuf<wchar_t, char_traits<wchar_t> > wfilebuf;
typedef basic_ifstream<wchar_t, char_traits<wchar_t> > wifstream;
typedef basic_ofstream<wchar_t, char_traits<wchar_t> > wofstream;
typedef basic_fstream<wchar_t, char_traits<wchar_t> > wfstream;

 





















 
typedef num_get<char, istreambuf_iterator<char, char_traits<char> > >
	numget;
typedef num_get<wchar_t, istreambuf_iterator<wchar_t, char_traits<wchar_t> > >
	wnumget;
typedef num_put<char, ostreambuf_iterator<char, char_traits<char> > >
	numput;
typedef num_put<wchar_t, ostreambuf_iterator<wchar_t, char_traits<wchar_t> > >
	wnumput;
typedef collate<char> ncollate;
typedef collate<wchar_t> wcollate;
 #line 748 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 754 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"
#line 755 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\iosfwd"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"


 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4180 4512)

namespace std {
		
template<class _FwdIt1,
	class _FwdIt2> inline
	void iter_swap(_FwdIt1 _Left, _FwdIt2 _Right)
	{	
	swap(*_Left, *_Right);
	}

		
template<class _Ty,
	size_t _Size,
	class> inline
	void swap(_Ty (&_Left)[_Size], _Ty (&_Right)[_Size])
		noexcept(_Is_nothrow_swappable<_Ty>::value)
	{	
	if (&_Left != &_Right)
		{	
		_Ty *_First1 = _Left;
		_Ty *_Last1 = _First1 + _Size;
		_Ty *_First2 = _Right;
		for (; _First1 != _Last1; ++_First1, ++_First2)
			::std:: iter_swap(_First1, _First2);
		}
	}

template<class _Ty,
	class> inline
	void swap(_Ty& _Left, _Ty& _Right)
		noexcept(is_nothrow_move_constructible<_Ty>::value && is_nothrow_move_assignable<_Ty>::value)
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
	{	
	_Ty _Tmp = ::std:: move(_Left);
	_Left = ::std:: move(_Right);
	_Right = ::std:: move(_Tmp);
	}

		
template<class _Ty> inline
	void _Swap_adl(_Ty& _Left, _Ty& _Right)
		noexcept(_Is_nothrow_swappable<_Ty>::value)
	{	
	swap(_Left, _Right);
	}

		
struct piecewise_construct_t
	{	
	};

constexpr piecewise_construct_t piecewise_construct{};

		
template<class...>
	class tuple;

template<class _Ty1,
	class _Ty2>
	struct pair
	{	
	typedef pair<_Ty1, _Ty2> _Myt;
	typedef _Ty1 first_type;
	typedef _Ty2 second_type;

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		class = enable_if_t<is_default_constructible<_Uty1>::value
						&& is_default_constructible<_Uty2>::value> >
		constexpr pair()
		: first(), second()
		{	
		}

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		class = enable_if_t<is_copy_constructible<_Uty1>::value
						&& is_copy_constructible<_Uty2>::value>,
		enable_if_t<is_convertible<const _Uty1&, _Uty1>::value
				&& is_convertible<const _Uty2&, _Uty2>::value, int> = 0>
		constexpr pair(const _Ty1& _Val1, const _Ty2& _Val2)
		: first(_Val1), second(_Val2)
		{	
		}

	template<class _Uty1 = _Ty1,
		class _Uty2 = _Ty2,
		class = enable_if_t<is_copy_constructible<_Uty1>::value
						&& is_copy_constructible<_Uty2>::value>,
		enable_if_t<!is_convertible<const _Uty1&, _Uty1>::value
				|| !is_convertible<const _Uty2&, _Uty2>::value, int> = 0>
		constexpr explicit pair(const _Ty1& _Val1, const _Ty2& _Val2)
		: first(_Val1), second(_Val2)
		{	
		}

	pair(const pair&) = default;
	pair(pair&&) = default;

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, const _Other1&>::value
						&& is_constructible<_Ty2, const _Other2&>::value>,
		enable_if_t<is_convertible<const _Other1&, _Ty1>::value
				&& is_convertible<const _Other2&, _Ty2>::value, int> = 0>
		constexpr pair(const pair<_Other1, _Other2>& _Right)
		: first(_Right.first), second(_Right.second)
		{	
		}

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, const _Other1&>::value
						&& is_constructible<_Ty2, const _Other2&>::value>,
		enable_if_t<!is_convertible<const _Other1&, _Ty1>::value
				|| !is_convertible<const _Other2&, _Ty2>::value, int> = 0>
		constexpr explicit pair(const pair<_Other1, _Other2>& _Right)
		: first(_Right.first), second(_Right.second)
		{	
		}

	template<class _Other1,
		class _Other2>
		_Myt& operator=(const pair<_Other1, _Other2>& _Right)
		{	
		first = _Right.first;
		second = _Right.second;
		return (*this);
		}

	template<class _Tuple1,
		class _Tuple2,
		size_t... _Indexes1,
		size_t... _Indexes2> inline
		pair(_Tuple1& _Val1,
			_Tuple2& _Val2,
			integer_sequence<size_t, _Indexes1...>,
			integer_sequence<size_t, _Indexes2...>);

	template<class... _Types1,
		class... _Types2> inline
		pair(piecewise_construct_t,
			tuple<_Types1...> _Val1,
			tuple<_Types2...> _Val2);

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, _Other1>::value
						&& is_constructible<_Ty2, _Other2>::value>,
		enable_if_t<is_convertible<_Other1, _Ty1>::value
				&& is_convertible<_Other2, _Ty2>::value, int> = 0>
		constexpr pair(_Other1&& _Val1, _Other2&& _Val2)
			noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))
#line 170 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
		: first(::std:: forward<_Other1>(_Val1)),
				second(::std:: forward<_Other2>(_Val2))
		{	
		}

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, _Other1>::value
						&& is_constructible<_Ty2, _Other2>::value>,
		enable_if_t<!is_convertible<_Other1, _Ty1>::value
				|| !is_convertible<_Other2, _Ty2>::value, int> = 0>
		constexpr explicit pair(_Other1&& _Val1, _Other2&& _Val2)
			noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))
#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
		: first(::std:: forward<_Other1>(_Val1)),
				second(::std:: forward<_Other2>(_Val2))
		{	
		}

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, _Other1>::value
						&& is_constructible<_Ty2, _Other2>::value>,
		enable_if_t<is_convertible<_Other1, _Ty1>::value
				&& is_convertible<_Other2, _Ty2>::value, int> = 0>
		constexpr pair(pair<_Other1, _Other2>&& _Right)
			noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))
#line 198 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
		: first(::std:: forward<_Other1>(_Right.first)),
			second(::std:: forward<_Other2>(_Right.second))
		{	
		}

	template<class _Other1,
		class _Other2,
		class = enable_if_t<is_constructible<_Ty1, _Other1>::value
						&& is_constructible<_Ty2, _Other2>::value>,
		enable_if_t<!is_convertible<_Other1, _Ty1>::value
				|| !is_convertible<_Other2, _Ty2>::value, int> = 0>
		constexpr explicit pair(pair<_Other1, _Other2>&& _Right)
			noexcept((is_nothrow_constructible<_Ty1, _Other1>::value && is_nothrow_constructible<_Ty2, _Other2>::value))
#line 212 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
		: first(::std:: forward<_Other1>(_Right.first)),
			second(::std:: forward<_Other2>(_Right.second))
		{	
		}

	template<class _Other1,
		class _Other2>
		_Myt& operator=(pair<_Other1, _Other2>&& _Right)
		{	
		first = ::std:: forward<_Other1>(_Right.first);
		second = ::std:: forward<_Other2>(_Right.second);
		return (*this);
		}

	_Myt& operator=(_Myt&& _Right)
		noexcept((is_nothrow_move_assignable<_Ty1>::value && is_nothrow_move_assignable<_Ty2>::value))
#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
		{	
		first = ::std:: forward<_Ty1>(_Right.first);
		second = ::std:: forward<_Ty2>(_Right.second);
		return (*this);
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		first = _Right.first;
		second = _Right.second;
		return (*this);
		}

	_Ty1 first;		
	_Ty2 second;	

	void swap(_Myt& _Right)
		noexcept(_Is_nothrow_swappable<_Ty1>::value && _Is_nothrow_swappable<_Ty2>::value)
#line 248 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
		{	
		if (this != &_Right)
			{	
			_Swap_adl(first, _Right.first);
			_Swap_adl(second, _Right.second);
			}
		}
	};

		

template<class _Ty1,
	class _Ty2,
	class = enable_if_t<_Is_swappable<_Ty1>::value && _Is_swappable<_Ty2>::value>> inline
	void swap(pair<_Ty1, _Ty2>& _Left, pair<_Ty1, _Ty2>& _Right)
		noexcept(noexcept(_Left.swap(_Right)))
	{	
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator==(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Left.first == _Right.first && _Left.second == _Right.second);
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator!=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator<(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Left.first < _Right.first ||
		(!(_Right.first < _Left.first) && _Left.second < _Right.second));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator>(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator<=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr bool operator>=(const pair<_Ty1, _Ty2>& _Left,
		const pair<_Ty1, _Ty2>& _Right)
	{	
	return (!(_Left < _Right));
	}

	

template<class _Ty1,
	class _Ty2> inline
	constexpr pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type>
		make_pair(_Ty1&& _Val1, _Ty2&& _Val2)
	{	
	typedef pair<typename _Unrefwrap<_Ty1>::type,
		typename _Unrefwrap<_Ty2>::type> _Mypair;
	return (_Mypair(::std:: forward<_Ty1>(_Val1),
		::std:: forward<_Ty2>(_Val2)));
	}

		
	namespace rel_ops
		{	
template<class _Ty> inline
	bool operator!=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty> inline
	bool operator>(const _Ty& _Left, const _Ty& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty> inline
	bool operator<=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty> inline
	bool operator>=(const _Ty& _Left, const _Ty& _Right)
	{	
	return (!(_Left < _Right));
	}
		}
}

namespace std {
template<class _Ty,
	size_t _Size>
	class array;

	
template<class _Tuple>
	struct tuple_size;

template<class _Ty,
	size_t _Size>
	struct tuple_size<array<_Ty, _Size> >
		: integral_constant<size_t, _Size>
	{	
	};

template<class _Ty1,
	class _Ty2>
	struct tuple_size<pair<_Ty1, _Ty2> >
	: integral_constant<size_t, 2>
	{	
	};

template<class... _Types>
	struct tuple_size<tuple<_Types...> >
	: integral_constant<size_t, sizeof...(_Types)>
	{	
	};


template<class _Tuple>
	struct tuple_size<const _Tuple>
	: tuple_size<_Tuple>
	{	
	};

template<class _Tuple>
	struct tuple_size<volatile _Tuple>
	: tuple_size<_Tuple>
	{	
	};

template<class _Tuple>
	struct tuple_size<const volatile _Tuple>
	: tuple_size<_Tuple>
	{	
	};

 


#line 412 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"

	
template<size_t _Index,
	class _Tuple>
	struct tuple_element;

template<size_t _Idx,
	class _Ty,
	size_t _Size>
	struct tuple_element<_Idx, array<_Ty, _Size> >
	{	
	static_assert(_Idx < _Size, "array index out of bounds");

	typedef _Ty type;
	};

template<class _Ty1,
	class _Ty2>
	struct tuple_element<0, pair<_Ty1, _Ty2> >
	{	
	typedef _Ty1 type;
	};

template<class _Ty1,
	class _Ty2>
	struct tuple_element<1, pair<_Ty1, _Ty2> >
	{	
	typedef _Ty2 type;
	};

template<size_t _Index>
	struct tuple_element<_Index, tuple<> >
	{	
	static_assert(_Always_false<integral_constant<size_t, _Index> >::value,
		"tuple index out of bounds");
	};

template<class _This,
	class... _Rest>
	struct tuple_element<0, tuple<_This, _Rest...> >
	{	
	typedef _This type;
	typedef tuple<_This, _Rest...> _Ttype;
	};

template<size_t _Index,
	class _This,
	class... _Rest>
	struct tuple_element<_Index, tuple<_This, _Rest...> >
		: public tuple_element<_Index - 1, tuple<_Rest...> >
	{	
	};


template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, const _Tuple>
		: public tuple_element<_Index, _Tuple>
	{	
	typedef tuple_element<_Index, _Tuple> _Mybase;
	typedef typename add_const<typename _Mybase::type>::type type;
	};

template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, volatile _Tuple>
		: public tuple_element<_Index, _Tuple>
	{	
	typedef tuple_element<_Index, _Tuple> _Mybase;
	typedef typename add_volatile<typename _Mybase::type>::type type;
	};

template<size_t _Index,
	class _Tuple>
	struct tuple_element<_Index, const volatile _Tuple>
		: public tuple_element<_Index, _Tuple>
	{	
	typedef tuple_element<_Index, _Tuple> _Mybase;
	typedef typename add_cv<typename _Mybase::type>::type type;
	};

template<size_t _Index,
	class _Tuple>
	using tuple_element_t = typename tuple_element<_Index, _Tuple>::type;

	
template<class _Ret,
	class _Pair> inline
	constexpr _Ret _Pair_get(_Pair& _Pr,
		integral_constant<size_t, 0>) noexcept
	{	
	return (_Pr.first);
	}

template<class _Ret,
	class _Pair> inline
	constexpr _Ret _Pair_get(_Pair& _Pr,
		integral_constant<size_t, 1>) noexcept
	{	
	return (_Pr.second);
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2> inline
	constexpr typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
		get(pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	typedef typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type& _Rtype;
	return (_Pair_get<_Rtype>(_Pr, integral_constant<size_t, _Idx>()));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr _Ty1& get(pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<0>(_Pr));
	}

template<class _Ty2,
	class _Ty1> inline
	constexpr _Ty2& get(pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<1>(_Pr));
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2> inline
	constexpr const typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
		get(const pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	typedef const typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&
		_Ctype;
	return (_Pair_get<_Ctype>(_Pr, integral_constant<size_t, _Idx>()));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr const _Ty1& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<0>(_Pr));
	}

template<class _Ty2,
	class _Ty1> inline
	constexpr const _Ty2& get(const pair<_Ty1, _Ty2>& _Pr) noexcept
	{	
	return (::std:: get<1>(_Pr));
	}

template<size_t _Idx,
	class _Ty1,
	class _Ty2> inline
	constexpr typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&&
		get(pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	typedef typename tuple_element<_Idx, pair<_Ty1, _Ty2> >::type&& _RRtype;
	return (::std:: forward<_RRtype>(::std:: get<_Idx>(_Pr)));
	}

template<class _Ty1,
	class _Ty2> inline
	constexpr _Ty1&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	return (::std:: get<0>(::std:: move(_Pr)));
	}

template<class _Ty2,
	class _Ty1> inline
	constexpr _Ty2&& get(pair<_Ty1, _Ty2>&& _Pr) noexcept
	{	
	return (::std:: get<1>(::std:: move(_Pr)));
	}

	
template<class _Ty,
	class _Other = _Ty> inline
	_Ty exchange(_Ty& _Val, _Other&& _New_val)
	{	
	_Ty _Old_val = ::std:: move(_Val);
	_Val = ::std:: forward<_Other>(_New_val);
	return (_Old_val);
	}

	
template<class _Ty> inline
	constexpr add_const_t<_Ty>& as_const(_Ty& _Val) noexcept
	{	
	return (_Val);
	}

template<class _Ty>
	void as_const(const _Ty&&) = delete;
}


namespace std {
namespace tr1 {	
using ::std:: get;
using ::std:: tuple_element;
using ::std:: tuple_size;
}	
}
#line 617 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 622 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"
#line 623 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\utility"





#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
		

 












#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
  
 #line 34 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
struct _Container_proxy;
struct _Container_base12;
struct _Iterator_base12;

struct _Container_base0
	{	
	void _Orphan_all()
		{	
		}

	void _Swap_all(_Container_base0&)
		{	
		}
	};

struct _Iterator_base0
	{	
	void _Adopt(const void *)
		{	
		}

	const _Container_base0 *_Getcont() const
		{	
		return (0);
		}
	};

		
struct _Container_proxy
	{	
	_Container_proxy()
		: _Mycont(0), _Myfirstiter(0)
		{	
		}

	const _Container_base12 *_Mycont;
	_Iterator_base12 *_Myfirstiter;
	};

struct _Container_base12
	{	
public:
	_Container_base12()
		: _Myproxy(0)
		{	
		}

	_Container_base12(const _Container_base12&)
		: _Myproxy(0)
		{	
		}

	_Container_base12& operator=(const _Container_base12&)
		{	
		return (*this);
		}

	~_Container_base12() noexcept
		{	
		_Orphan_all();
		}

	_Iterator_base12 **_Getpfirst() const
		{	
		return (_Myproxy == 0 ? 0 : &_Myproxy->_Myfirstiter);
		}

	void _Orphan_all();	
	void _Swap_all(_Container_base12&);	

	_Container_proxy *_Myproxy;
	};

struct _Iterator_base12
	{	
public:
	_Iterator_base12()
		: _Myproxy(0), _Mynextiter(0)
		{	
		}

	_Iterator_base12(const _Iterator_base12& _Right)
		: _Myproxy(0), _Mynextiter(0)
		{	
		*this = _Right;
		}

	_Iterator_base12& operator=(const _Iterator_base12& _Right)
		{	
		if (_Myproxy == _Right._Myproxy)
			;
		else if (_Right._Myproxy != 0)
			_Adopt(_Right._Myproxy->_Mycont);
		else
			{	
 


#line 135 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
			}

		return (*this);
		}

	~_Iterator_base12() noexcept
		{	
 


#line 146 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
		}

	void _Adopt(const _Container_base12 *_Parent)
		{	
		if (_Parent == 0)
			{	
 


#line 156 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
			}
		else
			{	
			_Container_proxy *_Parent_proxy = _Parent->_Myproxy;

 









#line 172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
			_Myproxy = _Parent_proxy;
 #line 174 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
			}
		}

	void _Clrcont()
		{	
		_Myproxy = 0;
		}

	const _Container_base12 *_Getcont() const
		{	
		return (_Myproxy == 0 ? 0 : _Myproxy->_Mycont);
		}

	_Iterator_base12 **_Getpnext()
		{	
		return (&_Mynextiter);
		}

	void _Orphan_me()
		{	
 











#line 207 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
		}

	_Container_proxy *_Myproxy;
	_Iterator_base12 *_Mynextiter;
	};

		
inline void _Container_base12::_Orphan_all()
	{	
 









#line 227 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
	}

inline void _Container_base12::_Swap_all(_Container_base12& _Right)
	{	
 

#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

	_Container_proxy *_Temp = _Myproxy;
	_Myproxy = _Right._Myproxy;
	_Right._Myproxy = _Temp;

	if (_Myproxy != 0)
		_Myproxy->_Mycont = (_Container_base12 *)this;
	if (_Right._Myproxy != 0)
		_Right._Myproxy->_Mycont = (_Container_base12 *)&_Right;
	}

 
typedef _Container_base0 _Container_base;
typedef _Iterator_base0 _Iterator_base;

 


#line 253 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

	
struct _Zero_then_variadic_args_t
	{	
	};	

struct _One_then_variadic_args_t
	{	
	};	

template<class _Ty1,
	class _Ty2,
	bool = is_empty<_Ty1>::value && !is_final<_Ty1>::value>
	class _Compressed_pair final
		: private _Ty1

	{	
private:
	_Ty2 _Myval2;

	typedef _Ty1 _Mybase;	

public:
	template<class... _Other2>
		constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
			_Other2&&... _Val2)
		: _Ty1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}

	template<class _Other1,
		class... _Other2>
		_Compressed_pair(_One_then_variadic_args_t,
			_Other1&& _Val1, _Other2&&... _Val2)
		: _Ty1(::std:: forward<_Other1>(_Val1)),
			_Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}


	_Ty1& _Get_first() noexcept
		{	
		return (*this);
		}

	const _Ty1& _Get_first() const noexcept
		{	
		return (*this);
		}

	volatile _Ty1& _Get_first() volatile noexcept
		{	
		return (*this);
		}

	const volatile _Ty1& _Get_first() const volatile noexcept
		{	
		return (*this);
		}

	_Ty2& _Get_second() noexcept
		{	
		return (_Myval2);
		}

	const _Ty2& _Get_second() const noexcept
		{	
		return (_Myval2);
		}

	volatile _Ty2& _Get_second() volatile noexcept
		{	
		return (_Myval2);
		}

	const volatile _Ty2& _Get_second() const volatile noexcept
		{	
		return (_Myval2);
		}
	};

template<class _Ty1,
	class _Ty2>
	class _Compressed_pair<_Ty1, _Ty2, false> final

	{	
private:
	_Ty1 _Myval1;
	_Ty2 _Myval2;

public:
	template<class... _Other2>
		constexpr explicit _Compressed_pair(_Zero_then_variadic_args_t,
			_Other2&&... _Val2)
		: _Myval1(), _Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}

	template<class _Other1,
		class... _Other2>
		_Compressed_pair(_One_then_variadic_args_t,
			_Other1&& _Val1, _Other2&&... _Val2)
		: _Myval1(::std:: forward<_Other1>(_Val1)),
			_Myval2(::std:: forward<_Other2>(_Val2)...)
		{	
		}


	_Ty1& _Get_first() noexcept
		{	
		return (_Myval1);
		}

	const _Ty1& _Get_first() const noexcept
		{	
		return (_Myval1);
		}

	volatile _Ty1& _Get_first() volatile noexcept
		{	
		return (_Myval1);
		}

	const volatile _Ty1& _Get_first() const volatile noexcept
		{	
		return (_Myval1);
		}

	_Ty2& _Get_second() noexcept
		{	
		return (_Myval2);
		}

	const _Ty2& _Get_second() const noexcept
		{	
		return (_Myval2);
		}

	volatile _Ty2& _Get_second() volatile noexcept
		{	
		return (_Myval2);
		}

	const volatile _Ty2& _Get_second() const volatile noexcept
		{	
		return (_Myval2);
		}
	};

		
template<class _Ty,
	class = void>
	struct _Is_checked_helper
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_checked_helper<_Ty, void_t<
		typename _Ty::_Unchecked_type> >
		: true_type
	{	
	};

		
template<class _Iter> inline
	typename _Is_checked_helper<_Iter>::type _Is_checked(_Iter)
	{	
	return {};
	}

		
template<class _Iter> inline
	_Iter _Unchecked(_Iter _Src)
	{	
	return (_Src);
	}

 


		
 

template<class _Iter> inline
	decltype(_Unchecked(::std:: declval<_Iter>())) _Unchecked_idl0(_Iter _Src)
	{	
	return (_Unchecked(_Src));
	}

 







#line 452 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
template<class _Iter,
	class _UIter> inline
	_Iter& _Rechecked(_Iter& _Dest, _UIter _Src)
	{	
	_Dest = _Src;
	return (_Dest);
	}

		




















		
		
		















#line 502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"


		
		
struct input_iterator_tag
	{	
	};

struct _Mutable_iterator_tag	
	{	
	};

struct output_iterator_tag
	: _Mutable_iterator_tag
	{	
	};

struct forward_iterator_tag
	: input_iterator_tag, _Mutable_iterator_tag
	{	
	};

struct bidirectional_iterator_tag
	: forward_iterator_tag
	{	
	};

struct random_access_iterator_tag
	: bidirectional_iterator_tag
	{	
	};

		
struct _General_ptr_iterator_tag
	{	
	};

struct _Trivially_copyable_ptr_iterator_tag
	: _General_ptr_iterator_tag
	{	
	};

struct _Really_trivial_ptr_iterator_tag
	: _Trivially_copyable_ptr_iterator_tag
	{	
	};

	
struct _Any_tag
	{	
	constexpr _Any_tag() noexcept = default;
	template<class _Ty>
		constexpr _Any_tag(_Ty&&) noexcept {}
	};

		
template<class _Category,
	class _Ty,
	class _Diff = ptrdiff_t,
	class _Pointer = _Ty *,
	class _Reference = _Ty&>
	struct iterator
	{	
	typedef _Category iterator_category;
	typedef _Ty value_type;
	typedef _Diff difference_type;

	typedef _Pointer pointer;
	typedef _Reference reference;
	};

template<class _Category,
	class _Ty,
	class _Diff,
	class _Pointer,
	class _Reference,
	class _Base>
	struct _Iterator012
		: public _Base
	{	
	typedef _Category iterator_category;
	typedef _Ty value_type;
	typedef _Diff difference_type;

	typedef _Pointer pointer;
	typedef _Reference reference;
	};


typedef iterator<output_iterator_tag, void, void, void, void> _Outit;

		
template<class,
	class = void>
	struct _Iterator_traits_base
	{	
	};

template<class _Iter>
	struct _Iterator_traits_base<_Iter, void_t<
		typename _Iter::iterator_category,
		typename _Iter::value_type,
		typename _Iter::difference_type,
		typename _Iter::pointer,
		typename _Iter::reference
		> >
	{	
	typedef typename _Iter::iterator_category iterator_category;
	typedef typename _Iter::value_type value_type;
	typedef typename _Iter::difference_type difference_type;

	typedef typename _Iter::pointer pointer;
	typedef typename _Iter::reference reference;
	};

template<class _Iter>
	struct iterator_traits
		: _Iterator_traits_base<_Iter>
	{	
	};

template<class _Ty>
	struct iterator_traits<_Ty *>
	{	
	typedef random_access_iterator_tag iterator_category;
	typedef _Ty value_type;
	typedef ptrdiff_t difference_type;

	typedef _Ty *pointer;
	typedef _Ty& reference;
	};

template<class _Ty>
	struct iterator_traits<const _Ty *>
	{	
	typedef random_access_iterator_tag iterator_category;
	typedef _Ty value_type;
	typedef ptrdiff_t difference_type;

	typedef const _Ty *pointer;
	typedef const _Ty& reference;
	};

		
template<class _Iter>
	using _Iter_value_t = typename iterator_traits<_Iter>::value_type;

		
template<class _Iter>
	using _Iter_diff_t = typename iterator_traits<_Iter>::difference_type;

		
template<class _Iter>
	using _Iter_cat_t = typename iterator_traits<_Iter>::iterator_category;

		
template<class _Ty,
	class = void>
	struct _Is_iterator
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_iterator<_Ty, void_t<
		typename iterator_traits<_Ty>::iterator_category
		> >
		: true_type
	{	
	};


		
 
template<class _Iter,
	class _Diff> inline
	auto _Unchecked_n(_Iter _Src, _Diff)
	{	
	return (_Unchecked(_Src));
	}
 

























#line 709 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"


		
template<class _Ty1,
	class _Ty2>
	struct _Is_same_size
		: bool_constant<sizeof(_Ty1) == sizeof(_Ty2)>
	{	
	};

		
template<class _Elem,
	bool _Is_enum = is_enum<_Elem>::value>
	struct _Unwrap_enum
	{	
	typedef underlying_type_t<_Elem> type;
	};

template<class _Elem>
	struct _Unwrap_enum<_Elem, false>
	{	
	typedef _Elem type;
	};

		
template<class _Ty1,
	class _Ty2>
	struct _Both_or_neither_bool
		: bool_constant<is_same<bool, _Ty1>::value == is_same<bool, _Ty2>::value>
	{	
	};

		
template<class _Source,
	class _Dest>
	struct _Ptr_cat_helper
	{	
	typedef typename _Unwrap_enum<_Source>::type _USource;
	typedef typename _Unwrap_enum<_Dest>::type _UDest;
	typedef conditional_t<
		conjunction<
			_Is_same_size<_USource, _UDest>,
			is_integral<_USource>,
			is_integral<_UDest>,
			_Both_or_neither_bool<_USource, _UDest>,
			
			negation<is_volatile<_Source>>,
			negation<is_volatile<_Dest>>
		>::value,
		_Really_trivial_ptr_iterator_tag,
		_General_ptr_iterator_tag> type;
	};

template<class _Elem>
	struct _Ptr_cat_helper<_Elem, _Elem>
	{	
	typedef conditional_t<
		is_trivially_copyable<_Elem>::value,
		conditional_t<is_trivial<_Elem>::value,
			_Really_trivial_ptr_iterator_tag,
			_Trivially_copyable_ptr_iterator_tag>,
		_General_ptr_iterator_tag> type;
	};

template<class _Anything>
	struct _Ptr_cat_helper<_Anything *, const _Anything *>
	{	
	typedef _Really_trivial_ptr_iterator_tag type;
	};

template<class _Source,
	class _Dest> inline
	_General_ptr_iterator_tag _Ptr_copy_cat(const _Source&, const _Dest&)
	{	
	return {};
	}

template<class _Source,
	class _Dest> inline
	conditional_t<is_trivially_assignable<_Dest&, _Source&>::value,
		typename _Ptr_cat_helper<remove_const_t<_Source>, _Dest>::type,
		_General_ptr_iterator_tag>
		_Ptr_copy_cat(_Source * const&, _Dest * const&)
	{	
	return {};
	}

template<class _Source,
	class _Dest> inline
	_General_ptr_iterator_tag _Ptr_move_cat(const _Source&, const _Dest&)
	{	
	return {};
	}

template<class _Source,
	class _Dest> inline
	conditional_t<is_trivially_assignable<_Dest&, _Source>::value,
		typename _Ptr_cat_helper<remove_const_t<_Source>, _Dest>::type,
		_General_ptr_iterator_tag>
		_Ptr_move_cat(_Source * const&, _Dest * const&)
	{	
	return {};
	}

		

 
  
  
  
  
  
  
  
  
  
  

 









































































































































































































#line 1030 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

 
  
 



















#line 1054 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
		
template<class _InIt,
	class _Diff> inline
	void _Advance1(_InIt& _Where, _Diff _Off, input_iterator_tag)
	{	
 


#line 1065 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

	for (; 0 < _Off; --_Off)
		++_Where;
	}

template<class _BidIt,
	class _Diff> inline
	void _Advance1(_BidIt& _Where, _Diff _Off, bidirectional_iterator_tag)
	{	
	for (; 0 < _Off; --_Off)
		++_Where;
	for (; _Off < 0; ++_Off)
		--_Where;
	}

template<class _RanIt,
	class _Diff> inline
	void _Advance1(_RanIt& _Where, _Diff _Off, random_access_iterator_tag)
	{	
	_Where += _Off;
	}

template<class _InIt,
	class _Diff> inline
	void advance(_InIt& _Where, _Diff _Off)
	{	
		
	_Advance1(_Where, _Off, _Iter_cat_t<remove_const_t<_InIt>>());
	}

		
template<class _InIt> inline
	_Iter_diff_t<_InIt>
		_Distance1(_InIt _First, _InIt _Last, input_iterator_tag)
	{	
	_Iter_diff_t<_InIt> _Off = 0;
	for (; _First != _Last; ++_First)
		++_Off;

	return (_Off);
	}

template<class _RanIt> inline
	_Iter_diff_t<_RanIt>
		_Distance1(_RanIt _First, _RanIt _Last, random_access_iterator_tag)
	{	
 





#line 1118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

	return (_Last - _First);
	}

template<class _InIt> inline
	_Iter_diff_t<_InIt>
		distance(_InIt _First, _InIt _Last)
	{	
	return (_Distance1(_First, _Last, _Iter_cat_t<_InIt>()));
	}

		
template<class _InIt> inline
	_InIt next(_InIt _First, _Iter_diff_t<_InIt> _Off = 1)
	{	
	static_assert(is_base_of<input_iterator_tag,
		typename iterator_traits<_InIt>::iterator_category>::value,
		"next requires input iterator");

	::std:: advance(_First, _Off);
	return (_First);
	}

		
template<class _BidIt> inline
	_BidIt prev(_BidIt _First, _Iter_diff_t<_BidIt> _Off = 1)
	{	
	static_assert(is_base_of<bidirectional_iterator_tag,
		typename iterator_traits<_BidIt>::iterator_category>::value,
		"prev requires bidirectional iterator");

	::std:: advance(_First, -_Off);
	return (_First);
	}

		
template<class _Ty>
	struct pointer_traits;

template<class _RanIt>
	class reverse_iterator
		: public iterator<
			typename iterator_traits<_RanIt>::iterator_category,
			typename iterator_traits<_RanIt>::value_type,
			typename iterator_traits<_RanIt>::difference_type,
			typename iterator_traits<_RanIt>::pointer,
			typename iterator_traits<_RanIt>::reference>
	{	
	typedef reverse_iterator<_RanIt> _Myt;

public:
	typedef typename iterator_traits<_RanIt>::difference_type difference_type;
	typedef typename iterator_traits<_RanIt>::pointer pointer;
	typedef typename iterator_traits<_RanIt>::reference reference;
	typedef _RanIt iterator_type;

	reverse_iterator()
		: current()
		{	
		}

	explicit reverse_iterator(_RanIt _Right)
		: current(_Right)
		{	
		}

	template<class _Other>
		reverse_iterator(const reverse_iterator<_Other>& _Right)
		: current(_Right.base())
		{	
		}

	template<class _Other>
		_Myt& operator=(const reverse_iterator<_Other>& _Right)
		{	
		current = _Right.base();
		return (*this);
		}

	_RanIt base() const
		{	
		return (current);
		}

	reference operator*() const
		{	
		_RanIt _Tmp = current;
		return (*--_Tmp);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myt& operator++()
		{	
		--current;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		--current;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		++current;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		++current;
		return (_Tmp);
		}



	_Myt& operator+=(difference_type _Off)
		{	
		current -= _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		return (_Myt(current - _Off));
		}

	_Myt& operator-=(difference_type _Off)
		{	
		current += _Off;
		return (*this);
		}

	_Myt operator-(difference_type _Off) const
		{	
		return (_Myt(current + _Off));
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

protected:
	_RanIt current;	
	};

template<class _RanIt>
	struct _Is_checked_helper<reverse_iterator<_RanIt> >
		: public _Is_checked_helper<_RanIt>
	{	
	};

		
template<class _RanIt> inline
	reverse_iterator<_RanIt> operator+(
		typename reverse_iterator<_RanIt>::difference_type _Off,
		const reverse_iterator<_RanIt>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _RanIt1,
	class _RanIt2>
	auto inline operator-(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
			-> decltype(_Right.base() - _Left.base())
	{	
	return (_Right.base() - _Left.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator==(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Left.base() == _Right.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator!=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Right.base() < _Left.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>=(const reverse_iterator<_RanIt1>& _Left,
		const reverse_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _RanIt> inline
	reverse_iterator<_RanIt> make_reverse_iterator(_RanIt _Iter)
	{	
	return (reverse_iterator<_RanIt>(_Iter));
	}

		

template<class _Container>
	auto inline begin(_Container& _Cont) -> decltype(_Cont.begin())
	{	
	return (_Cont.begin());
	}

template<class _Container>
	auto inline begin(const _Container& _Cont) -> decltype(_Cont.begin())
	{	
	return (_Cont.begin());
	}

template<class _Container>
	auto inline end(_Container& _Cont) -> decltype(_Cont.end())
	{	
	return (_Cont.end());
	}

template<class _Container>
	auto inline end(const _Container& _Cont) -> decltype(_Cont.end())
	{	
	return (_Cont.end());
	}

template<class _Ty,
	size_t _Size> inline
	constexpr _Ty *begin(_Ty (&_Array)[_Size]) noexcept
	{	
	return (_Array);
	}

template<class _Ty,
	size_t _Size> inline
	constexpr _Ty *end(_Ty (&_Array)[_Size]) noexcept
	{	
	return (_Array + _Size);
	}

		
template<class _Container>
	constexpr auto inline cbegin(const _Container& _Cont)
		noexcept(noexcept(::std:: begin(_Cont)))
		-> decltype(::std:: begin(_Cont))
	{	
	return (::std:: begin(_Cont));
	}

template<class _Container>
	constexpr auto inline cend(const _Container& _Cont)
		noexcept(noexcept(::std:: end(_Cont)))
		-> decltype(::std:: end(_Cont))
	{	
	return (::std:: end(_Cont));
	}

		
template<class _Container>
	auto inline rbegin(_Container& _Cont) -> decltype(_Cont.rbegin())
	{	
	return (_Cont.rbegin());
	}

template<class _Container>
	auto inline rbegin(const _Container& _Cont) -> decltype(_Cont.rbegin())
	{	
	return (_Cont.rbegin());
	}

template<class _Container>
	auto inline rend(_Container& _Cont) -> decltype(_Cont.rend())
	{	
	return (_Cont.rend());
	}

template<class _Container>
	auto inline rend(const _Container& _Cont) -> decltype(_Cont.rend())
	{	
	return (_Cont.rend());
	}

template<class _Ty,
	size_t _Size> inline
	reverse_iterator<_Ty *> rbegin(_Ty (&_Array)[_Size])
	{	
	return (reverse_iterator<_Ty *>(_Array + _Size));
	}

template<class _Ty,
	size_t _Size> inline
	reverse_iterator<_Ty *> rend(_Ty (&_Array)[_Size])
	{	
	return (reverse_iterator<_Ty *>(_Array));
	}

template<class _Elem> inline
	reverse_iterator<const _Elem *>
		rbegin(::std:: initializer_list<_Elem> _Ilist)
	{	
	return (reverse_iterator<const _Elem *>(_Ilist.end()));
	}

template<class _Elem> inline
	reverse_iterator<const _Elem *>
		rend(::std:: initializer_list<_Elem> _Ilist)
	{	
	return (reverse_iterator<const _Elem *>(_Ilist.begin()));
	}

		
template<class _Container>
	auto inline crbegin(const _Container& _Cont)
		-> decltype(::std:: rbegin(_Cont))
	{	
	return (::std:: rbegin(_Cont));
	}

template<class _Container>
	auto inline crend(const _Container& _Cont)
		-> decltype(::std:: rend(_Cont))
	{	
	return (::std:: rend(_Cont));
	}


template<class _Container>
	constexpr auto inline size(const _Container& _Cont)
		-> decltype(_Cont.size())
	{	
	return (_Cont.size());
	}

template<class _Ty,
	size_t _Size> inline
	constexpr size_t size(const _Ty(&)[_Size]) noexcept
	{	
	return (_Size);
	}

template<class _Container>
	constexpr auto inline empty(const _Container& _Cont)
		-> decltype(_Cont.empty())
	{	
	return (_Cont.empty());
	}

template<class _Ty,
	size_t _Size> inline
	constexpr bool empty(const _Ty(&)[_Size]) noexcept
	{	
	return (false);
	}

template<class _Elem> inline
	constexpr bool empty(
		::std:: initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.size() == 0);
	}

template<class _Container>
	constexpr auto inline data(_Container& _Cont)
		-> decltype(_Cont.data())
	{	
	return (_Cont.data());
	}

template<class _Container>
	constexpr auto inline data(const _Container& _Cont)
		-> decltype(_Cont.data())
	{	
	return (_Cont.data());
	}

template<class _Ty,
	size_t _Size> inline
	constexpr _Ty *data(_Ty(&_Array)[_Size]) noexcept
	{	
	return (_Array);
	}

template<class _Elem> inline
	constexpr const _Elem *data(
		::std:: initializer_list<_Elem> _Ilist) noexcept
	{	
	return (_Ilist.begin());
	}

		
template<class _Ty,
	size_t _Size>
	class _Array_const_iterator
		: public _Iterator012<random_access_iterator_tag,
			_Ty,
			ptrdiff_t,
			const _Ty *,
			const _Ty&,
			_Iterator_base>
	{	
public:
	typedef _Array_const_iterator<_Ty, _Size> _Myiter;
	typedef random_access_iterator_tag iterator_category;

	typedef _Ty value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef const _Ty *pointer;
	typedef const _Ty& reference;
	enum {_EEN_SIZE = _Size};	
 
	_Array_const_iterator()
		: _Ptr(0)
		{	
		}

	explicit _Array_const_iterator(pointer _Parg, size_t _Off = 0)
		: _Ptr(_Parg + _Off)
		{	
		}

	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		_Ptr = _Right;
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return (_Ptr);
		}

	reference operator*() const
		{	
		return (*_Ptr);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++_Ptr;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--_Ptr;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		_Ptr += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Myiter& _Right) const
		{	
		return (_Ptr - _Right._Ptr);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}

	bool operator==(const _Myiter& _Right) const
		{	
		return (_Ptr == _Right._Ptr);
		}

	bool operator!=(const _Myiter& _Right) const
		{	
		return (!(*this == _Right));
		}

	bool operator<(const _Myiter& _Right) const
		{	
		return (_Ptr < _Right._Ptr);
		}

	bool operator>(const _Myiter& _Right) const
		{	
		return (_Right < *this);
		}

	bool operator<=(const _Myiter& _Right) const
		{	
		return (!(_Right < *this));
		}

	bool operator>=(const _Myiter& _Right) const
		{	
		return (!(*this < _Right));
		}

	pointer _Ptr;	

 








































































































































































































#line 1888 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
	};

template<class _Ty,
	size_t _Size> inline
	typename _Array_const_iterator<_Ty, _Size>::_Unchecked_type
		_Unchecked(_Array_const_iterator<_Ty, _Size> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Ty,
	size_t _Size> inline
	_Array_const_iterator<_Ty, _Size>&
		_Rechecked(_Array_const_iterator<_Ty, _Size>& _Iter,
			typename _Array_const_iterator<_Ty, _Size>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Ty,
	size_t _Size> inline
	_Array_const_iterator<_Ty, _Size> operator+(
		typename _Array_const_iterator<_Ty, _Size>::difference_type _Off,
		_Array_const_iterator<_Ty, _Size> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _Ty,
	size_t _Size>
	class _Array_iterator
		: public _Array_const_iterator<_Ty, _Size>
	{	
public:
	typedef _Array_iterator<_Ty, _Size> _Myiter;
	typedef _Array_const_iterator<_Ty, _Size> _Mybase;
	typedef random_access_iterator_tag iterator_category;

	typedef _Ty value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef _Ty *pointer;
	typedef _Ty& reference;

	_Array_iterator()
		{	
		}

	explicit _Array_iterator(pointer _Parg, size_t _Off = 0)
		: _Mybase(_Parg, _Off)
		{	
		}
	enum {_EEN_SIZE = _Size};	
	typedef pointer _Unchecked_type;

	_Myiter& _Rechecked(_Unchecked_type _Right)
		{	
		((_Mybase *)this)->_Rechecked(_Right);
		return (*this);
		}

	_Unchecked_type _Unchecked() const
		{	
		return ((pointer)((_Mybase *)this)->_Unchecked());
		}

	reference operator*() const
		{	
		return ((reference)**(_Mybase *)this);
		}

	pointer operator->() const
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	_Myiter& operator++()
		{	
		++*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator++(int)
		{	
		_Myiter _Tmp = *this;
		++*this;
		return (_Tmp);
		}

	_Myiter& operator--()
		{	
		--*(_Mybase *)this;
		return (*this);
		}

	_Myiter operator--(int)
		{	
		_Myiter _Tmp = *this;
		--*this;
		return (_Tmp);
		}

	_Myiter& operator+=(difference_type _Off)
		{	
		*(_Mybase *)this += _Off;
		return (*this);
		}

	_Myiter operator+(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp += _Off);
		}

	_Myiter& operator-=(difference_type _Off)
		{	
		return (*this += -_Off);
		}

	_Myiter operator-(difference_type _Off) const
		{	
		_Myiter _Tmp = *this;
		return (_Tmp -= _Off);
		}

	difference_type operator-(const _Mybase& _Right) const
		{	
		return (*(_Mybase *)this - _Right);
		}

	reference operator[](difference_type _Off) const
		{	
		return (*(*this + _Off));
		}
	};

template<class _Ty,
	size_t _Size> inline
	typename _Array_iterator<_Ty, _Size>::_Unchecked_type
		_Unchecked(_Array_iterator<_Ty, _Size> _Iter)
	{	
	return (_Iter._Unchecked());
	}

template<class _Ty,
	size_t _Size> inline
	_Array_iterator<_Ty, _Size>&
		_Rechecked(_Array_iterator<_Ty, _Size>& _Iter,
			typename _Array_iterator<_Ty, _Size>
				::_Unchecked_type _Right)
	{	
	return (_Iter._Rechecked(_Right));
	}

template<class _Ty,
	size_t _Size> inline
	_Array_iterator<_Ty, _Size> operator+(
		typename _Array_iterator<_Ty, _Size>::difference_type _Off,
		_Array_iterator<_Ty, _Size> _Next)
	{	
	return (_Next += _Off);
	}

		
template<class _RanIt>
	class move_iterator
	{	
public:
	typedef move_iterator<_RanIt> _Myt;
	typedef typename iterator_traits<_RanIt>::iterator_category
		iterator_category;
	typedef typename iterator_traits<_RanIt>::value_type
		value_type;
	typedef typename iterator_traits<_RanIt>::difference_type
		difference_type;
	typedef _RanIt pointer;
	typedef typename iterator_traits<_RanIt>::reference _Ref0;
	typedef conditional_t<is_reference<_Ref0>::value,
		remove_reference_t<_Ref0>&&, _Ref0> reference;
	typedef _RanIt iterator_type;

	move_iterator()
		: current()
		{	
		}

	explicit move_iterator(iterator_type _Right)
		: current(_Right)
		{	
		}

	template<class _RanIt2>
		move_iterator(const move_iterator<_RanIt2>& _Right)
		: current(_Right.base())
		{	
		}

	template<class _RanIt2>
		_Myt& operator=(const move_iterator<_RanIt2>& _Right)
		{	
		current = _Right.base();
		return (*this);
		}

	_RanIt base() const
		{	
		return (current);
		}

	reference operator*() const
		{	
		return (static_cast<reference>(*current));
		}

	pointer operator->() const
		{	
		return (current);
		}

	_Myt& operator++()
		{	
		++current;
		return (*this);
		}

	_Myt operator++(int)
		{	
		_Myt _Tmp = *this;
		++current;
		return (_Tmp);
		}

	_Myt& operator--()
		{	
		--current;
		return (*this);
		}

	_Myt operator--(int)
		{	
		_Myt _Tmp = *this;
		--current;
		return (_Tmp);
		}

	template<class _RanIt2>
		bool _Equal(const move_iterator<_RanIt2>& _Right) const
		{	
		return (current == _Right.base());
		}



	_Myt& operator+=(difference_type _Off)
		{	
		current += _Off;
		return (*this);
		}

	_Myt operator+(difference_type _Off) const
		{	
		return (_Myt(current + _Off));
		}

	_Myt& operator-=(difference_type _Off)
		{	
		current -= _Off;
		return (*this);
		}

	_Myt operator-(difference_type _Off) const
		{	
		return (_Myt(current - _Off));
		}

	reference operator[](difference_type _Off) const
		{	
		return (::std:: move(current[_Off]));
		}

	template<class _RanIt2>
		bool _Less(const move_iterator<_RanIt2>& _Right) const
		{	
		return (current < _Right.base());
		}

	difference_type operator-(const _Myt& _Right) const
		{	
		return (current - _Right.base());
		}

protected:
	iterator_type current;	
	};

template<class _RanIt>
	struct _Is_checked_helper<move_iterator<_RanIt> >
		: public _Is_checked_helper<_RanIt>
	{	
	};

		
template<class _RanIt,
	class _Diff> inline
	move_iterator<_RanIt>
		operator+(_Diff _Off,
		const move_iterator<_RanIt>& _Right)
	{	
	return (_Right + _Off);
	}

template<class _RanIt1,
	class _RanIt2>
	auto inline operator-(
		move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
			-> decltype(_Left.base() - _Right.base())
	{	
	return (_Left.base() - _Right.base());
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator==(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Equal(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator!=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Left._Less(_Right));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator<=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _RanIt1,
	class _RanIt2> inline
	bool operator>=(
		const move_iterator<_RanIt1>& _Left,
		const move_iterator<_RanIt2>& _Right)
	{	
	return (!(_Left < _Right));
	}

		
template<class _RanIt> inline
	move_iterator<_RanIt> make_move_iterator(_RanIt _Iter)
	{	
	return (move_iterator<_RanIt>(_Iter));
	}

		
template<class _Traits>
	struct _Char_traits_eq
	{
	typedef typename _Traits::char_type _Elem;

	bool operator()(_Elem _Left, _Elem _Right) const
		{
		return (_Traits::eq(_Left, _Right));
		}
	};

		
template<class _Traits>
	struct _Char_traits_lt
	{
	typedef typename _Traits::char_type _Elem;

	bool operator()(_Elem _Left, _Elem _Right) const
		{
		return (_Traits::lt(_Left, _Right));
		}
	};

		
template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_memmove(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	const char * const _First_ch = reinterpret_cast<const char *>(_First);
	const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
	char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
	const size_t _Count = _Last_ch - _First_ch;
	:: memmove(_Dest_ch, _First_ch, _Count);
	return (reinterpret_cast<_OutIt>(_Dest_ch + _Count));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _General_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_Dest, (void)++_First)
		*_Dest = *_First;
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
		
	return (_Copy_unchecked1(_First, _Last,
		_Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_no_deprecate1(_InIt _First, _InIt _Last,
		_OutIt _Dest, input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_no_deprecate1(_InIt _First, _InIt _Last,
		_OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Copy_unchecked(_First, _Last, _Unchecked(_Dest))));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Copy_no_deprecate(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	;
	return (_Copy_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt copy(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Copy_no_deprecate(_First, _Last, _Dest));
	}

 










#line 2388 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked2(_InIt _First, _Diff _Count,
		_OutIt _Dest, input_iterator_tag)
	{	
	if (0 < _Count)
		{
		*_Dest = *_First;
		while (0 < --_Count)
			*++_Dest = *++_First;
		return (++_Dest);
		}

	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked2(_InIt _First, _Diff _Count,
		_OutIt _Dest, forward_iterator_tag)
	{	
	for (; 0 < _Count; --_Count, (void)++_Dest, ++_First)
		*_Dest = *_First;
	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked1(_InIt _First, _Diff _Count,
		_OutIt _Dest, _General_ptr_iterator_tag)
	{	
		
		
	return (_Copy_n_unchecked2(_First, _Count,
		_Dest, _Iter_cat_t<_InIt>()));
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked1(_InIt _First, _Diff _Count,
		_OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	if (0 < _Count)
		return (_Copy_memmove(_First, _First + _Count, _Dest));
	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt _Copy_n_unchecked(_InIt _First, _Diff _Count,
		_OutIt _Dest)
	{	
	return (_Copy_n_unchecked1(_First, _Count,
		_Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _InIt,
	class _Diff,
	class _OutIt> inline
	_OutIt copy_n(_InIt _First, _Diff _Count,
		_OutIt _Dest)
	{	
		
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Rechecked(_Dest,
		_Copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Unchecked_n(_Dest, _Count))));
	}

 





































#line 2502 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_memmove(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	const char * const _First_ch = reinterpret_cast<const char *>(_First);
	const char * const _Last_ch = reinterpret_cast<const char *>(_Last);
	char * const _Dest_ch = reinterpret_cast<char *>(_Dest);
	const size_t _Count = _Last_ch - _First_ch;
	return (static_cast<_BidIt2>(
		:: memmove(_Dest_ch - _Count, _First_ch, _Count)));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _General_ptr_iterator_tag)
	{	
	while (_First != _Last)
		*--_Dest = *--_Last;
	return (_Dest);
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_backward_memmove(_First, _Last, _Dest));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Copy_backward_unchecked1(_First, _Last,
		_Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Copy_backward_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Copy_backward1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Copy_backward_unchecked(_First, _Last, _Unchecked(_Dest))));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 copy_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	;
	return (_Copy_backward1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Iter_cat_t<_BidIt1>(), _Iter_cat_t<_BidIt2>()));
	}

		
template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _General_ptr_iterator_tag)
	{	
	for (; _First != _Last; ++_Dest, (void)++_First)
		*_Dest = ::std:: move(*_First);
	return (_Dest);
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_unchecked1(_InIt _First, _InIt _Last,
		_OutIt _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_unchecked(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	return (_Move_unchecked1(_First, _Last,
		_Dest, _Ptr_move_cat(_First, _Dest)));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_no_deprecate1(_InIt _First, _InIt _Last,
		_OutIt _Dest, input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Move_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_no_deprecate1(_InIt _First, _InIt _Last,
		_OutIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Move_unchecked(_First, _Last, _Unchecked(_Dest))));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt _Move_no_deprecate(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	;
	return (_Move_no_deprecate1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_OutIt>()));
	}

template<class _InIt,
	class _OutIt> inline
	_OutIt move(_InIt _First, _InIt _Last,
		_OutIt _Dest)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Move_no_deprecate(_First, _Last, _Dest));
	}

 










#line 2652 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _General_ptr_iterator_tag)
	{	
	while (_First != _Last)
		*--_Dest = ::std:: move(*--_Last);
	return (_Dest);
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward_unchecked1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, _Trivially_copyable_ptr_iterator_tag)
	{	
	return (_Copy_backward_memmove(_First, _Last, _Dest));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward_unchecked(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	return (_Move_backward_unchecked1(_First, _Last,
		_Dest, _Ptr_move_cat(_First, _Dest)));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, input_iterator_tag, _Any_tag)
	{	
	return (_Rechecked(_Dest,
		_Move_backward_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 _Move_backward1(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Move_backward_unchecked(_First, _Last, _Unchecked(_Dest))));
	}

template<class _BidIt1,
	class _BidIt2> inline
	_BidIt2 move_backward(_BidIt1 _First, _BidIt1 _Last,
		_BidIt2 _Dest)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	;
	return (_Move_backward1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Iter_cat_t<_BidIt1>(), _Iter_cat_t<_BidIt2>()));
	}

		
template<class _Ty>
	struct _Is_character
		: false_type
		{	
		};

template<>
	struct _Is_character<char>
		: true_type
		{	
		};

template<>
	struct _Is_character<signed char>
		: true_type
		{	
		};

template<>
	struct _Is_character<unsigned char>
		: true_type
		{	
		};

template<class _FwdIt,
	class _Ty>
	struct _Fill_memset_is_safe_helper
	{	
	typedef _Iter_value_t<_FwdIt> _Value_type;
	typedef typename conjunction<
		is_pointer<_FwdIt>,
		disjunction<
			conjunction<
				_Is_character<_Ty>,
				_Is_character<_Value_type>>,
			conjunction<
				is_same<bool, _Ty>,
				is_same<bool, _Value_type>>
		>>::type type;
	};

template<class _FwdIt,
	class _Ty> inline
	typename _Fill_memset_is_safe_helper<_FwdIt, _Ty>::type
	_Fill_memset_is_safe(const _FwdIt&, const _Ty&)
	{	
	return {};
	}

template<class _FwdIt,
	class _Ty> inline
	void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, false_type)
	{	
	for (; _First != _Last; ++_First)
		*_First = _Val;
	}

template<class _FwdIt,
	class _Ty> inline
	void _Fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Ty& _Val, true_type)
	{	
	:: memset(_First, _Val, _Last - _First);
	}

template<class _FwdIt,
	class _Ty> inline
	void _Fill_unchecked(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	_Fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));
	}

template<class _FwdIt,
	class _Ty> inline
	void fill(_FwdIt _First, _FwdIt _Last, const _Ty& _Val)
	{	
	;
	_Fill_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val);
	}

		
template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt _Fill_n_unchecked1(_OutIt _Dest, _Diff _Count, const _Ty& _Val, false_type)
	{	
	for (; 0 < _Count; --_Count, (void)++_Dest)
		*_Dest = _Val;
	return (_Dest);
	}

template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt _Fill_n_unchecked1(_OutIt _Dest, _Diff _Count, const _Ty& _Val, true_type)
	{	
	if (0 < _Count)
		{
		:: memset(_Dest, _Val, _Count);
		return (_Dest + _Count);
		}

	return (_Dest);
	}

template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt _Fill_n_unchecked(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
	{	
		
	return (_Fill_n_unchecked1(_Dest, _Count, _Val, _Fill_memset_is_safe(_Dest, _Val)));
	}

template<class _OutIt,
	class _Diff,
	class _Ty> inline
	_OutIt fill_n(_OutIt _Dest, _Diff _Count, const _Ty& _Val)
	{	
	return (_Rechecked(_Dest,
		_Fill_n_unchecked(_Unchecked_n(_Dest, _Count), _Count, _Val)));
	}

		
template<class _Elem1,
	class _Elem2>
	struct _Value_equality_is_bitwise_equality
		: bool_constant<static_cast<_Elem1>(-1) == static_cast<_Elem2>(-1)>
	{	
		
		
		
	};

template<class _Elem1,
	class _Elem2,
	class _Pr>
	struct _Equal_memcmp_is_safe_helper
		: false_type
	{	
		
	};

template<class _Elem1,
	class _Elem2>
	struct _Equal_memcmp_is_safe_helper<_Elem1, _Elem2, equal_to<>>
		: conjunction<
			_Is_same_size<_Elem1, _Elem2>,
			is_integral<_Elem1>,
			is_integral<_Elem2>,
			negation<is_same<bool, _Elem1>>,
			negation<is_same<bool, _Elem2>>,
			negation<is_volatile<_Elem1>>,
			negation<is_volatile<_Elem2>>,
			
			
			_Value_equality_is_bitwise_equality<_Elem1, _Elem2>
		>::type
	{	
	};

template<class _Elem1,
	class _Elem2>
	struct _Equal_memcmp_is_safe_helper<_Elem1 *, _Elem2 *, equal_to<>>
		: is_same<remove_cv_t<_Elem1>, remove_cv_t<_Elem2>>::type
	{	
	};

template<class _Elem>
	struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, _Char_traits_eq<char_traits<_Elem>>>
		: _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
	{	
	};

template<class _Elem>
	struct _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<_Elem>>
		: _Equal_memcmp_is_safe_helper<_Elem, _Elem, equal_to<>>::type
	{	
		
	};

template<class _Iter1,
	class _Iter2,
	class _Pr> inline
	false_type _Equal_memcmp_is_safe(const _Iter1&, const _Iter2&, const _Pr&)
	{	
	return {};
	}

template<class _Obj1,
	class _Obj2,
	class _Pr> inline
	typename _Equal_memcmp_is_safe_helper<
		remove_const_t<_Obj1>,
		remove_const_t<_Obj2>,
		_Pr>::type
		_Equal_memcmp_is_safe(_Obj1 * const&, _Obj2 * const&, const _Pr&)
	{	
	return {};
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr& _Pred, false_type)
	{	
	for (; _First1 != _Last1; ++_First1, (void)++_First2)
		if (!_Pred(*_First1, *_First2))
			return (false);
	return (true);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr&, true_type)
	{	
	const char * const _First1_ch = reinterpret_cast<const char *>(_First1);
	const char * const _First2_ch = reinterpret_cast<const char *>(_First2);
	const size_t _Count = reinterpret_cast<const char *>(_Last1) - _First1_ch;
	return (:: memcmp(_First1_ch, _First2_ch, _Count) == 0);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr& _Pred)
	{	
	return (_Equal_unchecked1(_First1, _Last1, _First2, _Pred,
		_Equal_memcmp_is_safe(_First1, _First2, _Pred)));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr& _Pred, input_iterator_tag, input_iterator_tag)
	{	
	return (_Equal_unchecked(_First1, _Last1, _Unchecked_idl0(_First2), _Pred));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_no_deprecate1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr& _Pred, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Equal_unchecked(_First1, _Last1, _Unchecked(_First2), _Pred));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_no_deprecate(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr& _Pred)
	{	
	;
	;
	return (_Equal_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
		_First2, _Pred, _Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _Pr _Pred)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
	return (_Equal_no_deprecate(_First1, _Last1, _First2, _Pred));
	}

 











#line 3000 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
template<class _InIt1,
	class _InIt2> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2)
	{	
	return (::std:: equal(_First1, _Last1, _First2,
		equal_to<>()));
	}

 









#line 3022 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr& _Pred,
			input_iterator_tag, input_iterator_tag)
	{	
		
	;
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
		if (!_Pred(*_First1, *_First2))
			return (false);
	return (_First1 == _Last1 && _First2 == _Last2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Equal_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr& _Pred,
			random_access_iterator_tag, random_access_iterator_tag)
	{	
		
	if (_Last1 - _First1 != _Last2 - _First2)
		return (false);
	;
	return (_Equal_unchecked(_First1, _Last1, _First2, _Pred));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	return (_Equal_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2), _Pred,
			_Iter_cat_t<_InIt1>(), _Iter_cat_t<_InIt2>()));
	}

		
template<class _InIt1,
	class _InIt2> inline
	bool equal(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	return (::std:: equal(_First1, _Last1, _First2, _Last2,
		equal_to<>()));
	}

		
template<class _Elem1,
	class _Elem2,
	class _FTy>
	struct _Lex_compare_check_element_types_helper
		: conjunction<
			_Is_character<_Elem1>,
			_Is_character<_Elem2>,
			_Is_character<_FTy>,
			is_unsigned<_FTy>
		>::type
	{	
	};

template<class _Elem1,
	class _Elem2>
	struct _Lex_compare_check_element_types_helper<_Elem1, _Elem2, void>
		: conjunction<
			_Is_character<_Elem1>,
			_Is_character<_Elem2>,
			is_unsigned<_Elem1>,
			is_unsigned<_Elem2>
		>::type
	{	
	};

template<class _Memcmp_pr>
	struct _Lex_compare_optimize
	{	
	};

template<class _Memcmp_pr,
	class _Obj1,
	class _Obj2,
	class _FTy>
	using _Lex_compare_check_element_types = _Lex_compare_optimize<conditional_t<
		_Lex_compare_check_element_types_helper<remove_const_t<_Obj1>, remove_const_t<_Obj2>, _FTy>::value,
		_Memcmp_pr, void>>;	

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	_Lex_compare_optimize<void> _Lex_compare_memcmp_classify(const _InIt1&, const _InIt2&, const _Pr&)
	{	
		
	return {};
	}

template<class _Obj1,
	class _Obj2,
	class _FTy> inline
	_Lex_compare_check_element_types<less<int>, _Obj1, _Obj2, _FTy>
		_Lex_compare_memcmp_classify(_Obj1 * const&, _Obj2 * const&, const less<_FTy>&)
	{	
	return {};
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Lex_compare_unchecked1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr& _Pred, _Lex_compare_optimize<void>)
	{	
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
		{	
		if (_Pred(*_First1, *_First2))
			return (true);
		else if (_Pred(*_First2, *_First1))
			return (false);
		}

	return (_First1 == _Last1 && _First2 != _Last2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr,
	class _Memcmp_pr> inline
	bool _Lex_compare_unchecked1(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr&, _Lex_compare_optimize<_Memcmp_pr>)
	{	
	const size_t _Num1 = _Last1 - _First1;
	const size_t _Num2 = _Last2 - _First2;
	const int _Ans = :: memcmp(_First1, _First2, _Num1 < _Num2 ? _Num1 : _Num2);
	return (_Memcmp_pr{}(_Ans, 0) || _Ans == 0 && _Num1 < _Num2);
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool _Lex_compare_unchecked(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr& _Pred)
	{	
	return (_Lex_compare_unchecked1(_First1, _Last1, _First2, _Last2, _Pred,
		_Lex_compare_memcmp_classify(_First1, _First2, _Pred)));
	}

template<class _InIt1,
	class _InIt2,
	class _Pr> inline
	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2, _Pr _Pred)
	{	
	;
	;
	;
	return (_Lex_compare_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2), _Pred));
	}

		
template<class _InIt1,
	class _InIt2> inline
	bool lexicographical_compare(_InIt1 _First1, _InIt1 _Last1,
		_InIt2 _First2, _InIt2 _Last2)
	{	
	return (::std:: lexicographical_compare(_First1, _Last1,
		_First2, _Last2, less<>()));
	}

		
template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, true_type, _Any_tag)
	{	
	return ((-128) <= _Val && _Val <= 127);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, false_type, true_type)
	{	
	return (_Val <= 127 || static_cast<_Ty>((-128)) <= _Val);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, true_type, false_type, false_type)
	{	
	return (_Val <= 127);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, false_type, true_type, _Any_tag)
	{	
	return (0 <= _Val && _Val <= 0xff);
	}

template<class _Ty> inline
	bool _Within_limits(const _Ty& _Val, false_type, false_type, _Any_tag)
	{	
	return (_Val <= 0xff);
	}

template<class _InIt,
	class _Ty> inline
	bool _Within_limits(_InIt, const _Ty& _Val)
	{	
	typedef typename remove_pointer<_InIt>::type _Elem;
	return (_Within_limits(_Val, is_signed<_Elem>(), is_signed<_Ty>(),
		integral_constant<bool, -1 == static_cast<_Ty>(-1)>()));
	}

template<class _InIt> inline
	bool _Within_limits(_InIt, const bool&)
	{	
	return (true);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find_unchecked1(_InIt _First, _InIt _Last, const _Ty& _Val, true_type)
	{	
	if (!_Within_limits(_First, _Val))
		return (_Last);
	_First = static_cast<_InIt>(:: memchr(
		_First, static_cast<unsigned char>(_Val), _Last - _First));
	return (_First ? _First : _Last);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find_unchecked1(_InIt _First, _InIt _Last, const _Ty& _Val, false_type)
	{	
	for (; _First != _Last; ++_First)
		if (*_First == _Val)
			break;
	return (_First);
	}

template<class _InIt,
	class _Ty> inline
	_InIt _Find_unchecked(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	
	typedef integral_constant<bool,
		(is_same<_InIt, char *>::value
		|| is_same<_InIt, signed char *>::value
		|| is_same<_InIt, unsigned char *>::value
		|| is_same<_InIt, const char *>::value
		|| is_same<_InIt, const signed char *>::value
		|| is_same<_InIt, const unsigned char *>::value)
		&& is_integral<_Ty>::value
	> _Memchr_opt;
	return (_Find_unchecked1(_First, _Last, _Val, _Memchr_opt()));
	}

template<class _InIt,
	class _Ty> inline
	_InIt find(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	;
	return (_Rechecked(_First,
		_Find_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val)));
	}

		
template<class _InIt,
	class _Ty,
	class _Pr> inline
	_InIt _Find_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr& _Pred)
	{	
	for (; _First != _Last; ++_First)
		if (_Pred(*_First, _Val))
			break;
	return (_First);
	}

		
template<class _InIt,
	class _Ty> inline
	_Iter_diff_t<_InIt>
		_Count_unchecked(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	_Iter_diff_t<_InIt> _Count = 0;

	for (; _First != _Last; ++_First)
		if (*_First == _Val)
			++_Count;
	return (_Count);
	}

template<class _InIt,
	class _Ty> inline
	_Iter_diff_t<_InIt>
		count(_InIt _First, _InIt _Last, const _Ty& _Val)
	{	
	;
	return (_Count_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val));
	}

		
template<class _InIt,
	class _Ty,
	class _Pr> inline
	_Iter_diff_t<_InIt>
		_Count_pr(_InIt _First, _InIt _Last, const _Ty& _Val, _Pr& _Pred)
	{	
	_Iter_diff_t<_InIt> _Count = 0;

	for (; _First != _Last; ++_First)
		if (_Pred(*_First, _Val))
			++_Count;
	return (_Count);
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	void _Trim_matching_suffixes(_FwdIt1&, _FwdIt2&, _Pr&,
		forward_iterator_tag, forward_iterator_tag)
	{	
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	void _Trim_matching_suffixes(_FwdIt1& _Last1, _FwdIt2& _Last2, _Pr& _Pred,
		bidirectional_iterator_tag, bidirectional_iterator_tag)
	{	
	
	while (_Pred(*--_Last1, *--_Last2))
		;	
	++_Last1;
	++_Last2;
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Check_match_counts(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred)
	{	
	_Trim_matching_suffixes(_Last1, _Last2, _Pred,
		_Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>());
	for (_FwdIt1 _Next1 = _First1; _Next1 != _Last1; ++_Next1)
		if (_Next1 == _Find_pr(_First1, _Next1, *_Next1, _Pred))
			{	
			_Iter_diff_t<_FwdIt2> _Count2 = _Count_pr(_First2, _Last2, *_Next1, _Pred);
			if (_Count2 == 0)
				return (false);	
			_FwdIt1 _Skip1 = ::std:: next(_Next1);
			_Iter_diff_t<_FwdIt1> _Count1 = _Count_pr(_Skip1, _Last1, *_Next1, _Pred) + 1;
			if (_Count2 != _Count1)
				return (false);	
			}

	return (true);
	}

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr& _Pred)
	{	
	for (; _First1 != _Last1; ++_First1, (void)++_First2)
		if (!_Pred(*_First1, *_First2))
			{	
			_FwdIt2 _Last2 = ::std:: next(_First2,
				::std:: distance(_First1, _Last1));
			return (_Check_match_counts(_First1, _Last1,
				_First2, _Last2, _Pred));
			}

	return (true);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_no_deprecate1(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr& _Pred, forward_iterator_tag, forward_iterator_tag)
	{	
	return (_Is_permutation_unchecked(_First1, _Last1, _Unchecked_idl0(_First2), _Pred));
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_no_deprecate1(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr& _Pred, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Is_permutation_unchecked(_First1, _Last1, _Unchecked(_First2), _Pred));
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_no_deprecate(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr& _Pred)
	{	
	;
	;
	return (_Is_permutation_no_deprecate1(_Unchecked(_First1), _Unchecked(_Last1),
		_First2, _Pred, _Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _Pr _Pred)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_First2)));
	return (_Is_permutation_no_deprecate(_First1, _Last1, _First2, _Pred));
	}

 











#line 3458 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
template<class _FwdIt1,
	class _FwdIt2> inline
	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2)
	{	
	return (::std:: is_permutation(_First1, _Last1,
		_First2, equal_to<>()));
	}


 








#line 3480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		
template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
		forward_iterator_tag, forward_iterator_tag)
	{	
		
	;
	for (; _First1 != _Last1 && _First2 != _Last2; ++_First1, (void)++_First2)
		if (!_Pred(*_First1, *_First2))
			{	
			if (::std:: distance(_First1, _Last1)
				!= ::std:: distance(_First2, _Last2))
				return (false);	
			else
				return (_Check_match_counts(_First1, _Last1,
					_First2, _Last2, _Pred));
			}

	return (_First1 == _Last1 && _First2 == _Last2);
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool _Is_permutation_unchecked(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr& _Pred,
		random_access_iterator_tag, random_access_iterator_tag)
	{	
		
	if (_Last1 - _First1 != _Last2 - _First2)
		return (false);
	;
	return (_Is_permutation_unchecked(_First1, _Last1, _First2, _Pred));
	}

template<class _FwdIt1,
	class _FwdIt2,
	class _Pr> inline
	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2, _Pr _Pred)
	{	
		
	;
	;
	return (_Is_permutation_unchecked(_Unchecked(_First1), _Unchecked(_Last1),
		_Unchecked(_First2), _Unchecked(_Last2), _Pred,
		_Iter_cat_t<_FwdIt1>(), _Iter_cat_t<_FwdIt2>()));
	}

		
template<class _FwdIt1,
	class _FwdIt2> inline
	bool is_permutation(_FwdIt1 _First1, _FwdIt1 _Last1,
		_FwdIt2 _First2, _FwdIt2 _Last2)
	{	
	return (::std:: is_permutation(_First1, _Last1,
		_First2, _Last2, equal_to<>()));
	}

		
template<class _BidIt> inline
	void _Reverse_unchecked(_BidIt _First, _BidIt _Last)
	{	
	for (; _First != _Last && _First != --_Last; ++_First)
		::std:: iter_swap(_First, _Last);
	}

template<class _BidIt> inline
	void reverse(_BidIt _First, _BidIt _Last)
	{	
	;
	_Reverse_unchecked(_Unchecked(_First), _Unchecked(_Last));
	}

		
template<class _FwdIt> inline
	_FwdIt _Rotate_unchecked1(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last,
		forward_iterator_tag)
	{	
	for (_FwdIt _Next = _Mid, _Res = _Last; ; )
		{	
		::std:: iter_swap(_First, _Next);
		if (++_First == _Mid)
			{	
			if (++_Next == _Last)
				return (_Res == _Last ? _Mid : _Res);
			else
				_Mid = _Next;	
			}
		else if (++_Next == _Last)
			{	
			if (_Res == _Last)
				_Res = _First;
			_Next = _Mid;
			}
		}
	}

template<class _BidIt> inline
	pair<_BidIt, _BidIt> _Reverse_until_sentinel_unchecked(
		_BidIt _First, _BidIt _Sentinel, _BidIt _Last)
	{	
	while (_First != _Sentinel && _Last != _Sentinel)
		::std:: iter_swap(_First++, --_Last);
	return (::std:: make_pair(_First, _Last));
	}

template<class _BidIt> inline
	_BidIt _Rotate_unchecked1(_BidIt _First, _BidIt _Mid, _BidIt _Last,
		bidirectional_iterator_tag)
	{	
	_Reverse_unchecked(_First, _Mid);
	_Reverse_unchecked(_Mid, _Last);
	pair<_BidIt, _BidIt> _Tmp = _Reverse_until_sentinel_unchecked(_First, _Mid, _Last);
	_Reverse_unchecked(_Tmp.first, _Tmp.second);
	return (_Mid != _Tmp.first ? _Tmp.first : _Tmp.second);
	}

template<class _RanIt> inline
	_RanIt _Rotate_unchecked1(_RanIt _First, _RanIt _Mid, _RanIt _Last,
		random_access_iterator_tag)
	{	
	_Reverse_unchecked(_First, _Mid);
	_Reverse_unchecked(_Mid, _Last);
	_Reverse_unchecked(_First, _Last);
	return (_First + (_Last - _Mid));
	}

template<class _FwdIt> inline
	_FwdIt _Rotate_unchecked(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
	{	
	if (_First == _Mid)
		return (_Last);
	if (_Mid == _Last)
		return (_First);
	return (_Rotate_unchecked1(_First, _Mid, _Last, _Iter_cat_t<_FwdIt>()));
	}

template<class _FwdIt> inline
	_FwdIt rotate(_FwdIt _First, _FwdIt _Mid, _FwdIt _Last)
	{	
	;
	;
	return (_Rechecked(_First,
		_Rotate_unchecked(_Unchecked(_First), _Unchecked(_Mid),
		_Unchecked(_Last))));
	}

	
template<class _Diff,
	class _Urng>
	class _Rng_from_urng
	{	
public:
	typedef typename make_unsigned<_Diff>::type _Ty0;
	typedef typename _Urng::result_type _Ty1;

	typedef typename _If<sizeof (_Ty1) < sizeof (_Ty0),
		_Ty0, _Ty1>::type _Udiff;


	explicit _Rng_from_urng(_Urng& _Func)
		: _Ref(_Func), _Bits(8 * sizeof (_Udiff)), _Bmask(_Udiff(-1))
		{	
		for (; (_Urng::max)() - (_Urng::min)() < _Bmask; _Bmask >>= 1)
			--_Bits;
		}

	_Diff operator()(_Diff _Index)
		{	
		for (; ; )
			{	
			_Udiff _Ret = 0;	
			_Udiff _Mask = 0;	

			while (_Mask < _Udiff(_Index - 1))
				{	
				_Ret <<= _Bits - 1;	
				_Ret <<= 1;
				_Ret |= _Get_bits();
				_Mask <<= _Bits - 1;	
				_Mask <<= 1;
				_Mask |= _Bmask;
				}

			
			if (_Ret / _Index < _Mask / _Index
				|| _Mask % _Index == _Udiff(_Index - 1))
				return (_Ret % _Index);
			}
		}

	_Udiff _Get_all_bits()
		{	
		_Udiff _Ret = 0;

		for (size_t _Num = 0; _Num < 8 * sizeof (_Udiff);
			_Num += _Bits)
			{	
			_Ret <<= _Bits - 1;	
			_Ret <<= 1;
			_Ret |= _Get_bits();
			}

		return (_Ret);
		}

	_Rng_from_urng(const _Rng_from_urng&) = delete;
	_Rng_from_urng& operator=(const _Rng_from_urng&) = delete;

private:
	_Udiff _Get_bits()
		{	
		for (; ; )
			{	
			_Udiff _Val = _Ref() - (_Urng::min)();

			if (_Val <= _Bmask)
				return (_Val);
			}
		}

	_Urng& _Ref;	
	size_t _Bits;	
	_Udiff _Bmask;	
	};

		
template<class _Elem>
	class __declspec(dllimport) _Yarn
	{	
public:
	typedef _Yarn<_Elem> _Myt;

	 _Yarn()
		: _Myptr(0), _Nul(0)
		{	
		}

	 _Yarn(const _Myt& _Right)
		: _Myptr(0), _Nul(0)
		{	
		*this = _Right;
		}

	 _Yarn(const _Elem *_Right)
		: _Myptr(0), _Nul(0)
		{	
		*this = _Right;
		}

	_Myt&  operator=(const _Myt& _Right)
		{	
		return (*this = _Right._Myptr);
		}

	_Myt&  operator=(const _Elem *_Right)
		{	
		if (_Myptr != _Right)
			{	
			_Tidy();

			if (_Right != 0)
				{	
				const _Elem *_Ptr = _Right;
				while (*_Ptr != (_Elem)0)
					++_Ptr;
				size_t _Count = ((const char *)++_Ptr - (const char *)_Right);

 




				_Myptr = (_Elem *):: malloc(_Count);
 #line 3760 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

				if (_Myptr != 0)
					:: memcpy(_Myptr, _Right, _Count);
				}
			}

		return (*this);
		}

	 ~_Yarn() noexcept
		{	
		_Tidy();
		}

	bool  empty() const
		{	
		return (_Myptr == 0);
		}

	const _Elem * c_str() const
		{	
		return (_Myptr != 0 ? _Myptr : &_Nul);
		}

	bool  _Empty() const
		{	
		return (_Myptr == 0);
		}

	const _Elem * _C_str() const
		{	
		return (_Myptr != 0 ? _Myptr : &_Nul);
		}

private:
	void  _Tidy()
		{	
		if (_Myptr != 0)

 



			:: free(_Myptr);
 #line 3805 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"

		_Myptr = 0;
		}

	_Elem *_Myptr;	
	_Elem _Nul;		
	};

	
template<class _Ty,
	class _Alloc>
	struct _Has_allocator_type
	{	
	template<class _Uty>
		static auto _Fn(int)
			-> is_convertible<_Alloc,
				typename _Uty::allocator_type>;
	template<class _Uty>
		static auto _Fn(_Wrap_int)
			-> false_type;

	typedef decltype(_Fn<_Ty>(0)) type;
	};

		
struct allocator_arg_t
	{	
	};

constexpr allocator_arg_t allocator_arg{};

[[noreturn]] __declspec(dllimport) void __cdecl _Xbad_alloc();
[[noreturn]] __declspec(dllimport) void __cdecl _Xinvalid_argument(  const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xlength_error(  const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xout_of_range(  const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xoverflow_error(  const char *);
[[noreturn]] __declspec(dllimport) void __cdecl _Xruntime_error(  const char *);
}

namespace std {
		
template<class _Ty,
	class _Alloc>
	struct uses_allocator
		: _Has_allocator_type<_Ty, _Alloc>::type
	{	
	};

 



#line 3858 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
}	
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 3863 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"
#line 3864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xutility"






#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning (disable: 4100 4390 4793 6326)

  

  

#line 26 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

  

#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

 
  
  
 #line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"






















 
 




#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
  
  
  
  
 #line 69 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

 






















































































#line 158 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

namespace std {
		
typedef unsigned char _Uint1_t;
typedef unsigned short _Uint2_t;

typedef unsigned long long _Uint8_t;

  
  

  
  

  

   




#line 180 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"



#line 184 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
    
   #line 186 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
  #line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

inline memory_order _Memory_order_upper_bound(memory_order _Order1,
	memory_order _Order2)
	{   














	static const memory_order _Upper[6][6] = {		
		{ memory_order_relaxed, memory_order_consume, memory_order_acquire,
		memory_order_release, memory_order_acq_rel, memory_order_seq_cst },
		{ memory_order_consume, memory_order_consume, memory_order_acquire,
		memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst },
		{ memory_order_acquire, memory_order_acquire, memory_order_acquire,
		memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst },
		{ memory_order_release, memory_order_acq_rel, memory_order_acq_rel,
		memory_order_release, memory_order_acq_rel, memory_order_seq_cst },
		{ memory_order_acq_rel, memory_order_acq_rel, memory_order_acq_rel,
		memory_order_acq_rel, memory_order_acq_rel, memory_order_seq_cst },
		{ memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst,
		memory_order_seq_cst, memory_order_seq_cst, memory_order_seq_cst
		}
		};

	if ((_Order1 < 0) || (6 <= _Order1)
		|| (_Order2 < 0) || (6 <= _Order2))
		{	
		;
		return (memory_order_seq_cst);
		}
	return (_Upper[_Order1][_Order2]);
	}

inline void _Validate_compare_exchange_memory_order(
	memory_order _Success, memory_order _Failure)
	{	
	

	switch (_Failure)
		{
	case memory_order_relaxed:
		break;

	case memory_order_seq_cst:
		if (_Success != memory_order_seq_cst)
			;
		break;

	case memory_order_acquire:
		if ((_Success == memory_order_consume) ||
			(_Success == memory_order_relaxed))
			;
		break;

	case memory_order_consume:
		if (_Success == memory_order_relaxed)
			;
		break;

	default:
		;
		break;
		}
	}


	
inline void _Store_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

 


#line 271 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	*_Tgt = _Value;
 #line 273 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	}

inline void _Store_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	

 



#line 283 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	_ReadWriteBarrier();
	*_Tgt = _Value;
 #line 286 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	}

inline void _Store_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


 




#line 298 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	_InterlockedExchange8((volatile char *)_Tgt, _Value);
 #line 300 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	}

inline void _Atomic_store_1(
	volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			_Store_relaxed_1(_Tgt, _Value);
			break;

		case memory_order_release:
			_Store_release_1(_Tgt, _Value);
			break;

		case memory_order_seq_cst:
			_Store_seq_cst_1(_Tgt, _Value);
			break;

		default:
			;
			break;
		}
	}

	
inline _Uint1_t _Load_seq_cst_1(volatile _Uint1_t *_Tgt)
	{	

	_Uint1_t _Value;

 



#line 336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	_Value = *_Tgt;
	_ReadWriteBarrier();
 #line 339 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

	return (_Value);
	}

inline _Uint1_t _Load_relaxed_1(volatile _Uint1_t *_Tgt)
	{	

	_Uint1_t _Value;

 


#line 352 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	_Value = *_Tgt;
 #line 354 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

	return (_Value);
	}

inline _Uint1_t _Load_acquire_1(volatile _Uint1_t *_Tgt)
	{	


	return (_Load_seq_cst_1(_Tgt));
	}

inline _Uint1_t _Atomic_load_1(
	volatile _Uint1_t *_Tgt, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Load_relaxed_1(_Tgt));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Load_acquire_1(_Tgt));

		case memory_order_seq_cst:
			return (_Load_seq_cst_1(_Tgt));

		default:
			;
			return (0);
		}
	}

	
inline _Uint1_t _Exchange_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedExchange8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Exchange_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedExchange8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Exchange_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedExchange8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Exchange_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedExchange8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Atomic_exchange_1(
	volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Exchange_relaxed_1(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Exchange_acquire_1(_Tgt, _Value));

		case memory_order_release:
			return (_Exchange_release_1(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Exchange_seq_cst_1(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

	
inline int _Compare_exchange_seq_cst_1(volatile _Uint1_t *_Tgt,
	_Uint1_t *_Exp, _Uint1_t _Value)
	{	

	_Uint1_t _Old_exp = *_Exp;	

	_Uint1_t _Prev = _InterlockedCompareExchange8((volatile char *)_Tgt,
		_Value, _Old_exp);

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_relaxed_1(volatile _Uint1_t *_Tgt,
	_Uint1_t *_Exp, _Uint1_t _Value)
	{	

	_Uint1_t _Old_exp = *_Exp;	

	_Uint1_t _Prev = _InterlockedCompareExchange8((volatile char *)_Tgt,
		_Value, _Old_exp);

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_acquire_1(volatile _Uint1_t *_Tgt,
	_Uint1_t *_Exp, _Uint1_t _Value)
	{	

	_Uint1_t _Old_exp = *_Exp;	

	_Uint1_t _Prev = _InterlockedCompareExchange8((volatile char *)_Tgt,
		_Value, _Old_exp);

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_release_1(volatile _Uint1_t *_Tgt,
	_Uint1_t *_Exp, _Uint1_t _Value)
	{	

	_Uint1_t _Old_exp = *_Exp;	

	_Uint1_t _Prev = _InterlockedCompareExchange8((volatile char *)_Tgt,
		_Value, _Old_exp);

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Atomic_compare_exchange_strong_1(
	volatile _Uint1_t *_Tgt, _Uint1_t *_Exp, _Uint1_t _Value,
	memory_order _Order1, memory_order _Order2)
	{	
	_Validate_compare_exchange_memory_order(_Order1, _Order2);

	switch (_Memory_order_upper_bound(_Order1, _Order2))
		{
		case memory_order_relaxed:
			return (_Compare_exchange_relaxed_1(_Tgt, _Exp, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Compare_exchange_acquire_1(_Tgt, _Exp, _Value));

		case memory_order_release:
			return (_Compare_exchange_release_1(_Tgt, _Exp, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Compare_exchange_seq_cst_1(_Tgt, _Exp, _Value));

		default:
			;
			return (0);
		}
	}

inline int _Atomic_compare_exchange_weak_1(
	volatile _Uint1_t *_Tgt, _Uint1_t *_Exp, _Uint1_t _Value,
	memory_order _Order1, memory_order _Order2)
	{	
	

	return (_Atomic_compare_exchange_strong_1(_Tgt, _Exp, _Value,
		_Order1, _Order2));
	}

	
inline _Uint1_t _Fetch_add_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedExchangeAdd8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Fetch_add_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedExchangeAdd8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Fetch_add_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedExchangeAdd8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Fetch_add_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedExchangeAdd8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Atomic_fetch_add_1(
	volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_add_relaxed_1(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_add_acquire_1(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_add_release_1(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_add_seq_cst_1(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

inline _Uint1_t _Atomic_fetch_sub_1(
	volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
	{	
	return (_Atomic_fetch_add_1(_Tgt, 0 - _Value, _Order));
	}

	
inline _Uint1_t _Fetch_and_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedAnd8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Fetch_and_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedAnd8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Fetch_and_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedAnd8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Fetch_and_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedAnd8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Atomic_fetch_and_1(
	volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_and_relaxed_1(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_and_acquire_1(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_and_release_1(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_and_seq_cst_1(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

	
inline _Uint1_t _Fetch_or_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedOr8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Fetch_or_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedOr8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Fetch_or_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedOr8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Fetch_or_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedOr8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Atomic_fetch_or_1(
	volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_or_relaxed_1(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_or_acquire_1(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_or_release_1(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_or_seq_cst_1(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

	
inline _Uint1_t _Fetch_xor_seq_cst_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedXor8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Fetch_xor_relaxed_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedXor8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Fetch_xor_acquire_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedXor8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Fetch_xor_release_1(volatile _Uint1_t *_Tgt, _Uint1_t _Value)
	{	


	return (_InterlockedXor8((volatile char *)_Tgt, _Value));
	}

inline _Uint1_t _Atomic_fetch_xor_1(
	volatile _Uint1_t *_Tgt, _Uint1_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_xor_relaxed_1(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_xor_acquire_1(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_xor_release_1(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_xor_seq_cst_1(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

	
inline void _Store_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

 


#line 781 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	*_Tgt = _Value;
 #line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	}

inline void _Store_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	

 



#line 793 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	_ReadWriteBarrier();
	*_Tgt = _Value;
 #line 796 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	}

inline void _Store_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


 




#line 808 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	_InterlockedExchange16((volatile short *)_Tgt, _Value);
 #line 810 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	}

inline void _Atomic_store_2(
	volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			_Store_relaxed_2(_Tgt, _Value);
			break;

		case memory_order_release:
			_Store_release_2(_Tgt, _Value);
			break;

		case memory_order_seq_cst:
			_Store_seq_cst_2(_Tgt, _Value);
			break;

		default:
			;
			break;
		}
	}

	
inline _Uint2_t _Load_seq_cst_2(volatile _Uint2_t *_Tgt)
	{	

	_Uint2_t _Value;

 



#line 846 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	_Value = *_Tgt;
	_ReadWriteBarrier();
 #line 849 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

	return (_Value);
	}

inline _Uint2_t _Load_relaxed_2(volatile _Uint2_t *_Tgt)
	{	

	_Uint2_t _Value;

 


#line 862 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	_Value = *_Tgt;
 #line 864 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

	return (_Value);
	}

inline _Uint2_t _Load_acquire_2(volatile _Uint2_t *_Tgt)
	{	


	return (_Load_seq_cst_2(_Tgt));
	}

inline _Uint2_t _Atomic_load_2(
	volatile _Uint2_t *_Tgt, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Load_relaxed_2(_Tgt));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Load_acquire_2(_Tgt));

		case memory_order_seq_cst:
			return (_Load_seq_cst_2(_Tgt));

		default:
			;
			return (0);
		}
	}

	
inline _Uint2_t _Exchange_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedExchange16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Exchange_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedExchange16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Exchange_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedExchange16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Exchange_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedExchange16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Atomic_exchange_2(
	volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Exchange_relaxed_2(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Exchange_acquire_2(_Tgt, _Value));

		case memory_order_release:
			return (_Exchange_release_2(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Exchange_seq_cst_2(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

	
inline int _Compare_exchange_seq_cst_2(volatile _Uint2_t *_Tgt,
	_Uint2_t *_Exp, _Uint2_t _Value)
	{	

	_Uint2_t _Old_exp = *_Exp;	

	_Uint2_t _Prev = _InterlockedCompareExchange16((volatile short *)_Tgt,
		_Value, _Old_exp);

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_relaxed_2(volatile _Uint2_t *_Tgt,
	_Uint2_t *_Exp, _Uint2_t _Value)
	{	

	_Uint2_t _Old_exp = *_Exp;	

	_Uint2_t _Prev = _InterlockedCompareExchange16((volatile short *)_Tgt,
		_Value, _Old_exp);

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_acquire_2(volatile _Uint2_t *_Tgt,
	_Uint2_t *_Exp, _Uint2_t _Value)
	{	

	_Uint2_t _Old_exp = *_Exp;	

	_Uint2_t _Prev = _InterlockedCompareExchange16((volatile short *)_Tgt,
		_Value, _Old_exp);

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_release_2(volatile _Uint2_t *_Tgt,
	_Uint2_t *_Exp, _Uint2_t _Value)
	{	

	_Uint2_t _Old_exp = *_Exp;	

	_Uint2_t _Prev = _InterlockedCompareExchange16((volatile short *)_Tgt,
		_Value, _Old_exp);

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Atomic_compare_exchange_strong_2(
	volatile _Uint2_t *_Tgt, _Uint2_t *_Exp, _Uint2_t _Value,
	memory_order _Order1, memory_order _Order2)
	{	
	_Validate_compare_exchange_memory_order(_Order1, _Order2);

	switch (_Memory_order_upper_bound(_Order1, _Order2))
		{
		case memory_order_relaxed:
			return (_Compare_exchange_relaxed_2(_Tgt, _Exp, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Compare_exchange_acquire_2(_Tgt, _Exp, _Value));

		case memory_order_release:
			return (_Compare_exchange_release_2(_Tgt, _Exp, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Compare_exchange_seq_cst_2(_Tgt, _Exp, _Value));

		default:
			;
			return (0);
		}
	}

inline int _Atomic_compare_exchange_weak_2(
	volatile _Uint2_t *_Tgt, _Uint2_t *_Exp, _Uint2_t _Value,
	memory_order _Order1, memory_order _Order2)
	{	
	

	return (_Atomic_compare_exchange_strong_2(_Tgt, _Exp, _Value,
		_Order1, _Order2));
	}

	
inline _Uint2_t _Fetch_add_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedExchangeAdd16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Fetch_add_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedExchangeAdd16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Fetch_add_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedExchangeAdd16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Fetch_add_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedExchangeAdd16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Atomic_fetch_add_2(
	volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_add_relaxed_2(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_add_acquire_2(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_add_release_2(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_add_seq_cst_2(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

inline _Uint2_t _Atomic_fetch_sub_2(
	volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
	{	
	return (_Atomic_fetch_add_2(_Tgt, 0 - _Value, _Order));
	}

	
inline _Uint2_t _Fetch_and_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedAnd16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Fetch_and_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedAnd16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Fetch_and_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedAnd16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Fetch_and_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedAnd16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Atomic_fetch_and_2(
	volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_and_relaxed_2(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_and_acquire_2(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_and_release_2(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_and_seq_cst_2(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

	
inline _Uint2_t _Fetch_or_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedOr16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Fetch_or_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedOr16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Fetch_or_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedOr16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Fetch_or_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedOr16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Atomic_fetch_or_2(
	volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_or_relaxed_2(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_or_acquire_2(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_or_release_2(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_or_seq_cst_2(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

	
inline _Uint2_t _Fetch_xor_seq_cst_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedXor16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Fetch_xor_relaxed_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedXor16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Fetch_xor_acquire_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedXor16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Fetch_xor_release_2(volatile _Uint2_t *_Tgt, _Uint2_t _Value)
	{	


	return (_InterlockedXor16((volatile short *)_Tgt, _Value));
	}

inline _Uint2_t _Atomic_fetch_xor_2(
	volatile _Uint2_t *_Tgt, _Uint2_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_xor_relaxed_2(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_xor_acquire_2(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_xor_release_2(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_xor_seq_cst_2(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

	
inline void _Store_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

 


#line 1291 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	*_Tgt = _Value;
 #line 1293 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	}

inline void _Store_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	

 



#line 1303 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	_ReadWriteBarrier();
	*_Tgt = _Value;
 #line 1306 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	}

inline void _Store_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


 




#line 1318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	_InterlockedExchange((volatile long *)_Tgt, _Value);
 #line 1320 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	}

inline void _Atomic_store_4(
	volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			_Store_relaxed_4(_Tgt, _Value);
			break;

		case memory_order_release:
			_Store_release_4(_Tgt, _Value);
			break;

		case memory_order_seq_cst:
			_Store_seq_cst_4(_Tgt, _Value);
			break;

		default:
			;
			break;
		}
	}

	
inline _Uint4_t _Load_seq_cst_4(volatile _Uint4_t *_Tgt)
	{	

	_Uint4_t _Value;

 



#line 1356 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	_Value = *_Tgt;
	_ReadWriteBarrier();
 #line 1359 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

	return (_Value);
	}

inline _Uint4_t _Load_relaxed_4(volatile _Uint4_t *_Tgt)
	{	

	_Uint4_t _Value;

 


#line 1372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	_Value = *_Tgt;
 #line 1374 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

	return (_Value);
	}

inline _Uint4_t _Load_acquire_4(volatile _Uint4_t *_Tgt)
	{	


	return (_Load_seq_cst_4(_Tgt));
	}

inline _Uint4_t _Atomic_load_4(
	volatile _Uint4_t *_Tgt, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Load_relaxed_4(_Tgt));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Load_acquire_4(_Tgt));

		case memory_order_seq_cst:
			return (_Load_seq_cst_4(_Tgt));

		default:
			;
			return (0);
		}
	}

	
inline _Uint4_t _Exchange_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedExchange((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Exchange_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedExchange((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Exchange_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedExchange((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Exchange_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedExchange((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Atomic_exchange_4(
	volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Exchange_relaxed_4(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Exchange_acquire_4(_Tgt, _Value));

		case memory_order_release:
			return (_Exchange_release_4(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Exchange_seq_cst_4(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

	
inline int _Compare_exchange_seq_cst_4(volatile _Uint4_t *_Tgt,
	_Uint4_t *_Exp, _Uint4_t _Value)
	{	

	_Uint4_t _Old_exp = *_Exp;	

	_Uint4_t _Prev = _InterlockedCompareExchange((volatile long *)_Tgt,
		_Value, _Old_exp);

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_relaxed_4(volatile _Uint4_t *_Tgt,
	_Uint4_t *_Exp, _Uint4_t _Value)
	{	

	_Uint4_t _Old_exp = *_Exp;	

	_Uint4_t _Prev = _InterlockedCompareExchange((volatile long *)_Tgt,
		_Value, _Old_exp);

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_acquire_4(volatile _Uint4_t *_Tgt,
	_Uint4_t *_Exp, _Uint4_t _Value)
	{	

	_Uint4_t _Old_exp = *_Exp;	

	_Uint4_t _Prev = _InterlockedCompareExchange((volatile long *)_Tgt,
		_Value, _Old_exp);

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_release_4(volatile _Uint4_t *_Tgt,
	_Uint4_t *_Exp, _Uint4_t _Value)
	{	

	_Uint4_t _Old_exp = *_Exp;	

	_Uint4_t _Prev = _InterlockedCompareExchange((volatile long *)_Tgt,
		_Value, _Old_exp);

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Atomic_compare_exchange_strong_4(
	volatile _Uint4_t *_Tgt, _Uint4_t *_Exp, _Uint4_t _Value,
	memory_order _Order1, memory_order _Order2)
	{	
	_Validate_compare_exchange_memory_order(_Order1, _Order2);

	switch (_Memory_order_upper_bound(_Order1, _Order2))
		{
		case memory_order_relaxed:
			return (_Compare_exchange_relaxed_4(_Tgt, _Exp, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Compare_exchange_acquire_4(_Tgt, _Exp, _Value));

		case memory_order_release:
			return (_Compare_exchange_release_4(_Tgt, _Exp, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Compare_exchange_seq_cst_4(_Tgt, _Exp, _Value));

		default:
			;
			return (0);
		}
	}

inline int _Atomic_compare_exchange_weak_4(
	volatile _Uint4_t *_Tgt, _Uint4_t *_Exp, _Uint4_t _Value,
	memory_order _Order1, memory_order _Order2)
	{	
	

	return (_Atomic_compare_exchange_strong_4(_Tgt, _Exp, _Value,
		_Order1, _Order2));
	}

	
inline _Uint4_t _Fetch_add_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedExchangeAdd((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Fetch_add_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedExchangeAdd((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Fetch_add_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedExchangeAdd((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Fetch_add_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedExchangeAdd((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Atomic_fetch_add_4(
	volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_add_relaxed_4(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_add_acquire_4(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_add_release_4(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_add_seq_cst_4(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

inline _Uint4_t _Atomic_fetch_sub_4(
	volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
	{	
	return (_Atomic_fetch_add_4(_Tgt, 0 - _Value, _Order));
	}

	
inline _Uint4_t _Fetch_and_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedAnd((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Fetch_and_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedAnd((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Fetch_and_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedAnd((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Fetch_and_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedAnd((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Atomic_fetch_and_4(
	volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_and_relaxed_4(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_and_acquire_4(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_and_release_4(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_and_seq_cst_4(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

	
inline _Uint4_t _Fetch_or_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedOr((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Fetch_or_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedOr((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Fetch_or_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedOr((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Fetch_or_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedOr((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Atomic_fetch_or_4(
	volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_or_relaxed_4(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_or_acquire_4(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_or_release_4(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_or_seq_cst_4(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

	
inline _Uint4_t _Fetch_xor_seq_cst_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedXor((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Fetch_xor_relaxed_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedXor((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Fetch_xor_acquire_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedXor((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Fetch_xor_release_4(volatile _Uint4_t *_Tgt, _Uint4_t _Value)
	{	


	return (_InterlockedXor((volatile long *)_Tgt, _Value));
	}

inline _Uint4_t _Atomic_fetch_xor_4(
	volatile _Uint4_t *_Tgt, _Uint4_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_xor_relaxed_4(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_xor_acquire_4(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_xor_release_4(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_xor_seq_cst_4(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

	
inline void _Store_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

 
	*_Tgt = _Value;

 




#line 1806 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	}

inline void _Store_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	

 
	_ReadWriteBarrier();
	*_Tgt = _Value;

 





#line 1822 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	}

inline void _Store_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


 




#line 1834 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	_InterlockedExchange64((volatile long long *)_Tgt, _Value);
 #line 1836 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	}

inline void _Atomic_store_8(
	volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			_Store_relaxed_8(_Tgt, _Value);
			break;

		case memory_order_release:
			_Store_release_8(_Tgt, _Value);
			break;

		case memory_order_seq_cst:
			_Store_seq_cst_8(_Tgt, _Value);
			break;

		default:
			;
			break;
		}
	}

	
inline _Uint8_t _Load_seq_cst_8(volatile _Uint8_t *_Tgt)
	{	

	_Uint8_t _Value;

 
	_Value = *_Tgt;
	_ReadWriteBarrier();

 









#line 1882 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

	return (_Value);
	}

inline _Uint8_t _Load_relaxed_8(volatile _Uint8_t *_Tgt)
	{	

	_Uint8_t _Value;

 
	_Value = *_Tgt;

 







#line 1903 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

	return (_Value);
	}

inline _Uint8_t _Load_acquire_8(volatile _Uint8_t *_Tgt)
	{	


	return (_Load_seq_cst_8(_Tgt));
	}

inline _Uint8_t _Atomic_load_8(
	volatile _Uint8_t *_Tgt, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Load_relaxed_8(_Tgt));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Load_acquire_8(_Tgt));

		case memory_order_seq_cst:
			return (_Load_seq_cst_8(_Tgt));

		default:
			;
			return (0);
		}
	}

	
inline _Uint8_t _Exchange_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedExchange64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Exchange_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedExchange64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Exchange_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedExchange64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Exchange_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedExchange64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Atomic_exchange_8(
	volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Exchange_relaxed_8(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Exchange_acquire_8(_Tgt, _Value));

		case memory_order_release:
			return (_Exchange_release_8(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Exchange_seq_cst_8(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

	
inline int _Compare_exchange_seq_cst_8(volatile _Uint8_t *_Tgt,
	_Uint8_t *_Exp, _Uint8_t _Value)
	{	

	_Uint8_t _Old_exp = *_Exp;	

	_Uint8_t _Prev = _InterlockedCompareExchange64((volatile long long *)_Tgt,
		_Value, _Old_exp);

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_relaxed_8(volatile _Uint8_t *_Tgt,
	_Uint8_t *_Exp, _Uint8_t _Value)
	{	

	_Uint8_t _Old_exp = *_Exp;	

	_Uint8_t _Prev = _InterlockedCompareExchange64((volatile long long *)_Tgt,
		_Value, _Old_exp);

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_acquire_8(volatile _Uint8_t *_Tgt,
	_Uint8_t *_Exp, _Uint8_t _Value)
	{	

	_Uint8_t _Old_exp = *_Exp;	

	_Uint8_t _Prev = _InterlockedCompareExchange64((volatile long long *)_Tgt,
		_Value, _Old_exp);

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Compare_exchange_release_8(volatile _Uint8_t *_Tgt,
	_Uint8_t *_Exp, _Uint8_t _Value)
	{	

	_Uint8_t _Old_exp = *_Exp;	

	_Uint8_t _Prev = _InterlockedCompareExchange64((volatile long long *)_Tgt,
		_Value, _Old_exp);

	if (_Prev == _Old_exp)
		return (1);
	else
		{	
		*_Exp = _Prev;
		return (0);
		}
	}

inline int _Atomic_compare_exchange_strong_8(
	volatile _Uint8_t *_Tgt, _Uint8_t *_Exp, _Uint8_t _Value,
	memory_order _Order1, memory_order _Order2)
	{	
	_Validate_compare_exchange_memory_order(_Order1, _Order2);

	switch (_Memory_order_upper_bound(_Order1, _Order2))
		{
		case memory_order_relaxed:
			return (_Compare_exchange_relaxed_8(_Tgt, _Exp, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Compare_exchange_acquire_8(_Tgt, _Exp, _Value));

		case memory_order_release:
			return (_Compare_exchange_release_8(_Tgt, _Exp, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Compare_exchange_seq_cst_8(_Tgt, _Exp, _Value));

		default:
			;
			return (0);
		}
	}

inline int _Atomic_compare_exchange_weak_8(
	volatile _Uint8_t *_Tgt, _Uint8_t *_Exp, _Uint8_t _Value,
	memory_order _Order1, memory_order _Order2)
	{	
	

	return (_Atomic_compare_exchange_strong_8(_Tgt, _Exp, _Value,
		_Order1, _Order2));
	}

	
inline _Uint8_t _Fetch_add_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedExchangeAdd64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Fetch_add_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedExchangeAdd64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Fetch_add_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedExchangeAdd64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Fetch_add_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedExchangeAdd64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Atomic_fetch_add_8(
	volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_add_relaxed_8(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_add_acquire_8(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_add_release_8(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_add_seq_cst_8(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

inline _Uint8_t _Atomic_fetch_sub_8(
	volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
	{	
	return (_Atomic_fetch_add_8(_Tgt, 0 - _Value, _Order));
	}

	
inline _Uint8_t _Fetch_and_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedAnd64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Fetch_and_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedAnd64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Fetch_and_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedAnd64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Fetch_and_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedAnd64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Atomic_fetch_and_8(
	volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_and_relaxed_8(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_and_acquire_8(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_and_release_8(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_and_seq_cst_8(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

	
inline _Uint8_t _Fetch_or_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedOr64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Fetch_or_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedOr64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Fetch_or_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedOr64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Fetch_or_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedOr64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Atomic_fetch_or_8(
	volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_or_relaxed_8(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_or_acquire_8(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_or_release_8(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_or_seq_cst_8(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

	
inline _Uint8_t _Fetch_xor_seq_cst_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedXor64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Fetch_xor_relaxed_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedXor64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Fetch_xor_acquire_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedXor64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Fetch_xor_release_8(volatile _Uint8_t *_Tgt, _Uint8_t _Value)
	{	


	return (_InterlockedXor64((volatile long long *)_Tgt, _Value));
	}

inline _Uint8_t _Atomic_fetch_xor_8(
	volatile _Uint8_t *_Tgt, _Uint8_t _Value, memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_Fetch_xor_relaxed_8(_Tgt, _Value));

		case memory_order_consume:
		case memory_order_acquire:
			return (_Fetch_xor_acquire_8(_Tgt, _Value));

		case memory_order_release:
			return (_Fetch_xor_release_8(_Tgt, _Value));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_Fetch_xor_seq_cst_8(_Tgt, _Value));

		default:
			;
			return (0);
		}
	}

inline int _Atomic_flag_test_and_set(volatile _Atomic_flag_t *_Flag,
	memory_order _Order)
	{	
	switch (_Order)
		{
		case memory_order_relaxed:
			return (_interlockedbittestandset(_Flag, 0));

		case memory_order_consume:
		case memory_order_acquire:
			return (_interlockedbittestandset(_Flag, 0));

		case memory_order_release:
			return (_interlockedbittestandset(_Flag, 0));

		case memory_order_acq_rel:
		case memory_order_seq_cst:
			return (_interlockedbittestandset(_Flag, 0));

		default:
			;
			return (0);
		}
	}

inline void _Atomic_flag_clear(volatile _Atomic_flag_t *_Flag,
	memory_order _Order)
	{	
	static_assert(sizeof(_Atomic_flag_t) == sizeof(_Uint4_t),
		"Unexpected _Atomic_flag_t size");

	switch (_Order)
		{
		case memory_order_relaxed:
		case memory_order_release:
		case memory_order_seq_cst:
			_Atomic_store_4((volatile _Uint4_t *)_Flag, 0, _Order);
			break;

		default:
			;
			break;
		}
	}

inline void _Atomic_thread_fence(memory_order _Order)
	{	
 





#line 2376 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	_ReadWriteBarrier();
	if (_Order == memory_order_seq_cst)
		{	
		static _Uint4_t _Guard;
		_Atomic_exchange_4(&_Guard, 0, memory_order_seq_cst);
		_ReadWriteBarrier();
		}
 #line 2384 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
	}

inline void _Atomic_signal_fence(memory_order _Order)
	{	
	_ReadWriteBarrier();
	}

 


#line 2395 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
 
 #line 2397 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

		
		



inline void _Lock_spin_lock(
	volatile _Atomic_flag_t *_Flag)
	{	
	while (_Atomic_flag_test_and_set(_Flag, memory_order_acquire))
		;
	}

inline void _Unlock_spin_lock(
	volatile _Atomic_flag_t *_Flag)
	{	
	_Atomic_flag_clear(_Flag, memory_order_release);
	}

		

inline void _Atomic_copy(
	volatile _Atomic_flag_t *_Flag, size_t _Size,
		volatile void *_Tgt, volatile const void *_Src,
			memory_order _Order)
	{	
	_Lock_spin_lock(_Flag);
	:: memcpy((void *)_Tgt, (void *)_Src, _Size);
	_Unlock_spin_lock(_Flag);
	}

inline void _Atomic_exchange(
	volatile _Atomic_flag_t *_Flag, size_t _Size,
		volatile void *_Tgt, volatile void *_Src,
			memory_order _Order)
	{	
	unsigned char *_Left = (unsigned char *)_Tgt;
	unsigned char *_Right = (unsigned char *)_Src;

	_Lock_spin_lock(_Flag);
	for (; 0 < _Size; --_Size)
		{	
		unsigned char _Tmp = *_Left;
		*_Left++ = *_Right;
		*_Right++ = _Tmp;
		}
	_Unlock_spin_lock(_Flag);
	}

inline int _Atomic_compare_exchange_weak(
	volatile _Atomic_flag_t *_Flag, size_t _Size,
		volatile void *_Tgt, volatile void *_Exp, const volatile void *_Src,
			memory_order _Order1, memory_order _Order2)
	{	
	int _Result;

	_Lock_spin_lock(_Flag);
	_Result = :: memcmp((const void *)_Tgt, (const void *)_Exp, _Size) == 0;
	if (_Result != 0)
		:: memcpy((void *)_Tgt, (void *)_Src, _Size);
	else
		:: memcpy((void *)_Exp, (void *)_Tgt, _Size);
	_Unlock_spin_lock(_Flag);
	return (_Result);
	}

inline int _Atomic_compare_exchange_strong(
	volatile _Atomic_flag_t *_Flag, size_t _Size,
	volatile void *_Tgt, volatile void *_Exp, const volatile void *_Src,
	memory_order _Order1, memory_order _Order2)
	{	
	return (_Atomic_compare_exchange_weak(_Flag, _Size, _Tgt, _Exp, _Src,
		_Order1, _Order2));
	}

		
inline int _Atomic_is_lock_free_1(void)
	{	
	return (1 <= 8);
	}

inline int _Atomic_is_lock_free_2(void)
	{	
	return (2 <= 8);
	}

inline int _Atomic_is_lock_free_4(void)
	{	
	return (4 <= 8);
	}

inline int _Atomic_is_lock_free_8(void)
	{	
	return (8 <= 8);
	}

 


















































#line 2545 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
}

 





#line 2554 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 2559 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"
#line 2560 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xatomic.h"






#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4522 4800)

		









namespace std {
inline memory_order _Get_memory_order(memory_order _Order)
	{	
		
	return (_Order == memory_order_acq_rel ? memory_order_acquire
		: _Order == memory_order_release ? memory_order_relaxed
		: _Order);
	}

		
template<class _Ty>
	_Ty kill_dependency(_Ty _Arg) noexcept
	{	
	return (_Arg);
	}

		
template <class _Ty>
	struct atomic;
template <class _Ty>
	bool atomic_is_lock_free(const volatile atomic<_Ty> *) noexcept;
template <class _Ty>
	bool atomic_is_lock_free(const atomic<_Ty> *) noexcept;
template <class _Ty>
	void atomic_init(volatile atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
	void atomic_init(atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
	void atomic_store(volatile atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
	void atomic_store(atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
	void atomic_store_explicit(volatile atomic<_Ty> *, _Ty,
		memory_order) noexcept;
template <class _Ty>
	void atomic_store_explicit(atomic<_Ty> *, _Ty,
		memory_order) noexcept;
template <class _Ty>
	_Ty atomic_load(const volatile atomic<_Ty> *) noexcept;
template <class _Ty>
	_Ty atomic_load(const atomic<_Ty> *) noexcept;
template <class _Ty>
	_Ty atomic_load_explicit(const volatile atomic<_Ty> *,
		memory_order) noexcept;
template <class _Ty>
	_Ty atomic_load_explicit(const atomic<_Ty> *,
		memory_order) noexcept;
template <class _Ty>
	_Ty atomic_exchange(volatile atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_exchange(atomic<_Ty> *, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_exchange_explicit(volatile atomic<_Ty> *, _Ty,
		memory_order) noexcept;
template <class _Ty>
	_Ty atomic_exchange_explicit(atomic<_Ty> *, _Ty,
		memory_order) noexcept;
template <class _Ty>
	bool atomic_compare_exchange_weak(volatile atomic<_Ty> *,
		_Ty *, _Ty) noexcept;
template <class _Ty>
	bool atomic_compare_exchange_weak(atomic<_Ty> *,
		_Ty *, _Ty) noexcept;
template <class _Ty>
	bool atomic_compare_exchange_weak_explicit(
		volatile atomic<_Ty> *, _Ty *, _Ty,
			memory_order, memory_order) noexcept;
template <class _Ty>
	bool atomic_compare_exchange_weak_explicit(
		atomic<_Ty> *, _Ty *, _Ty,
			memory_order, memory_order) noexcept;
template <class _Ty>
	bool atomic_compare_exchange_strong(volatile atomic<_Ty> *,
		_Ty *, _Ty) noexcept;
template <class _Ty>
	bool atomic_compare_exchange_strong(atomic<_Ty> *,
		_Ty *, _Ty) noexcept;
template <class _Ty>
	bool atomic_compare_exchange_strong_explicit(
		volatile atomic<_Ty> *, _Ty *, _Ty,
			memory_order, memory_order) noexcept;
template <class _Ty>
	bool atomic_compare_exchange_strong_explicit(
		atomic<_Ty> *, _Ty *, _Ty,
			memory_order, memory_order) noexcept;

		
template <class _Ty>
	_Ty atomic_fetch_add(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_add(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_add_explicit(volatile atomic<_Ty>*, _Ty,
		memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_add_explicit(atomic<_Ty>*, _Ty,
		memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_sub(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_sub(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_sub_explicit(volatile atomic<_Ty>*, _Ty,
		memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_sub_explicit(atomic<_Ty>*, _Ty,
		memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_and(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_and(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_and_explicit(volatile atomic<_Ty>*, _Ty,
		memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_and_explicit(atomic<_Ty>*, _Ty,
		memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_or(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_or(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_or_explicit(volatile atomic<_Ty>*, _Ty,
		memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_or_explicit(atomic<_Ty>*, _Ty,
		memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_xor(volatile atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_xor(atomic<_Ty>*, _Ty) noexcept;
template <class _Ty>
	_Ty atomic_fetch_xor_explicit(volatile atomic<_Ty>*, _Ty,
		memory_order) noexcept;
template <class _Ty>
	_Ty atomic_fetch_xor_explicit(atomic<_Ty>*, _Ty,
		memory_order) noexcept;

		

typedef struct atomic_flag
	{	
	bool test_and_set(memory_order _Order = memory_order_seq_cst)
		volatile noexcept;
	bool test_and_set(memory_order _Order = memory_order_seq_cst) noexcept;
	void clear(memory_order _Order = memory_order_seq_cst)
		volatile noexcept;
	void clear(memory_order _Order = memory_order_seq_cst) noexcept;

	_Atomic_flag_t _My_flag;

	atomic_flag() noexcept = default;
	atomic_flag(const atomic_flag&) = delete;
	atomic_flag& operator=(const atomic_flag&) = delete;
	atomic_flag& operator=(const atomic_flag&) volatile = delete;
	} atomic_flag;

inline bool atomic_flag::test_and_set(memory_order _Order)
		volatile noexcept
	{	
	return (_Atomic_flag_test_and_set(&_My_flag, _Order));
	}

inline bool atomic_flag::test_and_set(memory_order _Order) noexcept
	{	
	return (_Atomic_flag_test_and_set(&_My_flag, _Order));
	}

inline void atomic_flag::clear(memory_order _Order)
	volatile noexcept
	{	
	_Atomic_flag_clear(&_My_flag, _Order);
	}

inline void atomic_flag::clear(memory_order _Order) noexcept
	{	
	_Atomic_flag_clear(&_My_flag, _Order);
	}

inline bool atomic_flag_test_and_set(volatile atomic_flag *_Flag) noexcept
	{	
	return (_Atomic_flag_test_and_set(&_Flag->_My_flag, memory_order_seq_cst));
	}

inline bool atomic_flag_test_and_set(atomic_flag *_Flag) noexcept
	{	
	return (_Atomic_flag_test_and_set(&_Flag->_My_flag, memory_order_seq_cst));
	}

inline bool atomic_flag_test_and_set_explicit(
	volatile atomic_flag *_Flag, memory_order _Order) noexcept
	{	
	return (_Atomic_flag_test_and_set(&_Flag->_My_flag, _Order));
	}

inline bool atomic_flag_test_and_set_explicit(
	atomic_flag *_Flag, memory_order _Order) noexcept
	{	
	return (_Atomic_flag_test_and_set(&_Flag->_My_flag, _Order));
	}

inline void atomic_flag_clear(volatile atomic_flag *_Flag) noexcept
	{	
	_Atomic_flag_clear(&_Flag->_My_flag, memory_order_seq_cst);
	}

inline void atomic_flag_clear(atomic_flag *_Flag) noexcept
	{	
	_Atomic_flag_clear(&_Flag->_My_flag, memory_order_seq_cst);
	}

inline void atomic_flag_clear_explicit(
	volatile atomic_flag *_Flag, memory_order _Order) noexcept
	{	
	_Atomic_flag_clear(&_Flag->_My_flag, _Order);
	}

inline void atomic_flag_clear_explicit(
	atomic_flag *_Flag, memory_order _Order) noexcept
	{	
	_Atomic_flag_clear(&_Flag->_My_flag, _Order);
	}

		
template<unsigned _Bytes>
	struct _Atomic_impl
	{	
	typedef _Uint1_t _My_int;	

	constexpr _Atomic_impl() noexcept
		: _My_flag(0)
		{	
		}

	bool _Is_lock_free() const volatile
		{	
		return (false);
		}

	void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
		{	
		_Atomic_copy(&_My_flag, _Bytes, _Tgt, _Src, _Order);
		}

	void _Load(void *_Tgt, const void *_Src,
		memory_order _Order) const volatile
		{	
		_Atomic_copy(&_My_flag, _Bytes, _Tgt, _Src, _Order);
		}

	void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
		{	
		_Atomic_exchange(&_My_flag, _Bytes, _Left, _Right, _Order);
		}

	bool _Compare_exchange_weak(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_weak(
			&_My_flag, _Bytes, _Tgt, _Exp, _Value, _Order1, _Order2));
		}

	bool _Compare_exchange_strong(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_strong(
			&_My_flag, _Bytes, _Tgt, _Exp, _Value, _Order1, _Order2));
		}

private:
	mutable _Atomic_flag_t _My_flag;
	};

		

template<>
	struct _Atomic_impl<1U>
	{	
	typedef _Uint1_t _My_int;

	bool _Is_lock_free() const volatile
		{	
		return (_Atomic_is_lock_free_1());
		}

	void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
		{	
		_Atomic_store_1((_My_int*)_Tgt, *(_My_int*)_Src, _Order);
		}

	void _Load(void *_Tgt, const void *_Src,
		memory_order _Order) const volatile
		{	
		*(_My_int*)_Tgt = _Atomic_load_1((_My_int*)_Src, _Order);
		}

	void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
		{	
		*(_My_int*)_Right =
			_Atomic_exchange_1((_My_int*)_Left, *(_My_int*)_Right, _Order);
		}

	bool _Compare_exchange_weak(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_weak_1(
			(_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
			_Order1, _Order2));
		}

	bool _Compare_exchange_strong(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_strong_1(
			(_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
			_Order1, _Order2));
		}
	};

template<>
	struct _Atomic_impl<2U>
	{	
	typedef _Uint2_t _My_int;

	bool _Is_lock_free() const volatile
		{	
		return (_Atomic_is_lock_free_2());
		}

	void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
		{	
		_Atomic_store_2((_My_int*)_Tgt, *(_My_int*)_Src, _Order);
		}

	void _Load(void *_Tgt, const void *_Src,
		memory_order _Order) const volatile
		{	
		*(_My_int*)_Tgt = _Atomic_load_2((_My_int*)_Src, _Order);
		}

	void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
		{	
		*(_My_int*)_Right =
			_Atomic_exchange_2((_My_int*)_Left, *(_My_int*)_Right, _Order);
		}

	bool _Compare_exchange_weak(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_weak_2(
			(_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
			_Order1, _Order2));
		}

	bool _Compare_exchange_strong(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_strong_2(
			(_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
			_Order1, _Order2));
		}
	};

template<>
	struct _Atomic_impl<4U>
	{	
	typedef _Uint4_t _My_int;

	bool _Is_lock_free() const volatile
		{	
		return (_Atomic_is_lock_free_4());
		}

	void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
		{	
		_Atomic_store_4((_My_int*)_Tgt, *(_My_int*)_Src, _Order);
		}

	void _Load(void *_Tgt, const void *_Src,
		memory_order _Order) const volatile
		{	
		*(_My_int*)_Tgt = _Atomic_load_4((_My_int*)_Src, _Order);
		}

	void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
		{	
		*(_My_int*)_Right =
			_Atomic_exchange_4((_My_int*)_Left, *(_My_int*)_Right, _Order);
		}

	bool _Compare_exchange_weak(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_weak_4(
			(_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
			_Order1, _Order2));
		}

	bool _Compare_exchange_strong(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_strong_4(
			(_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
			_Order1, _Order2));
		}
	};

template<>
	struct _Atomic_impl<8U>
	{	
	typedef _Uint8_t _My_int;

	bool _Is_lock_free() const volatile
		{	
		return (_Atomic_is_lock_free_8());
		}

	void _Store(void *_Tgt, const void *_Src, memory_order _Order) volatile
		{	
		_Atomic_store_8((_My_int*)_Tgt, *(_My_int*)_Src, _Order);
		}

	void _Load(void *_Tgt, const void *_Src,
		memory_order _Order) const volatile
		{	
		*(_My_int*)_Tgt = _Atomic_load_8((_My_int*)_Src, _Order);
		}

	void _Exchange(void *_Left, void *_Right, memory_order _Order) volatile
		{	
		*(_My_int*)_Right =
			_Atomic_exchange_8((_My_int*)_Left, *(_My_int*)_Right, _Order);
		}

	bool _Compare_exchange_weak(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_weak_8(
			(_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
			_Order1, _Order2));
		}

	bool _Compare_exchange_strong(
		void *_Tgt, void *_Exp, const void *_Value,
		memory_order _Order1, memory_order _Order2) volatile
		{	
		return (_Atomic_compare_exchange_strong_8(
			(_My_int*)_Tgt, (_My_int*)_Exp, *(_My_int*)_Value,
			_Order1, _Order2));
		}
	};

		
template<class _Ty,
	unsigned _Bytes>
	struct _Atomic_base
		: _Atomic_impl<_Bytes>
	{	
	typedef _Atomic_impl<_Bytes> _Mybase;
	typedef typename _Mybase::_My_int _My_int;

	constexpr _Atomic_base(_Ty _Val) noexcept
		: _My_val(_Val)
		{	
		}

	_Atomic_base() noexcept = default;
	_Atomic_base(const _Atomic_base&) = delete;
	_Atomic_base& operator=(const _Atomic_base&) = delete;
	_Atomic_base& operator=(const _Atomic_base&) volatile = delete;

	_Ty operator=(_Ty _Right) volatile noexcept
		{	
		this->_Store((void *)&_My_val, &_Right, memory_order_seq_cst);
		return (_Right);
		}

	_Ty operator=(_Ty _Right) noexcept
		{	
		this->_Store((void *)&_My_val, &_Right, memory_order_seq_cst);
		return (_Right);
		}

	bool is_lock_free() const volatile noexcept
		{	
		return (this->_Is_lock_free());
		}

	bool is_lock_free() const noexcept
		{	
		return (this->_Is_lock_free());
		}

	void store(_Ty _Value,
		memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		this->_Store((void *)&_My_val, &_Value, _Order);
		}

	void store(_Ty _Value,
		memory_order _Order = memory_order_seq_cst) noexcept
		{	
		this->_Store((void *)&_My_val, &_Value, _Order);
		}

	_Ty load(memory_order _Order = memory_order_seq_cst)
		const volatile noexcept
		{	
		_Ty _Result;
		this->_Load((void *)&_Result, (const void *)&_My_val, _Order);
		return (_Result);
		}

	_Ty load(memory_order _Order = memory_order_seq_cst)
		const noexcept
		{	
		_Ty _Result;
		this->_Load((void *)&_Result, (const void *)&_My_val, _Order);
		return (_Result);
		}

	operator _Ty() const volatile noexcept
		{	
		return (load());
		}

	operator _Ty() const noexcept
		{	
		return (load());
		}

	_Ty exchange(_Ty _Value,
		memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		this->_Exchange((void *)&_My_val, (void *)&_Value, _Order);
		return (_Value);
		}

	_Ty exchange(_Ty _Value,
		memory_order _Order = memory_order_seq_cst) noexcept
		{	
		this->_Exchange((void *)&_My_val, (void *)&_Value, _Order);
		return (_Value);
		}

	bool compare_exchange_weak(_Ty& _Exp, _Ty _Value,
		memory_order _Order1, memory_order _Order2) volatile noexcept
		{	
		return (this->_Compare_exchange_weak(
			(void *)&_My_val, (void *)&_Exp, (const void *)&_Value,
				_Order1, _Order2));
		}

	bool compare_exchange_weak(_Ty& _Exp, _Ty _Value,
		memory_order _Order1, memory_order _Order2) noexcept
		{	
		return (this->_Compare_exchange_weak(
			(void *)&_My_val, (void *)&_Exp, (const void *)&_Value,
				_Order1, _Order2));
		}

	bool compare_exchange_weak(_Ty& _Exp, _Ty _Value,
		memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		return (compare_exchange_weak(
			_Exp, _Value, _Order, _Get_memory_order(_Order)));
		}

	bool compare_exchange_weak(_Ty& _Exp, _Ty _Value,
		memory_order _Order = memory_order_seq_cst) noexcept
		{	
		return (compare_exchange_weak(
			_Exp, _Value, _Order, _Get_memory_order(_Order)));
		}

	bool compare_exchange_strong(_Ty& _Exp, _Ty _Value,
		memory_order _Order1, memory_order _Order2) volatile noexcept
		{	
		return (this->_Compare_exchange_strong(
			(void *)&_My_val, (void *)&_Exp, (const void *)&_Value,
				_Order1, _Order2));
		}

	bool compare_exchange_strong(_Ty& _Exp, _Ty _Value,
		memory_order _Order1, memory_order _Order2) noexcept
		{	
		return (this->_Compare_exchange_strong(
			(void *)&_My_val, (void *)&_Exp, (void *)&_Value,
				_Order1, _Order2));
		}

	bool compare_exchange_strong(_Ty& _Exp, _Ty _Value,
		memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		return (compare_exchange_strong(
			_Exp, _Value, _Order, _Get_memory_order(_Order)));
		}

	bool compare_exchange_strong(_Ty& _Exp, _Ty _Value,
		memory_order _Order = memory_order_seq_cst) noexcept
		{	
		return (compare_exchange_strong(
			_Exp, _Value, _Order, _Get_memory_order(_Order)));
		}


	static_assert(alignof(_Ty) >= sizeof(_My_int),
		"You've instantiated std::atomic<T> with sizeof(T) equal to 2/4/8 and alignof(T) < sizeof(T). "
		"Before VS 2015 Update 2, this would have misbehaved at runtime. "
		"VS 2015 Update 2 was fixed to handle this correctly, "
		"but the fix inherently changes layout and breaks binary compatibility. "
		"Please define _ENABLE_ATOMIC_ALIGNMENT_FIX to acknowledge that you understand this, "
		"and that everything you're linking has been compiled with VS 2015 Update 2 (or later).");
#line 661 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"

	alignas(sizeof(_My_int)) alignas(_Ty) _Ty _My_val;
	};

		
template<class _Ty>
	struct atomic
		: _Atomic_base<_Ty, sizeof (_Ty)>
	{	
	static_assert(is_trivially_copyable<_Ty>::value,
		"atomic<T> requires T to be trivially copyable.");

	typedef _Atomic_base<_Ty, sizeof (_Ty)> _My_base;

	atomic() noexcept = default;
	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;

	constexpr atomic(_Ty _Val) noexcept
		: _My_base(_Val)
		{	
		}

	_Ty operator=(_Ty _Right) volatile noexcept
		{	
		return (_My_base::operator=(_Right));
		}

	_Ty operator=(_Ty _Right) noexcept
		{	
		return (_My_base::operator=(_Right));
		}
	};




#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"










static_assert(1 == sizeof (bool),
	"_ISIZE and _ITYPE should match.");









  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_bool
	{	
	bool operator=(bool) volatile noexcept;
	bool operator=(bool) noexcept;

	bool is_lock_free() const volatile noexcept;
	bool is_lock_free() const noexcept;
	void store(bool, memory_order = memory_order_seq_cst)
		volatile noexcept;
	void store(bool, memory_order = memory_order_seq_cst)
		noexcept;
	bool load(memory_order = memory_order_seq_cst)
		const volatile noexcept;
	bool load(memory_order = memory_order_seq_cst)
		const noexcept;
	operator bool() const volatile noexcept;
	operator bool() const noexcept;
	bool exchange(bool,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool exchange(bool,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(bool&, bool,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(bool&, bool,
		memory_order, memory_order) noexcept;
	bool compare_exchange_strong(bool&, bool,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(bool&, bool,
		memory_order, memory_order) noexcept;
	bool compare_exchange_weak(bool&, bool,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(bool&, bool,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(bool&, bool,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(bool&, bool,
		memory_order = memory_order_seq_cst) noexcept;

 




































 


















 
  
 #line 167 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 
	alignas(sizeof(_Uint1_t)) _Uint1_t _My_val;
 

#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	} _Atomic_bool;

 
		
template<>
	struct atomic<bool>
		: _Atomic_bool
	{	

	atomic() noexcept = default;

	constexpr atomic(bool _Val) noexcept
		: _Atomic_bool{(_Uint1_t)_Val}
		{	
		}

	bool operator=(bool _Val) volatile noexcept
		{	
		return (_Atomic_bool::operator=(_Val));
		}

	bool operator=(bool _Val) noexcept
		{	
		return (_Atomic_bool::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 










































































































































































































































		
	
inline bool atomic_is_lock_free(const volatile _Atomic_bool *) noexcept
	{	
	return (_Atomic_is_lock_free_1());
	}

inline bool atomic_is_lock_free(const _Atomic_bool *) noexcept
	{	
	return (_Atomic_is_lock_free_1());
	}

 
inline bool atomic_is_lock_free(const volatile atomic<bool> *) noexcept
	{	
	return (_Atomic_is_lock_free_1());
	}

inline bool atomic_is_lock_free(const atomic<bool> *) noexcept
	{	
	return (_Atomic_is_lock_free_1());
	}
 #line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_bool *_Atom,
	bool _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

inline void atomic_init(_Atomic_bool *_Atom,
	bool _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

 
inline void atomic_init(volatile atomic<bool> *_Atom,
	bool _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

inline void atomic_init(atomic<bool> *_Atom,
	bool _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}
 #line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

inline void atomic_store_explicit(
	volatile _Atomic_bool *_Atom, bool _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
	}

inline void atomic_store_explicit(
	_Atomic_bool *_Atom, bool _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_bool *_Atom,
	bool _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_bool *_Atom,
	bool _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline bool atomic_load_explicit(
	const volatile _Atomic_bool *_Atom, memory_order _Order) noexcept
	{	
	return ((bool)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
	}

inline bool atomic_load_explicit(
	const _Atomic_bool *_Atom, memory_order _Order) noexcept
	{	
	return ((bool)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
	}

inline bool atomic_load(
	const volatile _Atomic_bool *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline bool atomic_load(
	const _Atomic_bool *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline bool atomic_exchange_explicit(
	volatile _Atomic_bool *_Atom, bool _Value,
		memory_order _Order) noexcept
	{	
	return ((bool)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline bool atomic_exchange_explicit(
	_Atomic_bool *_Atom, bool _Value,
		memory_order _Order) noexcept
	{	
	return ((bool)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline bool atomic_exchange(volatile _Atomic_bool *_Atom,
	bool _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_exchange(_Atomic_bool *_Atom,
	bool _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_bool *_Atom, bool *_Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_bool *_Atom, bool *_Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_bool *_Atom, bool *_Exp,
		bool _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_bool *_Atom, bool *_Exp,
		bool _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_bool *_Atom, bool *_Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_bool *_Atom, bool *_Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_bool *_Atom, bool *_Exp, bool _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_bool *_Atom, bool *_Exp, bool _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline bool _Atomic_bool::operator=(bool _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_bool::operator=(bool _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_bool::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline bool _Atomic_bool::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_bool::store(bool _Value,
	memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_bool::store(bool _Value,
	memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline bool _Atomic_bool::load(
	memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline bool _Atomic_bool::load(
	memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline _Atomic_bool::operator bool() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_bool::operator bool() const noexcept
	{	
	return (atomic_load(this));
	}

inline bool _Atomic_bool::exchange(
	bool _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_bool::exchange(
	bool _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_bool::compare_exchange_weak(
	bool& _Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_bool::compare_exchange_weak(
	bool& _Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_bool::compare_exchange_weak(
	bool& _Exp, bool _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_bool::compare_exchange_weak(
	bool& _Exp, bool _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_bool::compare_exchange_strong(
	bool& _Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_bool::compare_exchange_strong(
	bool& _Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_bool::compare_exchange_strong(
	bool& _Exp, bool _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_bool::compare_exchange_strong(
	bool& _Exp, bool _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	inline bool atomic_is_lock_free(
		const volatile atomic<bool> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_bool *>(_Atom)));
	}

template<>
	inline bool atomic_is_lock_free(
		const atomic<bool> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_bool *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<bool> *_Atom,
		bool _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_bool *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<bool> *_Atom,
		bool _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_bool *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<bool> *_Atom,
		bool _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_bool *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<bool> *_Atom,
		bool _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_bool *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<bool> *_Atom,
		bool _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_bool *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<bool> *_Atom,
		bool _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_bool *>(_Atom),
		_Value, _Order);
	}

template<>
	inline bool atomic_load(const volatile atomic<bool> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_bool *>(_Atom)));
	}

template<>
	inline bool atomic_load(const atomic<bool> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_bool *>(_Atom)));
	}

template<>
	inline bool atomic_load_explicit(
		const volatile atomic<bool> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_bool *>(_Atom), _Order));
	}

template<>
	inline bool atomic_load_explicit(
		const atomic<bool> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_bool *>(_Atom), _Order));
	}

template<>
	inline bool atomic_exchange(
		volatile atomic<bool> *_Atom, bool _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_bool *>(_Atom), _Value));
	}

template<>
	inline bool atomic_exchange(atomic<bool> *_Atom,
		bool _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_bool *>(_Atom), _Value));
	}

template<>
	inline bool atomic_exchange_explicit(
		volatile atomic<bool> *_Atom,
			bool _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_bool *>(_Atom), _Value, _Order));
	}

template<>
	inline bool atomic_exchange_explicit(atomic<bool> *_Atom,
		bool _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_bool *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<bool> *_Atom, bool *_Exp,
			bool _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_bool *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<bool> *_Atom, bool *_Exp,
			bool _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_bool *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<bool> *_Atom, bool *_Exp, bool _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_bool *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<bool> *_Atom, bool *_Exp, bool _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_bool *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<bool> *_Atom, bool *_Exp,
			bool _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_bool *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<bool> *_Atom, bool *_Exp,
			bool _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_bool *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<bool> *_Atom, bool *_Exp, bool _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_bool *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<bool> *_Atom, bool *_Exp, bool _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_bool *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 





































































































































































































































































































































































































































































 






























































































































#line 700 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"










static_assert(1 == sizeof (char),
	"_ISIZE and _ITYPE should match.");









  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_char
	{	
	char operator=(char) volatile noexcept;
	char operator=(char) noexcept;

	bool is_lock_free() const volatile noexcept;
	bool is_lock_free() const noexcept;
	void store(char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	void store(char, memory_order = memory_order_seq_cst)
		noexcept;
	char load(memory_order = memory_order_seq_cst)
		const volatile noexcept;
	char load(memory_order = memory_order_seq_cst)
		const noexcept;
	operator char() const volatile noexcept;
	operator char() const noexcept;
	char exchange(char,
		memory_order = memory_order_seq_cst) volatile noexcept;
	char exchange(char,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(char&, char,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(char&, char,
		memory_order, memory_order) noexcept;
	bool compare_exchange_strong(char&, char,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(char&, char,
		memory_order, memory_order) noexcept;
	bool compare_exchange_weak(char&, char,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(char&, char,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(char&, char,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(char&, char,
		memory_order = memory_order_seq_cst) noexcept;

 
	char operator++(int) volatile noexcept;
	char operator++(int) noexcept;
	char operator--(int) volatile noexcept;
	char operator--(int) noexcept;
	char operator++() volatile noexcept;
	char operator++() noexcept;
	char operator--() volatile noexcept;
	char operator--() noexcept;
	char operator+=(char) volatile noexcept;
	char operator+=(char) noexcept;
	char operator-=(char) volatile noexcept;
	char operator-=(char) noexcept;
	char operator&=(char) volatile noexcept;
	char operator&=(char) noexcept;
	char operator|=(char) volatile noexcept;
	char operator|=(char) noexcept;
	char operator^=(char) volatile noexcept;
	char operator^=(char) noexcept;

	char fetch_add(char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	char fetch_add(char, memory_order = memory_order_seq_cst) noexcept;
	char fetch_sub(char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	char fetch_sub(char, memory_order = memory_order_seq_cst) noexcept;
	char fetch_and(char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	char fetch_and(char, memory_order = memory_order_seq_cst) noexcept;
	char fetch_or(char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	char fetch_or(char, memory_order = memory_order_seq_cst) noexcept;
	char fetch_xor(char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	char fetch_xor(char, memory_order = memory_order_seq_cst) noexcept;
 #line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 


















 



 
	alignas(sizeof(_Uint1_t)) _Uint1_t _My_val;
 

#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	} _Atomic_char;

 
		
template<>
	struct atomic<char>
		: _Atomic_char
	{	

	atomic() noexcept = default;

	constexpr atomic(char _Val) noexcept
		: _Atomic_char{(_Uint1_t)_Val}
		{	
		}

	char operator=(char _Val) volatile noexcept
		{	
		return (_Atomic_char::operator=(_Val));
		}

	char operator=(char _Val) noexcept
		{	
		return (_Atomic_char::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 










































































































































































































































		
	
inline bool atomic_is_lock_free(const volatile _Atomic_char *) noexcept
	{	
	return (_Atomic_is_lock_free_1());
	}

inline bool atomic_is_lock_free(const _Atomic_char *) noexcept
	{	
	return (_Atomic_is_lock_free_1());
	}

 
inline bool atomic_is_lock_free(const volatile atomic<char> *) noexcept
	{	
	return (_Atomic_is_lock_free_1());
	}

inline bool atomic_is_lock_free(const atomic<char> *) noexcept
	{	
	return (_Atomic_is_lock_free_1());
	}
 #line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_char *_Atom,
	char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

inline void atomic_init(_Atomic_char *_Atom,
	char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

 
inline void atomic_init(volatile atomic<char> *_Atom,
	char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

inline void atomic_init(atomic<char> *_Atom,
	char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}
 #line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

inline void atomic_store_explicit(
	volatile _Atomic_char *_Atom, char _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
	}

inline void atomic_store_explicit(
	_Atomic_char *_Atom, char _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_char *_Atom,
	char _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_char *_Atom,
	char _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline char atomic_load_explicit(
	const volatile _Atomic_char *_Atom, memory_order _Order) noexcept
	{	
	return ((char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
	}

inline char atomic_load_explicit(
	const _Atomic_char *_Atom, memory_order _Order) noexcept
	{	
	return ((char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
	}

inline char atomic_load(
	const volatile _Atomic_char *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline char atomic_load(
	const _Atomic_char *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline char atomic_exchange_explicit(
	volatile _Atomic_char *_Atom, char _Value,
		memory_order _Order) noexcept
	{	
	return ((char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_exchange_explicit(
	_Atomic_char *_Atom, char _Value,
		memory_order _Order) noexcept
	{	
	return ((char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_exchange(volatile _Atomic_char *_Atom,
	char _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_exchange(_Atomic_char *_Atom,
	char _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_char *_Atom, char *_Exp, char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_char *_Atom, char *_Exp, char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_char *_Atom, char *_Exp,
		char _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_char *_Atom, char *_Exp,
		char _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_char *_Atom, char *_Exp, char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_char *_Atom, char *_Exp, char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_char *_Atom, char *_Exp, char _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_char *_Atom, char *_Exp, char _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline char _Atomic_char::operator=(char _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline char _Atomic_char::operator=(char _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_char::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline bool _Atomic_char::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_char::store(char _Value,
	memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_char::store(char _Value,
	memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline char _Atomic_char::load(
	memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline char _Atomic_char::load(
	memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline _Atomic_char::operator char() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_char::operator char() const noexcept
	{	
	return (atomic_load(this));
	}

inline char _Atomic_char::exchange(
	char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::exchange(
	char _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_char::compare_exchange_weak(
	char& _Exp, char _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char::compare_exchange_weak(
	char& _Exp, char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char::compare_exchange_weak(
	char& _Exp, char _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char::compare_exchange_weak(
	char& _Exp, char _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char::compare_exchange_strong(
	char& _Exp, char _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char::compare_exchange_strong(
	char& _Exp, char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char::compare_exchange_strong(
	char& _Exp, char _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char::compare_exchange_strong(
	char& _Exp, char _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	inline bool atomic_is_lock_free(
		const volatile atomic<char> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_char *>(_Atom)));
	}

template<>
	inline bool atomic_is_lock_free(
		const atomic<char> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_char *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<char> *_Atom,
		char _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_char *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<char> *_Atom,
		char _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_char *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<char> *_Atom,
		char _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_char *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<char> *_Atom,
		char _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_char *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<char> *_Atom,
		char _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_char *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<char> *_Atom,
		char _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_char *>(_Atom),
		_Value, _Order);
	}

template<>
	inline char atomic_load(const volatile atomic<char> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_char *>(_Atom)));
	}

template<>
	inline char atomic_load(const atomic<char> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_char *>(_Atom)));
	}

template<>
	inline char atomic_load_explicit(
		const volatile atomic<char> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_char *>(_Atom), _Order));
	}

template<>
	inline char atomic_load_explicit(
		const atomic<char> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_char *>(_Atom), _Order));
	}

template<>
	inline char atomic_exchange(
		volatile atomic<char> *_Atom, char _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_exchange(atomic<char> *_Atom,
		char _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_exchange_explicit(
		volatile atomic<char> *_Atom,
			char _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_exchange_explicit(atomic<char> *_Atom,
		char _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_char *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<char> *_Atom, char *_Exp,
			char _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_char *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<char> *_Atom, char *_Exp,
			char _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_char *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<char> *_Atom, char *_Exp, char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_char *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<char> *_Atom, char *_Exp, char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_char *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<char> *_Atom, char *_Exp,
			char _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_char *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<char> *_Atom, char *_Exp,
			char _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_char *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<char> *_Atom, char *_Exp, char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_char *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<char> *_Atom, char *_Exp, char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_char *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 
		
inline char atomic_fetch_add_explicit(
	volatile _Atomic_char *_Atom, char _Value,
		memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_add_explicit(
	_Atomic_char *_Atom, char _Value,
		memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_add(volatile _Atomic_char *_Atom,
		char _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_add(_Atomic_char *_Atom,
	char _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_sub_explicit(
	volatile _Atomic_char *_Atom, char _Value,
		memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_sub_explicit(
	_Atomic_char *_Atom, char _Value,
		memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_sub(volatile _Atomic_char *_Atom,
	char _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_sub(_Atomic_char *_Atom,
	char _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_and_explicit(
	volatile _Atomic_char *_Atom, char _Value,
		memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_and_explicit(
	_Atomic_char *_Atom, char _Value,
		memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_and(volatile _Atomic_char *_Atom,
	char _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_and(_Atomic_char *_Atom,
	char _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_or_explicit(
	volatile _Atomic_char *_Atom, char _Value,
		memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_or_explicit(
	_Atomic_char *_Atom, char _Value,
		memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_or(
	volatile _Atomic_char *_Atom, char _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_or(
	_Atomic_char *_Atom, char _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_xor_explicit(
	volatile _Atomic_char *_Atom, char _Value,
		memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_xor_explicit(
	_Atomic_char *_Atom, char _Value,
		memory_order _Order) noexcept
	{	
	return ((char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline char atomic_fetch_xor(
	volatile _Atomic_char *_Atom, char _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char atomic_fetch_xor(
	_Atomic_char *_Atom, char _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline char _Atomic_char::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline char _Atomic_char::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline char _Atomic_char::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline char _Atomic_char::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline char _Atomic_char::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline char _Atomic_char::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline char _Atomic_char::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline char _Atomic_char::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline char _Atomic_char::operator+=(char _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline char _Atomic_char::operator+=(char _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline char _Atomic_char::operator-=(char _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline char _Atomic_char::operator-=(char _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline char _Atomic_char::operator&=(char _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline char _Atomic_char::operator&=(char _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline char _Atomic_char::operator|=(char _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline char _Atomic_char::operator|=(char _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline char _Atomic_char::operator^=(char _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline char _Atomic_char::operator^=(char _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline char _Atomic_char::fetch_add(
	char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_add(
	char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_sub(
	char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_sub(
	char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_and(
	char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_and(
	char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_or(
	char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_or(
	char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_xor(
	char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline char _Atomic_char::fetch_xor(
	char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline char atomic_fetch_add(
		volatile atomic<char> *_Atom,
			char _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_add(atomic<char> *_Atom,
		char _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_add_explicit(
		volatile atomic<char> *_Atom, char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_add_explicit(
	atomic<char> *_Atom, char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_sub(
		volatile atomic<char> *_Atom,
			char _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_sub(atomic<char> *_Atom,
		char _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_sub_explicit(
	volatile atomic<char> *_Atom, char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_sub_explicit(
		atomic<char> *_Atom, char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_and(
		volatile atomic<char> *_Atom, char _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_and(
		atomic<char> *_Atom, char _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_and_explicit(
		volatile atomic<char> *_Atom, char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_and_explicit(
		atomic<char> *_Atom, char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_or(volatile atomic<char> *_Atom,
		char _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_or(atomic<char> *_Atom,
		char _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_or_explicit(
		volatile atomic<char> *_Atom, char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_or_explicit(
		atomic<char> *_Atom, char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_xor(volatile atomic<char> *_Atom,
		char _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_xor(atomic<char> *_Atom,
		char _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_char *>(_Atom), _Value));
	}

template<>
	inline char atomic_fetch_xor_explicit(
		volatile atomic<char> *_Atom, char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_char *>(_Atom), _Value, _Order));
	}

template<>
	inline char atomic_fetch_xor_explicit(
		atomic<char> *_Atom, char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_char *>(_Atom), _Value, _Order));
	}
 #line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
 #line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 






























































































































#line 706 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"










static_assert(1 == sizeof (signed char),
	"_ISIZE and _ITYPE should match.");









  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_schar
	{	
	signed char operator=(signed char) volatile noexcept;
	signed char operator=(signed char) noexcept;

	bool is_lock_free() const volatile noexcept;
	bool is_lock_free() const noexcept;
	void store(signed char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	void store(signed char, memory_order = memory_order_seq_cst)
		noexcept;
	signed char load(memory_order = memory_order_seq_cst)
		const volatile noexcept;
	signed char load(memory_order = memory_order_seq_cst)
		const noexcept;
	operator signed char() const volatile noexcept;
	operator signed char() const noexcept;
	signed char exchange(signed char,
		memory_order = memory_order_seq_cst) volatile noexcept;
	signed char exchange(signed char,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(signed char&, signed char,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(signed char&, signed char,
		memory_order, memory_order) noexcept;
	bool compare_exchange_strong(signed char&, signed char,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(signed char&, signed char,
		memory_order, memory_order) noexcept;
	bool compare_exchange_weak(signed char&, signed char,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(signed char&, signed char,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(signed char&, signed char,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(signed char&, signed char,
		memory_order = memory_order_seq_cst) noexcept;

 
	signed char operator++(int) volatile noexcept;
	signed char operator++(int) noexcept;
	signed char operator--(int) volatile noexcept;
	signed char operator--(int) noexcept;
	signed char operator++() volatile noexcept;
	signed char operator++() noexcept;
	signed char operator--() volatile noexcept;
	signed char operator--() noexcept;
	signed char operator+=(signed char) volatile noexcept;
	signed char operator+=(signed char) noexcept;
	signed char operator-=(signed char) volatile noexcept;
	signed char operator-=(signed char) noexcept;
	signed char operator&=(signed char) volatile noexcept;
	signed char operator&=(signed char) noexcept;
	signed char operator|=(signed char) volatile noexcept;
	signed char operator|=(signed char) noexcept;
	signed char operator^=(signed char) volatile noexcept;
	signed char operator^=(signed char) noexcept;

	signed char fetch_add(signed char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	signed char fetch_add(signed char, memory_order = memory_order_seq_cst) noexcept;
	signed char fetch_sub(signed char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	signed char fetch_sub(signed char, memory_order = memory_order_seq_cst) noexcept;
	signed char fetch_and(signed char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	signed char fetch_and(signed char, memory_order = memory_order_seq_cst) noexcept;
	signed char fetch_or(signed char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	signed char fetch_or(signed char, memory_order = memory_order_seq_cst) noexcept;
	signed char fetch_xor(signed char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	signed char fetch_xor(signed char, memory_order = memory_order_seq_cst) noexcept;
 #line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 


















 



 
	alignas(sizeof(_Uint1_t)) _Uint1_t _My_val;
 

#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	} _Atomic_schar;

 
		
template<>
	struct atomic<signed char>
		: _Atomic_schar
	{	

	atomic() noexcept = default;

	constexpr atomic(signed char _Val) noexcept
		: _Atomic_schar{(_Uint1_t)_Val}
		{	
		}

	signed char operator=(signed char _Val) volatile noexcept
		{	
		return (_Atomic_schar::operator=(_Val));
		}

	signed char operator=(signed char _Val) noexcept
		{	
		return (_Atomic_schar::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 










































































































































































































































		
	
inline bool atomic_is_lock_free(const volatile _Atomic_schar *) noexcept
	{	
	return (_Atomic_is_lock_free_1());
	}

inline bool atomic_is_lock_free(const _Atomic_schar *) noexcept
	{	
	return (_Atomic_is_lock_free_1());
	}

 
inline bool atomic_is_lock_free(const volatile atomic<signed char> *) noexcept
	{	
	return (_Atomic_is_lock_free_1());
	}

inline bool atomic_is_lock_free(const atomic<signed char> *) noexcept
	{	
	return (_Atomic_is_lock_free_1());
	}
 #line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_schar *_Atom,
	signed char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

inline void atomic_init(_Atomic_schar *_Atom,
	signed char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

 
inline void atomic_init(volatile atomic<signed char> *_Atom,
	signed char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

inline void atomic_init(atomic<signed char> *_Atom,
	signed char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}
 #line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

inline void atomic_store_explicit(
	volatile _Atomic_schar *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
	}

inline void atomic_store_explicit(
	_Atomic_schar *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_schar *_Atom,
	signed char _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_schar *_Atom,
	signed char _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline signed char atomic_load_explicit(
	const volatile _Atomic_schar *_Atom, memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
	}

inline signed char atomic_load_explicit(
	const _Atomic_schar *_Atom, memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
	}

inline signed char atomic_load(
	const volatile _Atomic_schar *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline signed char atomic_load(
	const _Atomic_schar *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline signed char atomic_exchange_explicit(
	volatile _Atomic_schar *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_exchange_explicit(
	_Atomic_schar *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_exchange(volatile _Atomic_schar *_Atom,
	signed char _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_exchange(_Atomic_schar *_Atom,
	signed char _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_schar *_Atom, signed char *_Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_schar *_Atom, signed char *_Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_schar *_Atom, signed char *_Exp,
		signed char _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_schar *_Atom, signed char *_Exp,
		signed char _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_schar *_Atom, signed char *_Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_schar *_Atom, signed char *_Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_schar *_Atom, signed char *_Exp, signed char _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_schar *_Atom, signed char *_Exp, signed char _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline signed char _Atomic_schar::operator=(signed char _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline signed char _Atomic_schar::operator=(signed char _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_schar::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline bool _Atomic_schar::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_schar::store(signed char _Value,
	memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_schar::store(signed char _Value,
	memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline signed char _Atomic_schar::load(
	memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline signed char _Atomic_schar::load(
	memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline _Atomic_schar::operator signed char() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_schar::operator signed char() const noexcept
	{	
	return (atomic_load(this));
	}

inline signed char _Atomic_schar::exchange(
	signed char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::exchange(
	signed char _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_schar::compare_exchange_weak(
	signed char& _Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_schar::compare_exchange_weak(
	signed char& _Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_schar::compare_exchange_weak(
	signed char& _Exp, signed char _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_schar::compare_exchange_weak(
	signed char& _Exp, signed char _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_schar::compare_exchange_strong(
	signed char& _Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_schar::compare_exchange_strong(
	signed char& _Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_schar::compare_exchange_strong(
	signed char& _Exp, signed char _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_schar::compare_exchange_strong(
	signed char& _Exp, signed char _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	inline bool atomic_is_lock_free(
		const volatile atomic<signed char> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_schar *>(_Atom)));
	}

template<>
	inline bool atomic_is_lock_free(
		const atomic<signed char> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_schar *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<signed char> *_Atom,
		signed char _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_schar *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<signed char> *_Atom,
		signed char _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_schar *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<signed char> *_Atom,
		signed char _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_schar *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<signed char> *_Atom,
		signed char _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_schar *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<signed char> *_Atom,
		signed char _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_schar *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<signed char> *_Atom,
		signed char _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_schar *>(_Atom),
		_Value, _Order);
	}

template<>
	inline signed char atomic_load(const volatile atomic<signed char> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_schar *>(_Atom)));
	}

template<>
	inline signed char atomic_load(const atomic<signed char> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_schar *>(_Atom)));
	}

template<>
	inline signed char atomic_load_explicit(
		const volatile atomic<signed char> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_schar *>(_Atom), _Order));
	}

template<>
	inline signed char atomic_load_explicit(
		const atomic<signed char> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_schar *>(_Atom), _Order));
	}

template<>
	inline signed char atomic_exchange(
		volatile atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_exchange(atomic<signed char> *_Atom,
		signed char _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_exchange_explicit(
		volatile atomic<signed char> *_Atom,
			signed char _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_exchange_explicit(atomic<signed char> *_Atom,
		signed char _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_schar *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<signed char> *_Atom, signed char *_Exp,
			signed char _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_schar *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<signed char> *_Atom, signed char *_Exp,
			signed char _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_schar *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<signed char> *_Atom, signed char *_Exp, signed char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_schar *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<signed char> *_Atom, signed char *_Exp, signed char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_schar *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<signed char> *_Atom, signed char *_Exp,
			signed char _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_schar *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<signed char> *_Atom, signed char *_Exp,
			signed char _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_schar *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<signed char> *_Atom, signed char *_Exp, signed char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_schar *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<signed char> *_Atom, signed char *_Exp, signed char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_schar *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 
		
inline signed char atomic_fetch_add_explicit(
	volatile _Atomic_schar *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_add_explicit(
	_Atomic_schar *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_add(volatile _Atomic_schar *_Atom,
		signed char _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_add(_Atomic_schar *_Atom,
	signed char _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_sub_explicit(
	volatile _Atomic_schar *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_sub_explicit(
	_Atomic_schar *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_sub(volatile _Atomic_schar *_Atom,
	signed char _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_sub(_Atomic_schar *_Atom,
	signed char _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_and_explicit(
	volatile _Atomic_schar *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_and_explicit(
	_Atomic_schar *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_and(volatile _Atomic_schar *_Atom,
	signed char _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_and(_Atomic_schar *_Atom,
	signed char _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_or_explicit(
	volatile _Atomic_schar *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_or_explicit(
	_Atomic_schar *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_or(
	volatile _Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_or(
	_Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_xor_explicit(
	volatile _Atomic_schar *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_xor_explicit(
	_Atomic_schar *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{	
	return ((signed char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline signed char atomic_fetch_xor(
	volatile _Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline signed char atomic_fetch_xor(
	_Atomic_schar *_Atom, signed char _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline signed char _Atomic_schar::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline signed char _Atomic_schar::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline signed char _Atomic_schar::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline signed char _Atomic_schar::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline signed char _Atomic_schar::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline signed char _Atomic_schar::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline signed char _Atomic_schar::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline signed char _Atomic_schar::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline signed char _Atomic_schar::operator+=(signed char _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline signed char _Atomic_schar::operator+=(signed char _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline signed char _Atomic_schar::operator-=(signed char _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline signed char _Atomic_schar::operator-=(signed char _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline signed char _Atomic_schar::operator&=(signed char _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline signed char _Atomic_schar::operator&=(signed char _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline signed char _Atomic_schar::operator|=(signed char _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline signed char _Atomic_schar::operator|=(signed char _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline signed char _Atomic_schar::operator^=(signed char _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline signed char _Atomic_schar::operator^=(signed char _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline signed char _Atomic_schar::fetch_add(
	signed char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_add(
	signed char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_sub(
	signed char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_sub(
	signed char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_and(
	signed char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_and(
	signed char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_or(
	signed char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_or(
	signed char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_xor(
	signed char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline signed char _Atomic_schar::fetch_xor(
	signed char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline signed char atomic_fetch_add(
		volatile atomic<signed char> *_Atom,
			signed char _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_add(atomic<signed char> *_Atom,
		signed char _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_add_explicit(
		volatile atomic<signed char> *_Atom, signed char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_add_explicit(
	atomic<signed char> *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_sub(
		volatile atomic<signed char> *_Atom,
			signed char _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_sub(atomic<signed char> *_Atom,
		signed char _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_sub_explicit(
	volatile atomic<signed char> *_Atom, signed char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_sub_explicit(
		atomic<signed char> *_Atom, signed char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_and(
		volatile atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_and(
		atomic<signed char> *_Atom, signed char _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_and_explicit(
		volatile atomic<signed char> *_Atom, signed char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_and_explicit(
		atomic<signed char> *_Atom, signed char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_or(volatile atomic<signed char> *_Atom,
		signed char _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_or(atomic<signed char> *_Atom,
		signed char _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_or_explicit(
		volatile atomic<signed char> *_Atom, signed char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_or_explicit(
		atomic<signed char> *_Atom, signed char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_xor(volatile atomic<signed char> *_Atom,
		signed char _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_xor(atomic<signed char> *_Atom,
		signed char _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_schar *>(_Atom), _Value));
	}

template<>
	inline signed char atomic_fetch_xor_explicit(
		volatile atomic<signed char> *_Atom, signed char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_schar *>(_Atom), _Value, _Order));
	}

template<>
	inline signed char atomic_fetch_xor_explicit(
		atomic<signed char> *_Atom, signed char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_schar *>(_Atom), _Value, _Order));
	}
 #line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
 #line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 






























































































































#line 712 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"










static_assert(1 == sizeof (unsigned char),
	"_ISIZE and _ITYPE should match.");









  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_uchar
	{	
	unsigned char operator=(unsigned char) volatile noexcept;
	unsigned char operator=(unsigned char) noexcept;

	bool is_lock_free() const volatile noexcept;
	bool is_lock_free() const noexcept;
	void store(unsigned char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	void store(unsigned char, memory_order = memory_order_seq_cst)
		noexcept;
	unsigned char load(memory_order = memory_order_seq_cst)
		const volatile noexcept;
	unsigned char load(memory_order = memory_order_seq_cst)
		const noexcept;
	operator unsigned char() const volatile noexcept;
	operator unsigned char() const noexcept;
	unsigned char exchange(unsigned char,
		memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned char exchange(unsigned char,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(unsigned char&, unsigned char,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(unsigned char&, unsigned char,
		memory_order, memory_order) noexcept;
	bool compare_exchange_strong(unsigned char&, unsigned char,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(unsigned char&, unsigned char,
		memory_order, memory_order) noexcept;
	bool compare_exchange_weak(unsigned char&, unsigned char,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(unsigned char&, unsigned char,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(unsigned char&, unsigned char,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(unsigned char&, unsigned char,
		memory_order = memory_order_seq_cst) noexcept;

 
	unsigned char operator++(int) volatile noexcept;
	unsigned char operator++(int) noexcept;
	unsigned char operator--(int) volatile noexcept;
	unsigned char operator--(int) noexcept;
	unsigned char operator++() volatile noexcept;
	unsigned char operator++() noexcept;
	unsigned char operator--() volatile noexcept;
	unsigned char operator--() noexcept;
	unsigned char operator+=(unsigned char) volatile noexcept;
	unsigned char operator+=(unsigned char) noexcept;
	unsigned char operator-=(unsigned char) volatile noexcept;
	unsigned char operator-=(unsigned char) noexcept;
	unsigned char operator&=(unsigned char) volatile noexcept;
	unsigned char operator&=(unsigned char) noexcept;
	unsigned char operator|=(unsigned char) volatile noexcept;
	unsigned char operator|=(unsigned char) noexcept;
	unsigned char operator^=(unsigned char) volatile noexcept;
	unsigned char operator^=(unsigned char) noexcept;

	unsigned char fetch_add(unsigned char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned char fetch_add(unsigned char, memory_order = memory_order_seq_cst) noexcept;
	unsigned char fetch_sub(unsigned char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned char fetch_sub(unsigned char, memory_order = memory_order_seq_cst) noexcept;
	unsigned char fetch_and(unsigned char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned char fetch_and(unsigned char, memory_order = memory_order_seq_cst) noexcept;
	unsigned char fetch_or(unsigned char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned char fetch_or(unsigned char, memory_order = memory_order_seq_cst) noexcept;
	unsigned char fetch_xor(unsigned char, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned char fetch_xor(unsigned char, memory_order = memory_order_seq_cst) noexcept;
 #line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 


















 



 
	alignas(sizeof(_Uint1_t)) _Uint1_t _My_val;
 

#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	} _Atomic_uchar;

 
		
template<>
	struct atomic<unsigned char>
		: _Atomic_uchar
	{	

	atomic() noexcept = default;

	constexpr atomic(unsigned char _Val) noexcept
		: _Atomic_uchar{(_Uint1_t)_Val}
		{	
		}

	unsigned char operator=(unsigned char _Val) volatile noexcept
		{	
		return (_Atomic_uchar::operator=(_Val));
		}

	unsigned char operator=(unsigned char _Val) noexcept
		{	
		return (_Atomic_uchar::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 










































































































































































































































		
	
inline bool atomic_is_lock_free(const volatile _Atomic_uchar *) noexcept
	{	
	return (_Atomic_is_lock_free_1());
	}

inline bool atomic_is_lock_free(const _Atomic_uchar *) noexcept
	{	
	return (_Atomic_is_lock_free_1());
	}

 
inline bool atomic_is_lock_free(const volatile atomic<unsigned char> *) noexcept
	{	
	return (_Atomic_is_lock_free_1());
	}

inline bool atomic_is_lock_free(const atomic<unsigned char> *) noexcept
	{	
	return (_Atomic_is_lock_free_1());
	}
 #line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_uchar *_Atom,
	unsigned char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

inline void atomic_init(_Atomic_uchar *_Atom,
	unsigned char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

 
inline void atomic_init(volatile atomic<unsigned char> *_Atom,
	unsigned char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}

inline void atomic_init(atomic<unsigned char> *_Atom,
	unsigned char _Value) noexcept
	{	
	_Atom->_My_val = (_Uint1_t)_Value;

	}
 #line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

inline void atomic_store_explicit(
	volatile _Atomic_uchar *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
	}

inline void atomic_store_explicit(
	_Atomic_uchar *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_uchar *_Atom,
	unsigned char _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_uchar *_Atom,
	unsigned char _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline unsigned char atomic_load_explicit(
	const volatile _Atomic_uchar *_Atom, memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
	}

inline unsigned char atomic_load_explicit(
	const _Atomic_uchar *_Atom, memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_load_1 ((_Uint1_t*)&_Atom->_My_val, _Order));
	}

inline unsigned char atomic_load(
	const volatile _Atomic_uchar *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline unsigned char atomic_load(
	const _Atomic_uchar *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline unsigned char atomic_exchange_explicit(
	volatile _Atomic_uchar *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_exchange_explicit(
	_Atomic_uchar *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_exchange_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_exchange(volatile _Atomic_uchar *_Atom,
	unsigned char _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_exchange(_Atomic_uchar *_Atom,
	unsigned char _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_uchar *_Atom, unsigned char *_Exp,
		unsigned char _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_uchar *_Atom, unsigned char *_Exp,
		unsigned char _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t*)_Exp, (_Uint1_t)_Value, _Order1, _Order2));
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_uchar *_Atom, unsigned char *_Exp, unsigned char _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline unsigned char _Atomic_uchar::operator=(unsigned char _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline unsigned char _Atomic_uchar::operator=(unsigned char _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_uchar::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline bool _Atomic_uchar::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_uchar::store(unsigned char _Value,
	memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_uchar::store(unsigned char _Value,
	memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline unsigned char _Atomic_uchar::load(
	memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline unsigned char _Atomic_uchar::load(
	memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline _Atomic_uchar::operator unsigned char() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_uchar::operator unsigned char() const noexcept
	{	
	return (atomic_load(this));
	}

inline unsigned char _Atomic_uchar::exchange(
	unsigned char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::exchange(
	unsigned char _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_uchar::compare_exchange_weak(
	unsigned char& _Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_uchar::compare_exchange_weak(
	unsigned char& _Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_uchar::compare_exchange_weak(
	unsigned char& _Exp, unsigned char _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_uchar::compare_exchange_weak(
	unsigned char& _Exp, unsigned char _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_uchar::compare_exchange_strong(
	unsigned char& _Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_uchar::compare_exchange_strong(
	unsigned char& _Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_uchar::compare_exchange_strong(
	unsigned char& _Exp, unsigned char _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_uchar::compare_exchange_strong(
	unsigned char& _Exp, unsigned char _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	inline bool atomic_is_lock_free(
		const volatile atomic<unsigned char> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_uchar *>(_Atom)));
	}

template<>
	inline bool atomic_is_lock_free(
		const atomic<unsigned char> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_uchar *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<unsigned char> *_Atom,
		unsigned char _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_uchar *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<unsigned char> *_Atom,
		unsigned char _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_uchar *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<unsigned char> *_Atom,
		unsigned char _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_uchar *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<unsigned char> *_Atom,
		unsigned char _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_uchar *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<unsigned char> *_Atom,
		unsigned char _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_uchar *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<unsigned char> *_Atom,
		unsigned char _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_uchar *>(_Atom),
		_Value, _Order);
	}

template<>
	inline unsigned char atomic_load(const volatile atomic<unsigned char> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_uchar *>(_Atom)));
	}

template<>
	inline unsigned char atomic_load(const atomic<unsigned char> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_uchar *>(_Atom)));
	}

template<>
	inline unsigned char atomic_load_explicit(
		const volatile atomic<unsigned char> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_uchar *>(_Atom), _Order));
	}

template<>
	inline unsigned char atomic_load_explicit(
		const atomic<unsigned char> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_uchar *>(_Atom), _Order));
	}

template<>
	inline unsigned char atomic_exchange(
		volatile atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_exchange(atomic<unsigned char> *_Atom,
		unsigned char _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_exchange_explicit(
		volatile atomic<unsigned char> *_Atom,
			unsigned char _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_exchange_explicit(atomic<unsigned char> *_Atom,
		unsigned char _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_uchar *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<unsigned char> *_Atom, unsigned char *_Exp,
			unsigned char _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<unsigned char> *_Atom, unsigned char *_Exp,
			unsigned char _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_uchar *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_uchar *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<unsigned char> *_Atom, unsigned char *_Exp,
			unsigned char _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<unsigned char> *_Atom, unsigned char *_Exp,
			unsigned char _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_uchar *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<unsigned char> *_Atom, unsigned char *_Exp, unsigned char _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_uchar *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 
		
inline unsigned char atomic_fetch_add_explicit(
	volatile _Atomic_uchar *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_add_explicit(
	_Atomic_uchar *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_add_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_add(volatile _Atomic_uchar *_Atom,
		unsigned char _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_add(_Atomic_uchar *_Atom,
	unsigned char _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_sub_explicit(
	volatile _Atomic_uchar *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_sub_explicit(
	_Atomic_uchar *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_sub_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_sub(volatile _Atomic_uchar *_Atom,
	unsigned char _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_sub(_Atomic_uchar *_Atom,
	unsigned char _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_and_explicit(
	volatile _Atomic_uchar *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_and_explicit(
	_Atomic_uchar *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_and_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_and(volatile _Atomic_uchar *_Atom,
	unsigned char _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_and(_Atomic_uchar *_Atom,
	unsigned char _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_or_explicit(
	volatile _Atomic_uchar *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_or_explicit(
	_Atomic_uchar *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_or_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_or(
	volatile _Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_or(
	_Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_xor_explicit(
	volatile _Atomic_uchar *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_xor_explicit(
	_Atomic_uchar *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned char)_Atomic_fetch_xor_1 ((_Uint1_t*)&_Atom->_My_val, (_Uint1_t)_Value, _Order));
	}

inline unsigned char atomic_fetch_xor(
	volatile _Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned char atomic_fetch_xor(
	_Atomic_uchar *_Atom, unsigned char _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline unsigned char _Atomic_uchar::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned char _Atomic_uchar::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned char _Atomic_uchar::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned char _Atomic_uchar::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned char _Atomic_uchar::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned char _Atomic_uchar::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned char _Atomic_uchar::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned char _Atomic_uchar::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned char _Atomic_uchar::operator+=(unsigned char _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned char _Atomic_uchar::operator+=(unsigned char _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned char _Atomic_uchar::operator-=(unsigned char _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned char _Atomic_uchar::operator-=(unsigned char _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned char _Atomic_uchar::operator&=(unsigned char _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned char _Atomic_uchar::operator&=(unsigned char _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned char _Atomic_uchar::operator|=(unsigned char _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned char _Atomic_uchar::operator|=(unsigned char _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned char _Atomic_uchar::operator^=(unsigned char _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned char _Atomic_uchar::operator^=(unsigned char _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned char _Atomic_uchar::fetch_add(
	unsigned char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_add(
	unsigned char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_sub(
	unsigned char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_sub(
	unsigned char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_and(
	unsigned char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_and(
	unsigned char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_or(
	unsigned char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_or(
	unsigned char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_xor(
	unsigned char _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline unsigned char _Atomic_uchar::fetch_xor(
	unsigned char _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline unsigned char atomic_fetch_add(
		volatile atomic<unsigned char> *_Atom,
			unsigned char _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_add(atomic<unsigned char> *_Atom,
		unsigned char _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_add_explicit(
		volatile atomic<unsigned char> *_Atom, unsigned char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_add_explicit(
	atomic<unsigned char> *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_sub(
		volatile atomic<unsigned char> *_Atom,
			unsigned char _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_sub(atomic<unsigned char> *_Atom,
		unsigned char _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_sub_explicit(
	volatile atomic<unsigned char> *_Atom, unsigned char _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_sub_explicit(
		atomic<unsigned char> *_Atom, unsigned char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_and(
		volatile atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_and(
		atomic<unsigned char> *_Atom, unsigned char _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_and_explicit(
		volatile atomic<unsigned char> *_Atom, unsigned char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_and_explicit(
		atomic<unsigned char> *_Atom, unsigned char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_or(volatile atomic<unsigned char> *_Atom,
		unsigned char _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_or(atomic<unsigned char> *_Atom,
		unsigned char _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_or_explicit(
		volatile atomic<unsigned char> *_Atom, unsigned char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_or_explicit(
		atomic<unsigned char> *_Atom, unsigned char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_xor(volatile atomic<unsigned char> *_Atom,
		unsigned char _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_xor(atomic<unsigned char> *_Atom,
		unsigned char _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_uchar *>(_Atom), _Value));
	}

template<>
	inline unsigned char atomic_fetch_xor_explicit(
		volatile atomic<unsigned char> *_Atom, unsigned char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_uchar *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned char atomic_fetch_xor_explicit(
		atomic<unsigned char> *_Atom, unsigned char _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_uchar *>(_Atom), _Value, _Order));
	}
 #line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
 #line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 






























































































































#line 718 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"










static_assert(2 == sizeof (char16_t),
	"_ISIZE and _ITYPE should match.");









  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_char16_t
	{	
	char16_t operator=(char16_t) volatile noexcept;
	char16_t operator=(char16_t) noexcept;

	bool is_lock_free() const volatile noexcept;
	bool is_lock_free() const noexcept;
	void store(char16_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	void store(char16_t, memory_order = memory_order_seq_cst)
		noexcept;
	char16_t load(memory_order = memory_order_seq_cst)
		const volatile noexcept;
	char16_t load(memory_order = memory_order_seq_cst)
		const noexcept;
	operator char16_t() const volatile noexcept;
	operator char16_t() const noexcept;
	char16_t exchange(char16_t,
		memory_order = memory_order_seq_cst) volatile noexcept;
	char16_t exchange(char16_t,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(char16_t&, char16_t,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(char16_t&, char16_t,
		memory_order, memory_order) noexcept;
	bool compare_exchange_strong(char16_t&, char16_t,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(char16_t&, char16_t,
		memory_order, memory_order) noexcept;
	bool compare_exchange_weak(char16_t&, char16_t,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(char16_t&, char16_t,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(char16_t&, char16_t,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(char16_t&, char16_t,
		memory_order = memory_order_seq_cst) noexcept;

 
	char16_t operator++(int) volatile noexcept;
	char16_t operator++(int) noexcept;
	char16_t operator--(int) volatile noexcept;
	char16_t operator--(int) noexcept;
	char16_t operator++() volatile noexcept;
	char16_t operator++() noexcept;
	char16_t operator--() volatile noexcept;
	char16_t operator--() noexcept;
	char16_t operator+=(char16_t) volatile noexcept;
	char16_t operator+=(char16_t) noexcept;
	char16_t operator-=(char16_t) volatile noexcept;
	char16_t operator-=(char16_t) noexcept;
	char16_t operator&=(char16_t) volatile noexcept;
	char16_t operator&=(char16_t) noexcept;
	char16_t operator|=(char16_t) volatile noexcept;
	char16_t operator|=(char16_t) noexcept;
	char16_t operator^=(char16_t) volatile noexcept;
	char16_t operator^=(char16_t) noexcept;

	char16_t fetch_add(char16_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	char16_t fetch_add(char16_t, memory_order = memory_order_seq_cst) noexcept;
	char16_t fetch_sub(char16_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	char16_t fetch_sub(char16_t, memory_order = memory_order_seq_cst) noexcept;
	char16_t fetch_and(char16_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	char16_t fetch_and(char16_t, memory_order = memory_order_seq_cst) noexcept;
	char16_t fetch_or(char16_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	char16_t fetch_or(char16_t, memory_order = memory_order_seq_cst) noexcept;
	char16_t fetch_xor(char16_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	char16_t fetch_xor(char16_t, memory_order = memory_order_seq_cst) noexcept;
 #line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 


















 



 
	alignas(sizeof(_Uint2_t)) _Uint2_t _My_val;
 

#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	} _Atomic_char16_t;

 
		
template<>
	struct atomic<char16_t>
		: _Atomic_char16_t
	{	

	atomic() noexcept = default;

	constexpr atomic(char16_t _Val) noexcept
		: _Atomic_char16_t{(_Uint2_t)_Val}
		{	
		}

	char16_t operator=(char16_t _Val) volatile noexcept
		{	
		return (_Atomic_char16_t::operator=(_Val));
		}

	char16_t operator=(char16_t _Val) noexcept
		{	
		return (_Atomic_char16_t::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 










































































































































































































































		
	
inline bool atomic_is_lock_free(const volatile _Atomic_char16_t *) noexcept
	{	
	return (_Atomic_is_lock_free_2());
	}

inline bool atomic_is_lock_free(const _Atomic_char16_t *) noexcept
	{	
	return (_Atomic_is_lock_free_2());
	}

 
inline bool atomic_is_lock_free(const volatile atomic<char16_t> *) noexcept
	{	
	return (_Atomic_is_lock_free_2());
	}

inline bool atomic_is_lock_free(const atomic<char16_t> *) noexcept
	{	
	return (_Atomic_is_lock_free_2());
	}
 #line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_char16_t *_Atom,
	char16_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

inline void atomic_init(_Atomic_char16_t *_Atom,
	char16_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

 
inline void atomic_init(volatile atomic<char16_t> *_Atom,
	char16_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

inline void atomic_init(atomic<char16_t> *_Atom,
	char16_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}
 #line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

inline void atomic_store_explicit(
	volatile _Atomic_char16_t *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
	}

inline void atomic_store_explicit(
	_Atomic_char16_t *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_char16_t *_Atom,
	char16_t _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_char16_t *_Atom,
	char16_t _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline char16_t atomic_load_explicit(
	const volatile _Atomic_char16_t *_Atom, memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
	}

inline char16_t atomic_load_explicit(
	const _Atomic_char16_t *_Atom, memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
	}

inline char16_t atomic_load(
	const volatile _Atomic_char16_t *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline char16_t atomic_load(
	const _Atomic_char16_t *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline char16_t atomic_exchange_explicit(
	volatile _Atomic_char16_t *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_exchange_explicit(
	_Atomic_char16_t *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_exchange(volatile _Atomic_char16_t *_Atom,
	char16_t _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_exchange(_Atomic_char16_t *_Atom,
	char16_t _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_char16_t *_Atom, char16_t *_Exp,
		char16_t _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_char16_t *_Atom, char16_t *_Exp,
		char16_t _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_char16_t *_Atom, char16_t *_Exp, char16_t _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline char16_t _Atomic_char16_t::operator=(char16_t _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline char16_t _Atomic_char16_t::operator=(char16_t _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_char16_t::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline bool _Atomic_char16_t::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_char16_t::store(char16_t _Value,
	memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_char16_t::store(char16_t _Value,
	memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline char16_t _Atomic_char16_t::load(
	memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline char16_t _Atomic_char16_t::load(
	memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline _Atomic_char16_t::operator char16_t() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_char16_t::operator char16_t() const noexcept
	{	
	return (atomic_load(this));
	}

inline char16_t _Atomic_char16_t::exchange(
	char16_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::exchange(
	char16_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_char16_t::compare_exchange_weak(
	char16_t& _Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char16_t::compare_exchange_weak(
	char16_t& _Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char16_t::compare_exchange_weak(
	char16_t& _Exp, char16_t _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char16_t::compare_exchange_weak(
	char16_t& _Exp, char16_t _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char16_t::compare_exchange_strong(
	char16_t& _Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char16_t::compare_exchange_strong(
	char16_t& _Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char16_t::compare_exchange_strong(
	char16_t& _Exp, char16_t _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char16_t::compare_exchange_strong(
	char16_t& _Exp, char16_t _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	inline bool atomic_is_lock_free(
		const volatile atomic<char16_t> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_char16_t *>(_Atom)));
	}

template<>
	inline bool atomic_is_lock_free(
		const atomic<char16_t> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_char16_t *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<char16_t> *_Atom,
		char16_t _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_char16_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<char16_t> *_Atom,
		char16_t _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_char16_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<char16_t> *_Atom,
		char16_t _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_char16_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<char16_t> *_Atom,
		char16_t _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_char16_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<char16_t> *_Atom,
		char16_t _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_char16_t *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<char16_t> *_Atom,
		char16_t _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_char16_t *>(_Atom),
		_Value, _Order);
	}

template<>
	inline char16_t atomic_load(const volatile atomic<char16_t> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_char16_t *>(_Atom)));
	}

template<>
	inline char16_t atomic_load(const atomic<char16_t> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_char16_t *>(_Atom)));
	}

template<>
	inline char16_t atomic_load_explicit(
		const volatile atomic<char16_t> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_char16_t *>(_Atom), _Order));
	}

template<>
	inline char16_t atomic_load_explicit(
		const atomic<char16_t> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_char16_t *>(_Atom), _Order));
	}

template<>
	inline char16_t atomic_exchange(
		volatile atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_exchange(atomic<char16_t> *_Atom,
		char16_t _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_exchange_explicit(
		volatile atomic<char16_t> *_Atom,
			char16_t _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_exchange_explicit(atomic<char16_t> *_Atom,
		char16_t _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_char16_t *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<char16_t> *_Atom, char16_t *_Exp,
			char16_t _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<char16_t> *_Atom, char16_t *_Exp,
			char16_t _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_char16_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_char16_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<char16_t> *_Atom, char16_t *_Exp,
			char16_t _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<char16_t> *_Atom, char16_t *_Exp,
			char16_t _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_char16_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<char16_t> *_Atom, char16_t *_Exp, char16_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_char16_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 
		
inline char16_t atomic_fetch_add_explicit(
	volatile _Atomic_char16_t *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_add_explicit(
	_Atomic_char16_t *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_add(volatile _Atomic_char16_t *_Atom,
		char16_t _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_add(_Atomic_char16_t *_Atom,
	char16_t _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_sub_explicit(
	volatile _Atomic_char16_t *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_sub_explicit(
	_Atomic_char16_t *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_sub(volatile _Atomic_char16_t *_Atom,
	char16_t _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_sub(_Atomic_char16_t *_Atom,
	char16_t _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_and_explicit(
	volatile _Atomic_char16_t *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_and_explicit(
	_Atomic_char16_t *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_and(volatile _Atomic_char16_t *_Atom,
	char16_t _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_and(_Atomic_char16_t *_Atom,
	char16_t _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_or_explicit(
	volatile _Atomic_char16_t *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_or_explicit(
	_Atomic_char16_t *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_or(
	volatile _Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_or(
	_Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_xor_explicit(
	volatile _Atomic_char16_t *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_xor_explicit(
	_Atomic_char16_t *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char16_t)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline char16_t atomic_fetch_xor(
	volatile _Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char16_t atomic_fetch_xor(
	_Atomic_char16_t *_Atom, char16_t _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline char16_t _Atomic_char16_t::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline char16_t _Atomic_char16_t::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline char16_t _Atomic_char16_t::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline char16_t _Atomic_char16_t::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline char16_t _Atomic_char16_t::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline char16_t _Atomic_char16_t::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline char16_t _Atomic_char16_t::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline char16_t _Atomic_char16_t::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline char16_t _Atomic_char16_t::operator+=(char16_t _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline char16_t _Atomic_char16_t::operator+=(char16_t _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline char16_t _Atomic_char16_t::operator-=(char16_t _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline char16_t _Atomic_char16_t::operator-=(char16_t _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline char16_t _Atomic_char16_t::operator&=(char16_t _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline char16_t _Atomic_char16_t::operator&=(char16_t _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline char16_t _Atomic_char16_t::operator|=(char16_t _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline char16_t _Atomic_char16_t::operator|=(char16_t _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline char16_t _Atomic_char16_t::operator^=(char16_t _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline char16_t _Atomic_char16_t::operator^=(char16_t _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline char16_t _Atomic_char16_t::fetch_add(
	char16_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_add(
	char16_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_sub(
	char16_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_sub(
	char16_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_and(
	char16_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_and(
	char16_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_or(
	char16_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_or(
	char16_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_xor(
	char16_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline char16_t _Atomic_char16_t::fetch_xor(
	char16_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline char16_t atomic_fetch_add(
		volatile atomic<char16_t> *_Atom,
			char16_t _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_add(atomic<char16_t> *_Atom,
		char16_t _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_add_explicit(
		volatile atomic<char16_t> *_Atom, char16_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_add_explicit(
	atomic<char16_t> *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_sub(
		volatile atomic<char16_t> *_Atom,
			char16_t _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_sub(atomic<char16_t> *_Atom,
		char16_t _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_sub_explicit(
	volatile atomic<char16_t> *_Atom, char16_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_sub_explicit(
		atomic<char16_t> *_Atom, char16_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_and(
		volatile atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_and(
		atomic<char16_t> *_Atom, char16_t _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_and_explicit(
		volatile atomic<char16_t> *_Atom, char16_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_and_explicit(
		atomic<char16_t> *_Atom, char16_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_or(volatile atomic<char16_t> *_Atom,
		char16_t _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_or(atomic<char16_t> *_Atom,
		char16_t _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_or_explicit(
		volatile atomic<char16_t> *_Atom, char16_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_or_explicit(
		atomic<char16_t> *_Atom, char16_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_xor(volatile atomic<char16_t> *_Atom,
		char16_t _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_xor(atomic<char16_t> *_Atom,
		char16_t _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_char16_t *>(_Atom), _Value));
	}

template<>
	inline char16_t atomic_fetch_xor_explicit(
		volatile atomic<char16_t> *_Atom, char16_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_char16_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char16_t atomic_fetch_xor_explicit(
		atomic<char16_t> *_Atom, char16_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_char16_t *>(_Atom), _Value, _Order));
	}
 #line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
 #line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 






























































































































#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"










static_assert(4 == sizeof (char32_t),
	"_ISIZE and _ITYPE should match.");









  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_char32_t
	{	
	char32_t operator=(char32_t) volatile noexcept;
	char32_t operator=(char32_t) noexcept;

	bool is_lock_free() const volatile noexcept;
	bool is_lock_free() const noexcept;
	void store(char32_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	void store(char32_t, memory_order = memory_order_seq_cst)
		noexcept;
	char32_t load(memory_order = memory_order_seq_cst)
		const volatile noexcept;
	char32_t load(memory_order = memory_order_seq_cst)
		const noexcept;
	operator char32_t() const volatile noexcept;
	operator char32_t() const noexcept;
	char32_t exchange(char32_t,
		memory_order = memory_order_seq_cst) volatile noexcept;
	char32_t exchange(char32_t,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(char32_t&, char32_t,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(char32_t&, char32_t,
		memory_order, memory_order) noexcept;
	bool compare_exchange_strong(char32_t&, char32_t,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(char32_t&, char32_t,
		memory_order, memory_order) noexcept;
	bool compare_exchange_weak(char32_t&, char32_t,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(char32_t&, char32_t,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(char32_t&, char32_t,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(char32_t&, char32_t,
		memory_order = memory_order_seq_cst) noexcept;

 
	char32_t operator++(int) volatile noexcept;
	char32_t operator++(int) noexcept;
	char32_t operator--(int) volatile noexcept;
	char32_t operator--(int) noexcept;
	char32_t operator++() volatile noexcept;
	char32_t operator++() noexcept;
	char32_t operator--() volatile noexcept;
	char32_t operator--() noexcept;
	char32_t operator+=(char32_t) volatile noexcept;
	char32_t operator+=(char32_t) noexcept;
	char32_t operator-=(char32_t) volatile noexcept;
	char32_t operator-=(char32_t) noexcept;
	char32_t operator&=(char32_t) volatile noexcept;
	char32_t operator&=(char32_t) noexcept;
	char32_t operator|=(char32_t) volatile noexcept;
	char32_t operator|=(char32_t) noexcept;
	char32_t operator^=(char32_t) volatile noexcept;
	char32_t operator^=(char32_t) noexcept;

	char32_t fetch_add(char32_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	char32_t fetch_add(char32_t, memory_order = memory_order_seq_cst) noexcept;
	char32_t fetch_sub(char32_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	char32_t fetch_sub(char32_t, memory_order = memory_order_seq_cst) noexcept;
	char32_t fetch_and(char32_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	char32_t fetch_and(char32_t, memory_order = memory_order_seq_cst) noexcept;
	char32_t fetch_or(char32_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	char32_t fetch_or(char32_t, memory_order = memory_order_seq_cst) noexcept;
	char32_t fetch_xor(char32_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	char32_t fetch_xor(char32_t, memory_order = memory_order_seq_cst) noexcept;
 #line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 


















 



 
	alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;
 

#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	} _Atomic_char32_t;

 
		
template<>
	struct atomic<char32_t>
		: _Atomic_char32_t
	{	

	atomic() noexcept = default;

	constexpr atomic(char32_t _Val) noexcept
		: _Atomic_char32_t{(_Uint4_t)_Val}
		{	
		}

	char32_t operator=(char32_t _Val) volatile noexcept
		{	
		return (_Atomic_char32_t::operator=(_Val));
		}

	char32_t operator=(char32_t _Val) noexcept
		{	
		return (_Atomic_char32_t::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 










































































































































































































































		
	
inline bool atomic_is_lock_free(const volatile _Atomic_char32_t *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}

inline bool atomic_is_lock_free(const _Atomic_char32_t *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}

 
inline bool atomic_is_lock_free(const volatile atomic<char32_t> *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}

inline bool atomic_is_lock_free(const atomic<char32_t> *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}
 #line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_char32_t *_Atom,
	char32_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(_Atomic_char32_t *_Atom,
	char32_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

 
inline void atomic_init(volatile atomic<char32_t> *_Atom,
	char32_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(atomic<char32_t> *_Atom,
	char32_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}
 #line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

inline void atomic_store_explicit(
	volatile _Atomic_char32_t *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store_explicit(
	_Atomic_char32_t *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_char32_t *_Atom,
	char32_t _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_char32_t *_Atom,
	char32_t _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline char32_t atomic_load_explicit(
	const volatile _Atomic_char32_t *_Atom, memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

inline char32_t atomic_load_explicit(
	const _Atomic_char32_t *_Atom, memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

inline char32_t atomic_load(
	const volatile _Atomic_char32_t *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline char32_t atomic_load(
	const _Atomic_char32_t *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline char32_t atomic_exchange_explicit(
	volatile _Atomic_char32_t *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_exchange_explicit(
	_Atomic_char32_t *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_exchange(volatile _Atomic_char32_t *_Atom,
	char32_t _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_exchange(_Atomic_char32_t *_Atom,
	char32_t _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_char32_t *_Atom, char32_t *_Exp,
		char32_t _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_char32_t *_Atom, char32_t *_Exp,
		char32_t _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_char32_t *_Atom, char32_t *_Exp, char32_t _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline char32_t _Atomic_char32_t::operator=(char32_t _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline char32_t _Atomic_char32_t::operator=(char32_t _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_char32_t::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline bool _Atomic_char32_t::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_char32_t::store(char32_t _Value,
	memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_char32_t::store(char32_t _Value,
	memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline char32_t _Atomic_char32_t::load(
	memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline char32_t _Atomic_char32_t::load(
	memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline _Atomic_char32_t::operator char32_t() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_char32_t::operator char32_t() const noexcept
	{	
	return (atomic_load(this));
	}

inline char32_t _Atomic_char32_t::exchange(
	char32_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::exchange(
	char32_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_char32_t::compare_exchange_weak(
	char32_t& _Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char32_t::compare_exchange_weak(
	char32_t& _Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char32_t::compare_exchange_weak(
	char32_t& _Exp, char32_t _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char32_t::compare_exchange_weak(
	char32_t& _Exp, char32_t _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char32_t::compare_exchange_strong(
	char32_t& _Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char32_t::compare_exchange_strong(
	char32_t& _Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_char32_t::compare_exchange_strong(
	char32_t& _Exp, char32_t _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_char32_t::compare_exchange_strong(
	char32_t& _Exp, char32_t _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	inline bool atomic_is_lock_free(
		const volatile atomic<char32_t> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_char32_t *>(_Atom)));
	}

template<>
	inline bool atomic_is_lock_free(
		const atomic<char32_t> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_char32_t *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<char32_t> *_Atom,
		char32_t _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_char32_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<char32_t> *_Atom,
		char32_t _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_char32_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<char32_t> *_Atom,
		char32_t _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_char32_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<char32_t> *_Atom,
		char32_t _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_char32_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<char32_t> *_Atom,
		char32_t _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_char32_t *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<char32_t> *_Atom,
		char32_t _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_char32_t *>(_Atom),
		_Value, _Order);
	}

template<>
	inline char32_t atomic_load(const volatile atomic<char32_t> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_char32_t *>(_Atom)));
	}

template<>
	inline char32_t atomic_load(const atomic<char32_t> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_char32_t *>(_Atom)));
	}

template<>
	inline char32_t atomic_load_explicit(
		const volatile atomic<char32_t> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_char32_t *>(_Atom), _Order));
	}

template<>
	inline char32_t atomic_load_explicit(
		const atomic<char32_t> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_char32_t *>(_Atom), _Order));
	}

template<>
	inline char32_t atomic_exchange(
		volatile atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_exchange(atomic<char32_t> *_Atom,
		char32_t _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_exchange_explicit(
		volatile atomic<char32_t> *_Atom,
			char32_t _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_exchange_explicit(atomic<char32_t> *_Atom,
		char32_t _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_char32_t *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<char32_t> *_Atom, char32_t *_Exp,
			char32_t _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<char32_t> *_Atom, char32_t *_Exp,
			char32_t _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_char32_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_char32_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<char32_t> *_Atom, char32_t *_Exp,
			char32_t _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<char32_t> *_Atom, char32_t *_Exp,
			char32_t _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_char32_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<char32_t> *_Atom, char32_t *_Exp, char32_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_char32_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 
		
inline char32_t atomic_fetch_add_explicit(
	volatile _Atomic_char32_t *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_add_explicit(
	_Atomic_char32_t *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_add(volatile _Atomic_char32_t *_Atom,
		char32_t _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_add(_Atomic_char32_t *_Atom,
	char32_t _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_sub_explicit(
	volatile _Atomic_char32_t *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_sub_explicit(
	_Atomic_char32_t *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_sub(volatile _Atomic_char32_t *_Atom,
	char32_t _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_sub(_Atomic_char32_t *_Atom,
	char32_t _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_and_explicit(
	volatile _Atomic_char32_t *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_and_explicit(
	_Atomic_char32_t *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_and(volatile _Atomic_char32_t *_Atom,
	char32_t _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_and(_Atomic_char32_t *_Atom,
	char32_t _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_or_explicit(
	volatile _Atomic_char32_t *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_or_explicit(
	_Atomic_char32_t *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_or(
	volatile _Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_or(
	_Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_xor_explicit(
	volatile _Atomic_char32_t *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_xor_explicit(
	_Atomic_char32_t *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{	
	return ((char32_t)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline char32_t atomic_fetch_xor(
	volatile _Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline char32_t atomic_fetch_xor(
	_Atomic_char32_t *_Atom, char32_t _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline char32_t _Atomic_char32_t::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline char32_t _Atomic_char32_t::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline char32_t _Atomic_char32_t::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline char32_t _Atomic_char32_t::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline char32_t _Atomic_char32_t::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline char32_t _Atomic_char32_t::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline char32_t _Atomic_char32_t::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline char32_t _Atomic_char32_t::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline char32_t _Atomic_char32_t::operator+=(char32_t _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline char32_t _Atomic_char32_t::operator+=(char32_t _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline char32_t _Atomic_char32_t::operator-=(char32_t _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline char32_t _Atomic_char32_t::operator-=(char32_t _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline char32_t _Atomic_char32_t::operator&=(char32_t _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline char32_t _Atomic_char32_t::operator&=(char32_t _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline char32_t _Atomic_char32_t::operator|=(char32_t _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline char32_t _Atomic_char32_t::operator|=(char32_t _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline char32_t _Atomic_char32_t::operator^=(char32_t _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline char32_t _Atomic_char32_t::operator^=(char32_t _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline char32_t _Atomic_char32_t::fetch_add(
	char32_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_add(
	char32_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_sub(
	char32_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_sub(
	char32_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_and(
	char32_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_and(
	char32_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_or(
	char32_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_or(
	char32_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_xor(
	char32_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline char32_t _Atomic_char32_t::fetch_xor(
	char32_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline char32_t atomic_fetch_add(
		volatile atomic<char32_t> *_Atom,
			char32_t _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_add(atomic<char32_t> *_Atom,
		char32_t _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_add_explicit(
		volatile atomic<char32_t> *_Atom, char32_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_add_explicit(
	atomic<char32_t> *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_sub(
		volatile atomic<char32_t> *_Atom,
			char32_t _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_sub(atomic<char32_t> *_Atom,
		char32_t _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_sub_explicit(
	volatile atomic<char32_t> *_Atom, char32_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_sub_explicit(
		atomic<char32_t> *_Atom, char32_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_and(
		volatile atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_and(
		atomic<char32_t> *_Atom, char32_t _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_and_explicit(
		volatile atomic<char32_t> *_Atom, char32_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_and_explicit(
		atomic<char32_t> *_Atom, char32_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_or(volatile atomic<char32_t> *_Atom,
		char32_t _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_or(atomic<char32_t> *_Atom,
		char32_t _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_or_explicit(
		volatile atomic<char32_t> *_Atom, char32_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_or_explicit(
		atomic<char32_t> *_Atom, char32_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_xor(volatile atomic<char32_t> *_Atom,
		char32_t _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_xor(atomic<char32_t> *_Atom,
		char32_t _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_char32_t *>(_Atom), _Value));
	}

template<>
	inline char32_t atomic_fetch_xor_explicit(
		volatile atomic<char32_t> *_Atom, char32_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_char32_t *>(_Atom), _Value, _Order));
	}

template<>
	inline char32_t atomic_fetch_xor_explicit(
		atomic<char32_t> *_Atom, char32_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_char32_t *>(_Atom), _Value, _Order));
	}
 #line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
 #line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 






























































































































#line 730 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"






 



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"










static_assert(2 == sizeof (wchar_t),
	"_ISIZE and _ITYPE should match.");









  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_wchar_t
	{	
	wchar_t operator=(wchar_t) volatile noexcept;
	wchar_t operator=(wchar_t) noexcept;

	bool is_lock_free() const volatile noexcept;
	bool is_lock_free() const noexcept;
	void store(wchar_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	void store(wchar_t, memory_order = memory_order_seq_cst)
		noexcept;
	wchar_t load(memory_order = memory_order_seq_cst)
		const volatile noexcept;
	wchar_t load(memory_order = memory_order_seq_cst)
		const noexcept;
	operator wchar_t() const volatile noexcept;
	operator wchar_t() const noexcept;
	wchar_t exchange(wchar_t,
		memory_order = memory_order_seq_cst) volatile noexcept;
	wchar_t exchange(wchar_t,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(wchar_t&, wchar_t,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(wchar_t&, wchar_t,
		memory_order, memory_order) noexcept;
	bool compare_exchange_strong(wchar_t&, wchar_t,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(wchar_t&, wchar_t,
		memory_order, memory_order) noexcept;
	bool compare_exchange_weak(wchar_t&, wchar_t,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(wchar_t&, wchar_t,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(wchar_t&, wchar_t,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(wchar_t&, wchar_t,
		memory_order = memory_order_seq_cst) noexcept;

 
	wchar_t operator++(int) volatile noexcept;
	wchar_t operator++(int) noexcept;
	wchar_t operator--(int) volatile noexcept;
	wchar_t operator--(int) noexcept;
	wchar_t operator++() volatile noexcept;
	wchar_t operator++() noexcept;
	wchar_t operator--() volatile noexcept;
	wchar_t operator--() noexcept;
	wchar_t operator+=(wchar_t) volatile noexcept;
	wchar_t operator+=(wchar_t) noexcept;
	wchar_t operator-=(wchar_t) volatile noexcept;
	wchar_t operator-=(wchar_t) noexcept;
	wchar_t operator&=(wchar_t) volatile noexcept;
	wchar_t operator&=(wchar_t) noexcept;
	wchar_t operator|=(wchar_t) volatile noexcept;
	wchar_t operator|=(wchar_t) noexcept;
	wchar_t operator^=(wchar_t) volatile noexcept;
	wchar_t operator^=(wchar_t) noexcept;

	wchar_t fetch_add(wchar_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	wchar_t fetch_add(wchar_t, memory_order = memory_order_seq_cst) noexcept;
	wchar_t fetch_sub(wchar_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	wchar_t fetch_sub(wchar_t, memory_order = memory_order_seq_cst) noexcept;
	wchar_t fetch_and(wchar_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	wchar_t fetch_and(wchar_t, memory_order = memory_order_seq_cst) noexcept;
	wchar_t fetch_or(wchar_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	wchar_t fetch_or(wchar_t, memory_order = memory_order_seq_cst) noexcept;
	wchar_t fetch_xor(wchar_t, memory_order = memory_order_seq_cst)
		volatile noexcept;
	wchar_t fetch_xor(wchar_t, memory_order = memory_order_seq_cst) noexcept;
 #line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 


















 



 
	alignas(sizeof(_Uint2_t)) _Uint2_t _My_val;
 

#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	} _Atomic_wchar_t;

 
		
template<>
	struct atomic<wchar_t>
		: _Atomic_wchar_t
	{	

	atomic() noexcept = default;

	constexpr atomic(wchar_t _Val) noexcept
		: _Atomic_wchar_t{(_Uint2_t)_Val}
		{	
		}

	wchar_t operator=(wchar_t _Val) volatile noexcept
		{	
		return (_Atomic_wchar_t::operator=(_Val));
		}

	wchar_t operator=(wchar_t _Val) noexcept
		{	
		return (_Atomic_wchar_t::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 










































































































































































































































		
	
inline bool atomic_is_lock_free(const volatile _Atomic_wchar_t *) noexcept
	{	
	return (_Atomic_is_lock_free_2());
	}

inline bool atomic_is_lock_free(const _Atomic_wchar_t *) noexcept
	{	
	return (_Atomic_is_lock_free_2());
	}

 
inline bool atomic_is_lock_free(const volatile atomic<wchar_t> *) noexcept
	{	
	return (_Atomic_is_lock_free_2());
	}

inline bool atomic_is_lock_free(const atomic<wchar_t> *) noexcept
	{	
	return (_Atomic_is_lock_free_2());
	}
 #line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_wchar_t *_Atom,
	wchar_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

inline void atomic_init(_Atomic_wchar_t *_Atom,
	wchar_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

 
inline void atomic_init(volatile atomic<wchar_t> *_Atom,
	wchar_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

inline void atomic_init(atomic<wchar_t> *_Atom,
	wchar_t _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}
 #line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

inline void atomic_store_explicit(
	volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
	}

inline void atomic_store_explicit(
	_Atomic_wchar_t *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_wchar_t *_Atom,
	wchar_t _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_wchar_t *_Atom,
	wchar_t _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline wchar_t atomic_load_explicit(
	const volatile _Atomic_wchar_t *_Atom, memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
	}

inline wchar_t atomic_load_explicit(
	const _Atomic_wchar_t *_Atom, memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
	}

inline wchar_t atomic_load(
	const volatile _Atomic_wchar_t *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline wchar_t atomic_load(
	const _Atomic_wchar_t *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline wchar_t atomic_exchange_explicit(
	volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_exchange_explicit(
	_Atomic_wchar_t *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_exchange(volatile _Atomic_wchar_t *_Atom,
	wchar_t _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_exchange(_Atomic_wchar_t *_Atom,
	wchar_t _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_wchar_t *_Atom, wchar_t *_Exp,
		wchar_t _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_wchar_t *_Atom, wchar_t *_Exp,
		wchar_t _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_wchar_t *_Atom, wchar_t *_Exp, wchar_t _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline wchar_t _Atomic_wchar_t::operator=(wchar_t _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline wchar_t _Atomic_wchar_t::operator=(wchar_t _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_wchar_t::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline bool _Atomic_wchar_t::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_wchar_t::store(wchar_t _Value,
	memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_wchar_t::store(wchar_t _Value,
	memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline wchar_t _Atomic_wchar_t::load(
	memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline wchar_t _Atomic_wchar_t::load(
	memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline _Atomic_wchar_t::operator wchar_t() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_wchar_t::operator wchar_t() const noexcept
	{	
	return (atomic_load(this));
	}

inline wchar_t _Atomic_wchar_t::exchange(
	wchar_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::exchange(
	wchar_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_wchar_t::compare_exchange_weak(
	wchar_t& _Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_wchar_t::compare_exchange_weak(
	wchar_t& _Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_wchar_t::compare_exchange_weak(
	wchar_t& _Exp, wchar_t _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_wchar_t::compare_exchange_weak(
	wchar_t& _Exp, wchar_t _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_wchar_t::compare_exchange_strong(
	wchar_t& _Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_wchar_t::compare_exchange_strong(
	wchar_t& _Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_wchar_t::compare_exchange_strong(
	wchar_t& _Exp, wchar_t _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_wchar_t::compare_exchange_strong(
	wchar_t& _Exp, wchar_t _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	inline bool atomic_is_lock_free(
		const volatile atomic<wchar_t> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_wchar_t *>(_Atom)));
	}

template<>
	inline bool atomic_is_lock_free(
		const atomic<wchar_t> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_wchar_t *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<wchar_t> *_Atom,
		wchar_t _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<wchar_t> *_Atom,
		wchar_t _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_wchar_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<wchar_t> *_Atom,
		wchar_t _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<wchar_t> *_Atom,
		wchar_t _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_wchar_t *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<wchar_t> *_Atom,
		wchar_t _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_wchar_t *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<wchar_t> *_Atom,
		wchar_t _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_wchar_t *>(_Atom),
		_Value, _Order);
	}

template<>
	inline wchar_t atomic_load(const volatile atomic<wchar_t> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_wchar_t *>(_Atom)));
	}

template<>
	inline wchar_t atomic_load(const atomic<wchar_t> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_wchar_t *>(_Atom)));
	}

template<>
	inline wchar_t atomic_load_explicit(
		const volatile atomic<wchar_t> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_wchar_t *>(_Atom), _Order));
	}

template<>
	inline wchar_t atomic_load_explicit(
		const atomic<wchar_t> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_wchar_t *>(_Atom), _Order));
	}

template<>
	inline wchar_t atomic_exchange(
		volatile atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_exchange(atomic<wchar_t> *_Atom,
		wchar_t _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_exchange_explicit(
		volatile atomic<wchar_t> *_Atom,
			wchar_t _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_exchange_explicit(atomic<wchar_t> *_Atom,
		wchar_t _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_wchar_t *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<wchar_t> *_Atom, wchar_t *_Exp,
			wchar_t _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<wchar_t> *_Atom, wchar_t *_Exp,
			wchar_t _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_wchar_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_wchar_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<wchar_t> *_Atom, wchar_t *_Exp,
			wchar_t _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<wchar_t> *_Atom, wchar_t *_Exp,
			wchar_t _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_wchar_t *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<wchar_t> *_Atom, wchar_t *_Exp, wchar_t _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_wchar_t *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 
		
inline wchar_t atomic_fetch_add_explicit(
	volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_add_explicit(
	_Atomic_wchar_t *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_add(volatile _Atomic_wchar_t *_Atom,
		wchar_t _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_add(_Atomic_wchar_t *_Atom,
	wchar_t _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_sub_explicit(
	volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_sub_explicit(
	_Atomic_wchar_t *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_sub(volatile _Atomic_wchar_t *_Atom,
	wchar_t _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_sub(_Atomic_wchar_t *_Atom,
	wchar_t _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_and_explicit(
	volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_and_explicit(
	_Atomic_wchar_t *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_and(volatile _Atomic_wchar_t *_Atom,
	wchar_t _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_and(_Atomic_wchar_t *_Atom,
	wchar_t _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_or_explicit(
	volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_or_explicit(
	_Atomic_wchar_t *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_or(
	volatile _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_or(
	_Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_xor_explicit(
	volatile _Atomic_wchar_t *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_xor_explicit(
	_Atomic_wchar_t *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{	
	return ((wchar_t)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline wchar_t atomic_fetch_xor(
	volatile _Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline wchar_t atomic_fetch_xor(
	_Atomic_wchar_t *_Atom, wchar_t _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline wchar_t _Atomic_wchar_t::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline wchar_t _Atomic_wchar_t::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline wchar_t _Atomic_wchar_t::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline wchar_t _Atomic_wchar_t::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline wchar_t _Atomic_wchar_t::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline wchar_t _Atomic_wchar_t::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline wchar_t _Atomic_wchar_t::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline wchar_t _Atomic_wchar_t::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline wchar_t _Atomic_wchar_t::operator+=(wchar_t _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline wchar_t _Atomic_wchar_t::operator+=(wchar_t _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline wchar_t _Atomic_wchar_t::operator-=(wchar_t _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline wchar_t _Atomic_wchar_t::operator-=(wchar_t _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline wchar_t _Atomic_wchar_t::operator&=(wchar_t _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline wchar_t _Atomic_wchar_t::operator&=(wchar_t _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline wchar_t _Atomic_wchar_t::operator|=(wchar_t _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline wchar_t _Atomic_wchar_t::operator|=(wchar_t _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline wchar_t _Atomic_wchar_t::operator^=(wchar_t _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline wchar_t _Atomic_wchar_t::operator^=(wchar_t _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline wchar_t _Atomic_wchar_t::fetch_add(
	wchar_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_add(
	wchar_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_sub(
	wchar_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_sub(
	wchar_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_and(
	wchar_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_and(
	wchar_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_or(
	wchar_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_or(
	wchar_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_xor(
	wchar_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline wchar_t _Atomic_wchar_t::fetch_xor(
	wchar_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline wchar_t atomic_fetch_add(
		volatile atomic<wchar_t> *_Atom,
			wchar_t _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_add(atomic<wchar_t> *_Atom,
		wchar_t _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_add_explicit(
		volatile atomic<wchar_t> *_Atom, wchar_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_add_explicit(
	atomic<wchar_t> *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_sub(
		volatile atomic<wchar_t> *_Atom,
			wchar_t _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_sub(atomic<wchar_t> *_Atom,
		wchar_t _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_sub_explicit(
	volatile atomic<wchar_t> *_Atom, wchar_t _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_sub_explicit(
		atomic<wchar_t> *_Atom, wchar_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_and(
		volatile atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_and(
		atomic<wchar_t> *_Atom, wchar_t _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_and_explicit(
		volatile atomic<wchar_t> *_Atom, wchar_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_and_explicit(
		atomic<wchar_t> *_Atom, wchar_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_or(volatile atomic<wchar_t> *_Atom,
		wchar_t _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_or(atomic<wchar_t> *_Atom,
		wchar_t _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_or_explicit(
		volatile atomic<wchar_t> *_Atom, wchar_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_or_explicit(
		atomic<wchar_t> *_Atom, wchar_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_xor(volatile atomic<wchar_t> *_Atom,
		wchar_t _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_xor(atomic<wchar_t> *_Atom,
		wchar_t _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_wchar_t *>(_Atom), _Value));
	}

template<>
	inline wchar_t atomic_fetch_xor_explicit(
		volatile atomic<wchar_t> *_Atom, wchar_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_wchar_t *>(_Atom), _Value, _Order));
	}

template<>
	inline wchar_t atomic_fetch_xor_explicit(
		atomic<wchar_t> *_Atom, wchar_t _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_wchar_t *>(_Atom), _Value, _Order));
	}
 #line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
 #line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 






























































































































#line 741 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"










static_assert(2 == sizeof (short),
	"_ISIZE and _ITYPE should match.");









  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_short
	{	
	short operator=(short) volatile noexcept;
	short operator=(short) noexcept;

	bool is_lock_free() const volatile noexcept;
	bool is_lock_free() const noexcept;
	void store(short, memory_order = memory_order_seq_cst)
		volatile noexcept;
	void store(short, memory_order = memory_order_seq_cst)
		noexcept;
	short load(memory_order = memory_order_seq_cst)
		const volatile noexcept;
	short load(memory_order = memory_order_seq_cst)
		const noexcept;
	operator short() const volatile noexcept;
	operator short() const noexcept;
	short exchange(short,
		memory_order = memory_order_seq_cst) volatile noexcept;
	short exchange(short,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(short&, short,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(short&, short,
		memory_order, memory_order) noexcept;
	bool compare_exchange_strong(short&, short,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(short&, short,
		memory_order, memory_order) noexcept;
	bool compare_exchange_weak(short&, short,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(short&, short,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(short&, short,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(short&, short,
		memory_order = memory_order_seq_cst) noexcept;

 
	short operator++(int) volatile noexcept;
	short operator++(int) noexcept;
	short operator--(int) volatile noexcept;
	short operator--(int) noexcept;
	short operator++() volatile noexcept;
	short operator++() noexcept;
	short operator--() volatile noexcept;
	short operator--() noexcept;
	short operator+=(short) volatile noexcept;
	short operator+=(short) noexcept;
	short operator-=(short) volatile noexcept;
	short operator-=(short) noexcept;
	short operator&=(short) volatile noexcept;
	short operator&=(short) noexcept;
	short operator|=(short) volatile noexcept;
	short operator|=(short) noexcept;
	short operator^=(short) volatile noexcept;
	short operator^=(short) noexcept;

	short fetch_add(short, memory_order = memory_order_seq_cst)
		volatile noexcept;
	short fetch_add(short, memory_order = memory_order_seq_cst) noexcept;
	short fetch_sub(short, memory_order = memory_order_seq_cst)
		volatile noexcept;
	short fetch_sub(short, memory_order = memory_order_seq_cst) noexcept;
	short fetch_and(short, memory_order = memory_order_seq_cst)
		volatile noexcept;
	short fetch_and(short, memory_order = memory_order_seq_cst) noexcept;
	short fetch_or(short, memory_order = memory_order_seq_cst)
		volatile noexcept;
	short fetch_or(short, memory_order = memory_order_seq_cst) noexcept;
	short fetch_xor(short, memory_order = memory_order_seq_cst)
		volatile noexcept;
	short fetch_xor(short, memory_order = memory_order_seq_cst) noexcept;
 #line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 


















 



 
	alignas(sizeof(_Uint2_t)) _Uint2_t _My_val;
 

#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	} _Atomic_short;

 
		
template<>
	struct atomic<short>
		: _Atomic_short
	{	

	atomic() noexcept = default;

	constexpr atomic(short _Val) noexcept
		: _Atomic_short{(_Uint2_t)_Val}
		{	
		}

	short operator=(short _Val) volatile noexcept
		{	
		return (_Atomic_short::operator=(_Val));
		}

	short operator=(short _Val) noexcept
		{	
		return (_Atomic_short::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 










































































































































































































































		
	
inline bool atomic_is_lock_free(const volatile _Atomic_short *) noexcept
	{	
	return (_Atomic_is_lock_free_2());
	}

inline bool atomic_is_lock_free(const _Atomic_short *) noexcept
	{	
	return (_Atomic_is_lock_free_2());
	}

 
inline bool atomic_is_lock_free(const volatile atomic<short> *) noexcept
	{	
	return (_Atomic_is_lock_free_2());
	}

inline bool atomic_is_lock_free(const atomic<short> *) noexcept
	{	
	return (_Atomic_is_lock_free_2());
	}
 #line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_short *_Atom,
	short _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

inline void atomic_init(_Atomic_short *_Atom,
	short _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

 
inline void atomic_init(volatile atomic<short> *_Atom,
	short _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

inline void atomic_init(atomic<short> *_Atom,
	short _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}
 #line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

inline void atomic_store_explicit(
	volatile _Atomic_short *_Atom, short _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
	}

inline void atomic_store_explicit(
	_Atomic_short *_Atom, short _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_short *_Atom,
	short _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_short *_Atom,
	short _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline short atomic_load_explicit(
	const volatile _Atomic_short *_Atom, memory_order _Order) noexcept
	{	
	return ((short)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
	}

inline short atomic_load_explicit(
	const _Atomic_short *_Atom, memory_order _Order) noexcept
	{	
	return ((short)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
	}

inline short atomic_load(
	const volatile _Atomic_short *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline short atomic_load(
	const _Atomic_short *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline short atomic_exchange_explicit(
	volatile _Atomic_short *_Atom, short _Value,
		memory_order _Order) noexcept
	{	
	return ((short)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_exchange_explicit(
	_Atomic_short *_Atom, short _Value,
		memory_order _Order) noexcept
	{	
	return ((short)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_exchange(volatile _Atomic_short *_Atom,
	short _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_exchange(_Atomic_short *_Atom,
	short _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_short *_Atom, short *_Exp, short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_short *_Atom, short *_Exp, short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_short *_Atom, short *_Exp,
		short _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_short *_Atom, short *_Exp,
		short _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_short *_Atom, short *_Exp, short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_short *_Atom, short *_Exp, short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_short *_Atom, short *_Exp, short _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_short *_Atom, short *_Exp, short _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline short _Atomic_short::operator=(short _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline short _Atomic_short::operator=(short _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_short::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline bool _Atomic_short::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_short::store(short _Value,
	memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_short::store(short _Value,
	memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline short _Atomic_short::load(
	memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline short _Atomic_short::load(
	memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline _Atomic_short::operator short() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_short::operator short() const noexcept
	{	
	return (atomic_load(this));
	}

inline short _Atomic_short::exchange(
	short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::exchange(
	short _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_short::compare_exchange_weak(
	short& _Exp, short _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_short::compare_exchange_weak(
	short& _Exp, short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_short::compare_exchange_weak(
	short& _Exp, short _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_short::compare_exchange_weak(
	short& _Exp, short _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_short::compare_exchange_strong(
	short& _Exp, short _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_short::compare_exchange_strong(
	short& _Exp, short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_short::compare_exchange_strong(
	short& _Exp, short _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_short::compare_exchange_strong(
	short& _Exp, short _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	inline bool atomic_is_lock_free(
		const volatile atomic<short> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_short *>(_Atom)));
	}

template<>
	inline bool atomic_is_lock_free(
		const atomic<short> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_short *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<short> *_Atom,
		short _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_short *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<short> *_Atom,
		short _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_short *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<short> *_Atom,
		short _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_short *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<short> *_Atom,
		short _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_short *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<short> *_Atom,
		short _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_short *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<short> *_Atom,
		short _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_short *>(_Atom),
		_Value, _Order);
	}

template<>
	inline short atomic_load(const volatile atomic<short> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_short *>(_Atom)));
	}

template<>
	inline short atomic_load(const atomic<short> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_short *>(_Atom)));
	}

template<>
	inline short atomic_load_explicit(
		const volatile atomic<short> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_short *>(_Atom), _Order));
	}

template<>
	inline short atomic_load_explicit(
		const atomic<short> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_short *>(_Atom), _Order));
	}

template<>
	inline short atomic_exchange(
		volatile atomic<short> *_Atom, short _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_exchange(atomic<short> *_Atom,
		short _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_exchange_explicit(
		volatile atomic<short> *_Atom,
			short _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_exchange_explicit(atomic<short> *_Atom,
		short _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_short *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<short> *_Atom, short *_Exp,
			short _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_short *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<short> *_Atom, short *_Exp,
			short _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_short *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<short> *_Atom, short *_Exp, short _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_short *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<short> *_Atom, short *_Exp, short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_short *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<short> *_Atom, short *_Exp,
			short _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_short *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<short> *_Atom, short *_Exp,
			short _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_short *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<short> *_Atom, short *_Exp, short _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_short *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<short> *_Atom, short *_Exp, short _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_short *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 
		
inline short atomic_fetch_add_explicit(
	volatile _Atomic_short *_Atom, short _Value,
		memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_add_explicit(
	_Atomic_short *_Atom, short _Value,
		memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_add(volatile _Atomic_short *_Atom,
		short _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_add(_Atomic_short *_Atom,
	short _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_sub_explicit(
	volatile _Atomic_short *_Atom, short _Value,
		memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_sub_explicit(
	_Atomic_short *_Atom, short _Value,
		memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_sub(volatile _Atomic_short *_Atom,
	short _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_sub(_Atomic_short *_Atom,
	short _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_and_explicit(
	volatile _Atomic_short *_Atom, short _Value,
		memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_and_explicit(
	_Atomic_short *_Atom, short _Value,
		memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_and(volatile _Atomic_short *_Atom,
	short _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_and(_Atomic_short *_Atom,
	short _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_or_explicit(
	volatile _Atomic_short *_Atom, short _Value,
		memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_or_explicit(
	_Atomic_short *_Atom, short _Value,
		memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_or(
	volatile _Atomic_short *_Atom, short _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_or(
	_Atomic_short *_Atom, short _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_xor_explicit(
	volatile _Atomic_short *_Atom, short _Value,
		memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_xor_explicit(
	_Atomic_short *_Atom, short _Value,
		memory_order _Order) noexcept
	{	
	return ((short)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline short atomic_fetch_xor(
	volatile _Atomic_short *_Atom, short _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline short atomic_fetch_xor(
	_Atomic_short *_Atom, short _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline short _Atomic_short::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline short _Atomic_short::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline short _Atomic_short::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline short _Atomic_short::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline short _Atomic_short::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline short _Atomic_short::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline short _Atomic_short::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline short _Atomic_short::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline short _Atomic_short::operator+=(short _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline short _Atomic_short::operator+=(short _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline short _Atomic_short::operator-=(short _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline short _Atomic_short::operator-=(short _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline short _Atomic_short::operator&=(short _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline short _Atomic_short::operator&=(short _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline short _Atomic_short::operator|=(short _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline short _Atomic_short::operator|=(short _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline short _Atomic_short::operator^=(short _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline short _Atomic_short::operator^=(short _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline short _Atomic_short::fetch_add(
	short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_add(
	short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_sub(
	short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_sub(
	short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_and(
	short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_and(
	short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_or(
	short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_or(
	short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_xor(
	short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline short _Atomic_short::fetch_xor(
	short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline short atomic_fetch_add(
		volatile atomic<short> *_Atom,
			short _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_add(atomic<short> *_Atom,
		short _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_add_explicit(
		volatile atomic<short> *_Atom, short _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_add_explicit(
	atomic<short> *_Atom, short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_sub(
		volatile atomic<short> *_Atom,
			short _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_sub(atomic<short> *_Atom,
		short _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_sub_explicit(
	volatile atomic<short> *_Atom, short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_sub_explicit(
		atomic<short> *_Atom, short _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_and(
		volatile atomic<short> *_Atom, short _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_and(
		atomic<short> *_Atom, short _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_and_explicit(
		volatile atomic<short> *_Atom, short _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_and_explicit(
		atomic<short> *_Atom, short _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_or(volatile atomic<short> *_Atom,
		short _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_or(atomic<short> *_Atom,
		short _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_or_explicit(
		volatile atomic<short> *_Atom, short _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_or_explicit(
		atomic<short> *_Atom, short _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_xor(volatile atomic<short> *_Atom,
		short _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_xor(atomic<short> *_Atom,
		short _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_short *>(_Atom), _Value));
	}

template<>
	inline short atomic_fetch_xor_explicit(
		volatile atomic<short> *_Atom, short _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_short *>(_Atom), _Value, _Order));
	}

template<>
	inline short atomic_fetch_xor_explicit(
		atomic<short> *_Atom, short _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_short *>(_Atom), _Value, _Order));
	}
 #line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
 #line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 






























































































































#line 747 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"










static_assert(2 == sizeof (unsigned short),
	"_ISIZE and _ITYPE should match.");









  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_ushort
	{	
	unsigned short operator=(unsigned short) volatile noexcept;
	unsigned short operator=(unsigned short) noexcept;

	bool is_lock_free() const volatile noexcept;
	bool is_lock_free() const noexcept;
	void store(unsigned short, memory_order = memory_order_seq_cst)
		volatile noexcept;
	void store(unsigned short, memory_order = memory_order_seq_cst)
		noexcept;
	unsigned short load(memory_order = memory_order_seq_cst)
		const volatile noexcept;
	unsigned short load(memory_order = memory_order_seq_cst)
		const noexcept;
	operator unsigned short() const volatile noexcept;
	operator unsigned short() const noexcept;
	unsigned short exchange(unsigned short,
		memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned short exchange(unsigned short,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(unsigned short&, unsigned short,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(unsigned short&, unsigned short,
		memory_order, memory_order) noexcept;
	bool compare_exchange_strong(unsigned short&, unsigned short,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(unsigned short&, unsigned short,
		memory_order, memory_order) noexcept;
	bool compare_exchange_weak(unsigned short&, unsigned short,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(unsigned short&, unsigned short,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(unsigned short&, unsigned short,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(unsigned short&, unsigned short,
		memory_order = memory_order_seq_cst) noexcept;

 
	unsigned short operator++(int) volatile noexcept;
	unsigned short operator++(int) noexcept;
	unsigned short operator--(int) volatile noexcept;
	unsigned short operator--(int) noexcept;
	unsigned short operator++() volatile noexcept;
	unsigned short operator++() noexcept;
	unsigned short operator--() volatile noexcept;
	unsigned short operator--() noexcept;
	unsigned short operator+=(unsigned short) volatile noexcept;
	unsigned short operator+=(unsigned short) noexcept;
	unsigned short operator-=(unsigned short) volatile noexcept;
	unsigned short operator-=(unsigned short) noexcept;
	unsigned short operator&=(unsigned short) volatile noexcept;
	unsigned short operator&=(unsigned short) noexcept;
	unsigned short operator|=(unsigned short) volatile noexcept;
	unsigned short operator|=(unsigned short) noexcept;
	unsigned short operator^=(unsigned short) volatile noexcept;
	unsigned short operator^=(unsigned short) noexcept;

	unsigned short fetch_add(unsigned short, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned short fetch_add(unsigned short, memory_order = memory_order_seq_cst) noexcept;
	unsigned short fetch_sub(unsigned short, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned short fetch_sub(unsigned short, memory_order = memory_order_seq_cst) noexcept;
	unsigned short fetch_and(unsigned short, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned short fetch_and(unsigned short, memory_order = memory_order_seq_cst) noexcept;
	unsigned short fetch_or(unsigned short, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned short fetch_or(unsigned short, memory_order = memory_order_seq_cst) noexcept;
	unsigned short fetch_xor(unsigned short, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned short fetch_xor(unsigned short, memory_order = memory_order_seq_cst) noexcept;
 #line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 


















 



 
	alignas(sizeof(_Uint2_t)) _Uint2_t _My_val;
 

#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	} _Atomic_ushort;

 
		
template<>
	struct atomic<unsigned short>
		: _Atomic_ushort
	{	

	atomic() noexcept = default;

	constexpr atomic(unsigned short _Val) noexcept
		: _Atomic_ushort{(_Uint2_t)_Val}
		{	
		}

	unsigned short operator=(unsigned short _Val) volatile noexcept
		{	
		return (_Atomic_ushort::operator=(_Val));
		}

	unsigned short operator=(unsigned short _Val) noexcept
		{	
		return (_Atomic_ushort::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 










































































































































































































































		
	
inline bool atomic_is_lock_free(const volatile _Atomic_ushort *) noexcept
	{	
	return (_Atomic_is_lock_free_2());
	}

inline bool atomic_is_lock_free(const _Atomic_ushort *) noexcept
	{	
	return (_Atomic_is_lock_free_2());
	}

 
inline bool atomic_is_lock_free(const volatile atomic<unsigned short> *) noexcept
	{	
	return (_Atomic_is_lock_free_2());
	}

inline bool atomic_is_lock_free(const atomic<unsigned short> *) noexcept
	{	
	return (_Atomic_is_lock_free_2());
	}
 #line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_ushort *_Atom,
	unsigned short _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

inline void atomic_init(_Atomic_ushort *_Atom,
	unsigned short _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

 
inline void atomic_init(volatile atomic<unsigned short> *_Atom,
	unsigned short _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}

inline void atomic_init(atomic<unsigned short> *_Atom,
	unsigned short _Value) noexcept
	{	
	_Atom->_My_val = (_Uint2_t)_Value;

	}
 #line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

inline void atomic_store_explicit(
	volatile _Atomic_ushort *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
	}

inline void atomic_store_explicit(
	_Atomic_ushort *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_ushort *_Atom,
	unsigned short _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_ushort *_Atom,
	unsigned short _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline unsigned short atomic_load_explicit(
	const volatile _Atomic_ushort *_Atom, memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
	}

inline unsigned short atomic_load_explicit(
	const _Atomic_ushort *_Atom, memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_load_2 ((_Uint2_t*)&_Atom->_My_val, _Order));
	}

inline unsigned short atomic_load(
	const volatile _Atomic_ushort *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline unsigned short atomic_load(
	const _Atomic_ushort *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline unsigned short atomic_exchange_explicit(
	volatile _Atomic_ushort *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_exchange_explicit(
	_Atomic_ushort *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_exchange_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_exchange(volatile _Atomic_ushort *_Atom,
	unsigned short _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_exchange(_Atomic_ushort *_Atom,
	unsigned short _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_ushort *_Atom, unsigned short *_Exp,
		unsigned short _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_ushort *_Atom, unsigned short *_Exp,
		unsigned short _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t*)_Exp, (_Uint2_t)_Value, _Order1, _Order2));
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_ushort *_Atom, unsigned short *_Exp, unsigned short _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline unsigned short _Atomic_ushort::operator=(unsigned short _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline unsigned short _Atomic_ushort::operator=(unsigned short _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_ushort::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline bool _Atomic_ushort::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_ushort::store(unsigned short _Value,
	memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_ushort::store(unsigned short _Value,
	memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline unsigned short _Atomic_ushort::load(
	memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline unsigned short _Atomic_ushort::load(
	memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline _Atomic_ushort::operator unsigned short() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_ushort::operator unsigned short() const noexcept
	{	
	return (atomic_load(this));
	}

inline unsigned short _Atomic_ushort::exchange(
	unsigned short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::exchange(
	unsigned short _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_ushort::compare_exchange_weak(
	unsigned short& _Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ushort::compare_exchange_weak(
	unsigned short& _Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ushort::compare_exchange_weak(
	unsigned short& _Exp, unsigned short _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ushort::compare_exchange_weak(
	unsigned short& _Exp, unsigned short _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ushort::compare_exchange_strong(
	unsigned short& _Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ushort::compare_exchange_strong(
	unsigned short& _Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ushort::compare_exchange_strong(
	unsigned short& _Exp, unsigned short _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ushort::compare_exchange_strong(
	unsigned short& _Exp, unsigned short _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	inline bool atomic_is_lock_free(
		const volatile atomic<unsigned short> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_ushort *>(_Atom)));
	}

template<>
	inline bool atomic_is_lock_free(
		const atomic<unsigned short> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_ushort *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<unsigned short> *_Atom,
		unsigned short _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_ushort *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<unsigned short> *_Atom,
		unsigned short _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_ushort *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<unsigned short> *_Atom,
		unsigned short _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_ushort *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<unsigned short> *_Atom,
		unsigned short _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_ushort *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<unsigned short> *_Atom,
		unsigned short _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_ushort *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<unsigned short> *_Atom,
		unsigned short _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_ushort *>(_Atom),
		_Value, _Order);
	}

template<>
	inline unsigned short atomic_load(const volatile atomic<unsigned short> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_ushort *>(_Atom)));
	}

template<>
	inline unsigned short atomic_load(const atomic<unsigned short> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_ushort *>(_Atom)));
	}

template<>
	inline unsigned short atomic_load_explicit(
		const volatile atomic<unsigned short> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_ushort *>(_Atom), _Order));
	}

template<>
	inline unsigned short atomic_load_explicit(
		const atomic<unsigned short> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_ushort *>(_Atom), _Order));
	}

template<>
	inline unsigned short atomic_exchange(
		volatile atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_exchange(atomic<unsigned short> *_Atom,
		unsigned short _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_exchange_explicit(
		volatile atomic<unsigned short> *_Atom,
			unsigned short _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_exchange_explicit(atomic<unsigned short> *_Atom,
		unsigned short _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_ushort *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<unsigned short> *_Atom, unsigned short *_Exp,
			unsigned short _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<unsigned short> *_Atom, unsigned short *_Exp,
			unsigned short _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_ushort *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_ushort *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<unsigned short> *_Atom, unsigned short *_Exp,
			unsigned short _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<unsigned short> *_Atom, unsigned short *_Exp,
			unsigned short _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_ushort *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<unsigned short> *_Atom, unsigned short *_Exp, unsigned short _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_ushort *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 
		
inline unsigned short atomic_fetch_add_explicit(
	volatile _Atomic_ushort *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_add_explicit(
	_Atomic_ushort *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_add_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_add(volatile _Atomic_ushort *_Atom,
		unsigned short _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_add(_Atomic_ushort *_Atom,
	unsigned short _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_sub_explicit(
	volatile _Atomic_ushort *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_sub_explicit(
	_Atomic_ushort *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_sub_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_sub(volatile _Atomic_ushort *_Atom,
	unsigned short _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_sub(_Atomic_ushort *_Atom,
	unsigned short _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_and_explicit(
	volatile _Atomic_ushort *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_and_explicit(
	_Atomic_ushort *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_and_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_and(volatile _Atomic_ushort *_Atom,
	unsigned short _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_and(_Atomic_ushort *_Atom,
	unsigned short _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_or_explicit(
	volatile _Atomic_ushort *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_or_explicit(
	_Atomic_ushort *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_or_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_or(
	volatile _Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_or(
	_Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_xor_explicit(
	volatile _Atomic_ushort *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_xor_explicit(
	_Atomic_ushort *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned short)_Atomic_fetch_xor_2 ((_Uint2_t*)&_Atom->_My_val, (_Uint2_t)_Value, _Order));
	}

inline unsigned short atomic_fetch_xor(
	volatile _Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned short atomic_fetch_xor(
	_Atomic_ushort *_Atom, unsigned short _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline unsigned short _Atomic_ushort::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned short _Atomic_ushort::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned short _Atomic_ushort::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned short _Atomic_ushort::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned short _Atomic_ushort::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned short _Atomic_ushort::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned short _Atomic_ushort::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned short _Atomic_ushort::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned short _Atomic_ushort::operator+=(unsigned short _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned short _Atomic_ushort::operator+=(unsigned short _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned short _Atomic_ushort::operator-=(unsigned short _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned short _Atomic_ushort::operator-=(unsigned short _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned short _Atomic_ushort::operator&=(unsigned short _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned short _Atomic_ushort::operator&=(unsigned short _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned short _Atomic_ushort::operator|=(unsigned short _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned short _Atomic_ushort::operator|=(unsigned short _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned short _Atomic_ushort::operator^=(unsigned short _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned short _Atomic_ushort::operator^=(unsigned short _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned short _Atomic_ushort::fetch_add(
	unsigned short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_add(
	unsigned short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_sub(
	unsigned short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_sub(
	unsigned short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_and(
	unsigned short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_and(
	unsigned short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_or(
	unsigned short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_or(
	unsigned short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_xor(
	unsigned short _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline unsigned short _Atomic_ushort::fetch_xor(
	unsigned short _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline unsigned short atomic_fetch_add(
		volatile atomic<unsigned short> *_Atom,
			unsigned short _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_add(atomic<unsigned short> *_Atom,
		unsigned short _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_add_explicit(
		volatile atomic<unsigned short> *_Atom, unsigned short _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_add_explicit(
	atomic<unsigned short> *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_sub(
		volatile atomic<unsigned short> *_Atom,
			unsigned short _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_sub(atomic<unsigned short> *_Atom,
		unsigned short _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_sub_explicit(
	volatile atomic<unsigned short> *_Atom, unsigned short _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_sub_explicit(
		atomic<unsigned short> *_Atom, unsigned short _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_and(
		volatile atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_and(
		atomic<unsigned short> *_Atom, unsigned short _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_and_explicit(
		volatile atomic<unsigned short> *_Atom, unsigned short _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_and_explicit(
		atomic<unsigned short> *_Atom, unsigned short _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_or(volatile atomic<unsigned short> *_Atom,
		unsigned short _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_or(atomic<unsigned short> *_Atom,
		unsigned short _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_or_explicit(
		volatile atomic<unsigned short> *_Atom, unsigned short _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_or_explicit(
		atomic<unsigned short> *_Atom, unsigned short _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_xor(volatile atomic<unsigned short> *_Atom,
		unsigned short _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_xor(atomic<unsigned short> *_Atom,
		unsigned short _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_ushort *>(_Atom), _Value));
	}

template<>
	inline unsigned short atomic_fetch_xor_explicit(
		volatile atomic<unsigned short> *_Atom, unsigned short _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_ushort *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned short atomic_fetch_xor_explicit(
		atomic<unsigned short> *_Atom, unsigned short _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_ushort *>(_Atom), _Value, _Order));
	}
 #line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
 #line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 






























































































































#line 753 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"










static_assert(4 == sizeof (int),
	"_ISIZE and _ITYPE should match.");









  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_int
	{	
	int operator=(int) volatile noexcept;
	int operator=(int) noexcept;

	bool is_lock_free() const volatile noexcept;
	bool is_lock_free() const noexcept;
	void store(int, memory_order = memory_order_seq_cst)
		volatile noexcept;
	void store(int, memory_order = memory_order_seq_cst)
		noexcept;
	int load(memory_order = memory_order_seq_cst)
		const volatile noexcept;
	int load(memory_order = memory_order_seq_cst)
		const noexcept;
	operator int() const volatile noexcept;
	operator int() const noexcept;
	int exchange(int,
		memory_order = memory_order_seq_cst) volatile noexcept;
	int exchange(int,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(int&, int,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(int&, int,
		memory_order, memory_order) noexcept;
	bool compare_exchange_strong(int&, int,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(int&, int,
		memory_order, memory_order) noexcept;
	bool compare_exchange_weak(int&, int,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(int&, int,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(int&, int,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(int&, int,
		memory_order = memory_order_seq_cst) noexcept;

 
	int operator++(int) volatile noexcept;
	int operator++(int) noexcept;
	int operator--(int) volatile noexcept;
	int operator--(int) noexcept;
	int operator++() volatile noexcept;
	int operator++() noexcept;
	int operator--() volatile noexcept;
	int operator--() noexcept;
	int operator+=(int) volatile noexcept;
	int operator+=(int) noexcept;
	int operator-=(int) volatile noexcept;
	int operator-=(int) noexcept;
	int operator&=(int) volatile noexcept;
	int operator&=(int) noexcept;
	int operator|=(int) volatile noexcept;
	int operator|=(int) noexcept;
	int operator^=(int) volatile noexcept;
	int operator^=(int) noexcept;

	int fetch_add(int, memory_order = memory_order_seq_cst)
		volatile noexcept;
	int fetch_add(int, memory_order = memory_order_seq_cst) noexcept;
	int fetch_sub(int, memory_order = memory_order_seq_cst)
		volatile noexcept;
	int fetch_sub(int, memory_order = memory_order_seq_cst) noexcept;
	int fetch_and(int, memory_order = memory_order_seq_cst)
		volatile noexcept;
	int fetch_and(int, memory_order = memory_order_seq_cst) noexcept;
	int fetch_or(int, memory_order = memory_order_seq_cst)
		volatile noexcept;
	int fetch_or(int, memory_order = memory_order_seq_cst) noexcept;
	int fetch_xor(int, memory_order = memory_order_seq_cst)
		volatile noexcept;
	int fetch_xor(int, memory_order = memory_order_seq_cst) noexcept;
 #line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 


















 



 
	alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;
 

#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	} _Atomic_int;

 
		
template<>
	struct atomic<int>
		: _Atomic_int
	{	

	atomic() noexcept = default;

	constexpr atomic(int _Val) noexcept
		: _Atomic_int{(_Uint4_t)_Val}
		{	
		}

	int operator=(int _Val) volatile noexcept
		{	
		return (_Atomic_int::operator=(_Val));
		}

	int operator=(int _Val) noexcept
		{	
		return (_Atomic_int::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 










































































































































































































































		
	
inline bool atomic_is_lock_free(const volatile _Atomic_int *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}

inline bool atomic_is_lock_free(const _Atomic_int *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}

 
inline bool atomic_is_lock_free(const volatile atomic<int> *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}

inline bool atomic_is_lock_free(const atomic<int> *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}
 #line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_int *_Atom,
	int _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(_Atomic_int *_Atom,
	int _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

 
inline void atomic_init(volatile atomic<int> *_Atom,
	int _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(atomic<int> *_Atom,
	int _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}
 #line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

inline void atomic_store_explicit(
	volatile _Atomic_int *_Atom, int _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store_explicit(
	_Atomic_int *_Atom, int _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_int *_Atom,
	int _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_int *_Atom,
	int _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline int atomic_load_explicit(
	const volatile _Atomic_int *_Atom, memory_order _Order) noexcept
	{	
	return ((int)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

inline int atomic_load_explicit(
	const _Atomic_int *_Atom, memory_order _Order) noexcept
	{	
	return ((int)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

inline int atomic_load(
	const volatile _Atomic_int *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline int atomic_load(
	const _Atomic_int *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline int atomic_exchange_explicit(
	volatile _Atomic_int *_Atom, int _Value,
		memory_order _Order) noexcept
	{	
	return ((int)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_exchange_explicit(
	_Atomic_int *_Atom, int _Value,
		memory_order _Order) noexcept
	{	
	return ((int)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_exchange(volatile _Atomic_int *_Atom,
	int _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_exchange(_Atomic_int *_Atom,
	int _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_int *_Atom, int *_Exp, int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_int *_Atom, int *_Exp, int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_int *_Atom, int *_Exp,
		int _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_int *_Atom, int *_Exp,
		int _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_int *_Atom, int *_Exp, int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_int *_Atom, int *_Exp, int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_int *_Atom, int *_Exp, int _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_int *_Atom, int *_Exp, int _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline int _Atomic_int::operator=(int _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline int _Atomic_int::operator=(int _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_int::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline bool _Atomic_int::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_int::store(int _Value,
	memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_int::store(int _Value,
	memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline int _Atomic_int::load(
	memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline int _Atomic_int::load(
	memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline _Atomic_int::operator int() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_int::operator int() const noexcept
	{	
	return (atomic_load(this));
	}

inline int _Atomic_int::exchange(
	int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::exchange(
	int _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_int::compare_exchange_weak(
	int& _Exp, int _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_int::compare_exchange_weak(
	int& _Exp, int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_int::compare_exchange_weak(
	int& _Exp, int _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_int::compare_exchange_weak(
	int& _Exp, int _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_int::compare_exchange_strong(
	int& _Exp, int _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_int::compare_exchange_strong(
	int& _Exp, int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_int::compare_exchange_strong(
	int& _Exp, int _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_int::compare_exchange_strong(
	int& _Exp, int _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	inline bool atomic_is_lock_free(
		const volatile atomic<int> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_int *>(_Atom)));
	}

template<>
	inline bool atomic_is_lock_free(
		const atomic<int> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_int *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<int> *_Atom,
		int _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_int *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<int> *_Atom,
		int _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_int *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<int> *_Atom,
		int _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_int *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<int> *_Atom,
		int _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_int *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<int> *_Atom,
		int _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_int *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<int> *_Atom,
		int _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_int *>(_Atom),
		_Value, _Order);
	}

template<>
	inline int atomic_load(const volatile atomic<int> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_int *>(_Atom)));
	}

template<>
	inline int atomic_load(const atomic<int> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_int *>(_Atom)));
	}

template<>
	inline int atomic_load_explicit(
		const volatile atomic<int> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_int *>(_Atom), _Order));
	}

template<>
	inline int atomic_load_explicit(
		const atomic<int> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_int *>(_Atom), _Order));
	}

template<>
	inline int atomic_exchange(
		volatile atomic<int> *_Atom, int _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_exchange(atomic<int> *_Atom,
		int _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_exchange_explicit(
		volatile atomic<int> *_Atom,
			int _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_exchange_explicit(atomic<int> *_Atom,
		int _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_int *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<int> *_Atom, int *_Exp,
			int _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_int *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<int> *_Atom, int *_Exp,
			int _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_int *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<int> *_Atom, int *_Exp, int _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_int *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<int> *_Atom, int *_Exp, int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_int *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<int> *_Atom, int *_Exp,
			int _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_int *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<int> *_Atom, int *_Exp,
			int _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_int *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<int> *_Atom, int *_Exp, int _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_int *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<int> *_Atom, int *_Exp, int _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_int *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 
		
inline int atomic_fetch_add_explicit(
	volatile _Atomic_int *_Atom, int _Value,
		memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_add_explicit(
	_Atomic_int *_Atom, int _Value,
		memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_add(volatile _Atomic_int *_Atom,
		int _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_add(_Atomic_int *_Atom,
	int _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_sub_explicit(
	volatile _Atomic_int *_Atom, int _Value,
		memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_sub_explicit(
	_Atomic_int *_Atom, int _Value,
		memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_sub(volatile _Atomic_int *_Atom,
	int _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_sub(_Atomic_int *_Atom,
	int _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_and_explicit(
	volatile _Atomic_int *_Atom, int _Value,
		memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_and_explicit(
	_Atomic_int *_Atom, int _Value,
		memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_and(volatile _Atomic_int *_Atom,
	int _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_and(_Atomic_int *_Atom,
	int _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_or_explicit(
	volatile _Atomic_int *_Atom, int _Value,
		memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_or_explicit(
	_Atomic_int *_Atom, int _Value,
		memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_or(
	volatile _Atomic_int *_Atom, int _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_or(
	_Atomic_int *_Atom, int _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_xor_explicit(
	volatile _Atomic_int *_Atom, int _Value,
		memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_xor_explicit(
	_Atomic_int *_Atom, int _Value,
		memory_order _Order) noexcept
	{	
	return ((int)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline int atomic_fetch_xor(
	volatile _Atomic_int *_Atom, int _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline int atomic_fetch_xor(
	_Atomic_int *_Atom, int _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline int _Atomic_int::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline int _Atomic_int::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline int _Atomic_int::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline int _Atomic_int::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline int _Atomic_int::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline int _Atomic_int::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline int _Atomic_int::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline int _Atomic_int::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline int _Atomic_int::operator+=(int _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline int _Atomic_int::operator+=(int _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline int _Atomic_int::operator-=(int _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline int _Atomic_int::operator-=(int _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline int _Atomic_int::operator&=(int _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline int _Atomic_int::operator&=(int _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline int _Atomic_int::operator|=(int _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline int _Atomic_int::operator|=(int _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline int _Atomic_int::operator^=(int _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline int _Atomic_int::operator^=(int _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline int _Atomic_int::fetch_add(
	int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_add(
	int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_sub(
	int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_sub(
	int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_and(
	int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_and(
	int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_or(
	int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_or(
	int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_xor(
	int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline int _Atomic_int::fetch_xor(
	int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline int atomic_fetch_add(
		volatile atomic<int> *_Atom,
			int _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_add(atomic<int> *_Atom,
		int _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_add_explicit(
		volatile atomic<int> *_Atom, int _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_add_explicit(
	atomic<int> *_Atom, int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_sub(
		volatile atomic<int> *_Atom,
			int _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_sub(atomic<int> *_Atom,
		int _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_sub_explicit(
	volatile atomic<int> *_Atom, int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_sub_explicit(
		atomic<int> *_Atom, int _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_and(
		volatile atomic<int> *_Atom, int _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_and(
		atomic<int> *_Atom, int _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_and_explicit(
		volatile atomic<int> *_Atom, int _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_and_explicit(
		atomic<int> *_Atom, int _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_or(volatile atomic<int> *_Atom,
		int _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_or(atomic<int> *_Atom,
		int _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_or_explicit(
		volatile atomic<int> *_Atom, int _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_or_explicit(
		atomic<int> *_Atom, int _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_xor(volatile atomic<int> *_Atom,
		int _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_xor(atomic<int> *_Atom,
		int _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_int *>(_Atom), _Value));
	}

template<>
	inline int atomic_fetch_xor_explicit(
		volatile atomic<int> *_Atom, int _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_int *>(_Atom), _Value, _Order));
	}

template<>
	inline int atomic_fetch_xor_explicit(
		atomic<int> *_Atom, int _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_int *>(_Atom), _Value, _Order));
	}
 #line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
 #line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 






























































































































#line 759 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"










static_assert(4 == sizeof (unsigned int),
	"_ISIZE and _ITYPE should match.");









  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_uint
	{	
	unsigned int operator=(unsigned int) volatile noexcept;
	unsigned int operator=(unsigned int) noexcept;

	bool is_lock_free() const volatile noexcept;
	bool is_lock_free() const noexcept;
	void store(unsigned int, memory_order = memory_order_seq_cst)
		volatile noexcept;
	void store(unsigned int, memory_order = memory_order_seq_cst)
		noexcept;
	unsigned int load(memory_order = memory_order_seq_cst)
		const volatile noexcept;
	unsigned int load(memory_order = memory_order_seq_cst)
		const noexcept;
	operator unsigned int() const volatile noexcept;
	operator unsigned int() const noexcept;
	unsigned int exchange(unsigned int,
		memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned int exchange(unsigned int,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(unsigned int&, unsigned int,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(unsigned int&, unsigned int,
		memory_order, memory_order) noexcept;
	bool compare_exchange_strong(unsigned int&, unsigned int,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(unsigned int&, unsigned int,
		memory_order, memory_order) noexcept;
	bool compare_exchange_weak(unsigned int&, unsigned int,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(unsigned int&, unsigned int,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(unsigned int&, unsigned int,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(unsigned int&, unsigned int,
		memory_order = memory_order_seq_cst) noexcept;

 
	unsigned int operator++(int) volatile noexcept;
	unsigned int operator++(int) noexcept;
	unsigned int operator--(int) volatile noexcept;
	unsigned int operator--(int) noexcept;
	unsigned int operator++() volatile noexcept;
	unsigned int operator++() noexcept;
	unsigned int operator--() volatile noexcept;
	unsigned int operator--() noexcept;
	unsigned int operator+=(unsigned int) volatile noexcept;
	unsigned int operator+=(unsigned int) noexcept;
	unsigned int operator-=(unsigned int) volatile noexcept;
	unsigned int operator-=(unsigned int) noexcept;
	unsigned int operator&=(unsigned int) volatile noexcept;
	unsigned int operator&=(unsigned int) noexcept;
	unsigned int operator|=(unsigned int) volatile noexcept;
	unsigned int operator|=(unsigned int) noexcept;
	unsigned int operator^=(unsigned int) volatile noexcept;
	unsigned int operator^=(unsigned int) noexcept;

	unsigned int fetch_add(unsigned int, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned int fetch_add(unsigned int, memory_order = memory_order_seq_cst) noexcept;
	unsigned int fetch_sub(unsigned int, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned int fetch_sub(unsigned int, memory_order = memory_order_seq_cst) noexcept;
	unsigned int fetch_and(unsigned int, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned int fetch_and(unsigned int, memory_order = memory_order_seq_cst) noexcept;
	unsigned int fetch_or(unsigned int, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned int fetch_or(unsigned int, memory_order = memory_order_seq_cst) noexcept;
	unsigned int fetch_xor(unsigned int, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned int fetch_xor(unsigned int, memory_order = memory_order_seq_cst) noexcept;
 #line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 


















 



 
	alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;
 

#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	} _Atomic_uint;

 
		
template<>
	struct atomic<unsigned int>
		: _Atomic_uint
	{	

	atomic() noexcept = default;

	constexpr atomic(unsigned int _Val) noexcept
		: _Atomic_uint{(_Uint4_t)_Val}
		{	
		}

	unsigned int operator=(unsigned int _Val) volatile noexcept
		{	
		return (_Atomic_uint::operator=(_Val));
		}

	unsigned int operator=(unsigned int _Val) noexcept
		{	
		return (_Atomic_uint::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 










































































































































































































































		
	
inline bool atomic_is_lock_free(const volatile _Atomic_uint *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}

inline bool atomic_is_lock_free(const _Atomic_uint *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}

 
inline bool atomic_is_lock_free(const volatile atomic<unsigned int> *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}

inline bool atomic_is_lock_free(const atomic<unsigned int> *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}
 #line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_uint *_Atom,
	unsigned int _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(_Atomic_uint *_Atom,
	unsigned int _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

 
inline void atomic_init(volatile atomic<unsigned int> *_Atom,
	unsigned int _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(atomic<unsigned int> *_Atom,
	unsigned int _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}
 #line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

inline void atomic_store_explicit(
	volatile _Atomic_uint *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store_explicit(
	_Atomic_uint *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_uint *_Atom,
	unsigned int _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_uint *_Atom,
	unsigned int _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline unsigned int atomic_load_explicit(
	const volatile _Atomic_uint *_Atom, memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

inline unsigned int atomic_load_explicit(
	const _Atomic_uint *_Atom, memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

inline unsigned int atomic_load(
	const volatile _Atomic_uint *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline unsigned int atomic_load(
	const _Atomic_uint *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline unsigned int atomic_exchange_explicit(
	volatile _Atomic_uint *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_exchange_explicit(
	_Atomic_uint *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_exchange(volatile _Atomic_uint *_Atom,
	unsigned int _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_exchange(_Atomic_uint *_Atom,
	unsigned int _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_uint *_Atom, unsigned int *_Exp,
		unsigned int _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_uint *_Atom, unsigned int *_Exp,
		unsigned int _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_uint *_Atom, unsigned int *_Exp, unsigned int _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline unsigned int _Atomic_uint::operator=(unsigned int _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline unsigned int _Atomic_uint::operator=(unsigned int _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_uint::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline bool _Atomic_uint::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_uint::store(unsigned int _Value,
	memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_uint::store(unsigned int _Value,
	memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline unsigned int _Atomic_uint::load(
	memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline unsigned int _Atomic_uint::load(
	memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline _Atomic_uint::operator unsigned int() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_uint::operator unsigned int() const noexcept
	{	
	return (atomic_load(this));
	}

inline unsigned int _Atomic_uint::exchange(
	unsigned int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::exchange(
	unsigned int _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_uint::compare_exchange_weak(
	unsigned int& _Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_uint::compare_exchange_weak(
	unsigned int& _Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_uint::compare_exchange_weak(
	unsigned int& _Exp, unsigned int _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_uint::compare_exchange_weak(
	unsigned int& _Exp, unsigned int _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_uint::compare_exchange_strong(
	unsigned int& _Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_uint::compare_exchange_strong(
	unsigned int& _Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_uint::compare_exchange_strong(
	unsigned int& _Exp, unsigned int _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_uint::compare_exchange_strong(
	unsigned int& _Exp, unsigned int _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	inline bool atomic_is_lock_free(
		const volatile atomic<unsigned int> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_uint *>(_Atom)));
	}

template<>
	inline bool atomic_is_lock_free(
		const atomic<unsigned int> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_uint *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<unsigned int> *_Atom,
		unsigned int _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_uint *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<unsigned int> *_Atom,
		unsigned int _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_uint *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<unsigned int> *_Atom,
		unsigned int _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_uint *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<unsigned int> *_Atom,
		unsigned int _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_uint *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<unsigned int> *_Atom,
		unsigned int _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_uint *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<unsigned int> *_Atom,
		unsigned int _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_uint *>(_Atom),
		_Value, _Order);
	}

template<>
	inline unsigned int atomic_load(const volatile atomic<unsigned int> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_uint *>(_Atom)));
	}

template<>
	inline unsigned int atomic_load(const atomic<unsigned int> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_uint *>(_Atom)));
	}

template<>
	inline unsigned int atomic_load_explicit(
		const volatile atomic<unsigned int> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_uint *>(_Atom), _Order));
	}

template<>
	inline unsigned int atomic_load_explicit(
		const atomic<unsigned int> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_uint *>(_Atom), _Order));
	}

template<>
	inline unsigned int atomic_exchange(
		volatile atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_exchange(atomic<unsigned int> *_Atom,
		unsigned int _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_exchange_explicit(
		volatile atomic<unsigned int> *_Atom,
			unsigned int _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_exchange_explicit(atomic<unsigned int> *_Atom,
		unsigned int _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_uint *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<unsigned int> *_Atom, unsigned int *_Exp,
			unsigned int _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_uint *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<unsigned int> *_Atom, unsigned int *_Exp,
			unsigned int _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_uint *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_uint *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_uint *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<unsigned int> *_Atom, unsigned int *_Exp,
			unsigned int _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_uint *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<unsigned int> *_Atom, unsigned int *_Exp,
			unsigned int _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_uint *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_uint *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<unsigned int> *_Atom, unsigned int *_Exp, unsigned int _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_uint *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 
		
inline unsigned int atomic_fetch_add_explicit(
	volatile _Atomic_uint *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_add_explicit(
	_Atomic_uint *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_add(volatile _Atomic_uint *_Atom,
		unsigned int _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_add(_Atomic_uint *_Atom,
	unsigned int _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_sub_explicit(
	volatile _Atomic_uint *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_sub_explicit(
	_Atomic_uint *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_sub(volatile _Atomic_uint *_Atom,
	unsigned int _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_sub(_Atomic_uint *_Atom,
	unsigned int _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_and_explicit(
	volatile _Atomic_uint *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_and_explicit(
	_Atomic_uint *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_and(volatile _Atomic_uint *_Atom,
	unsigned int _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_and(_Atomic_uint *_Atom,
	unsigned int _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_or_explicit(
	volatile _Atomic_uint *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_or_explicit(
	_Atomic_uint *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_or(
	volatile _Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_or(
	_Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_xor_explicit(
	volatile _Atomic_uint *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_xor_explicit(
	_Atomic_uint *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned int)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned int atomic_fetch_xor(
	volatile _Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned int atomic_fetch_xor(
	_Atomic_uint *_Atom, unsigned int _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline unsigned int _Atomic_uint::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned int _Atomic_uint::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned int _Atomic_uint::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned int _Atomic_uint::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned int _Atomic_uint::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned int _Atomic_uint::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned int _Atomic_uint::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned int _Atomic_uint::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned int _Atomic_uint::operator+=(unsigned int _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned int _Atomic_uint::operator+=(unsigned int _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned int _Atomic_uint::operator-=(unsigned int _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned int _Atomic_uint::operator-=(unsigned int _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned int _Atomic_uint::operator&=(unsigned int _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned int _Atomic_uint::operator&=(unsigned int _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned int _Atomic_uint::operator|=(unsigned int _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned int _Atomic_uint::operator|=(unsigned int _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned int _Atomic_uint::operator^=(unsigned int _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned int _Atomic_uint::operator^=(unsigned int _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned int _Atomic_uint::fetch_add(
	unsigned int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_add(
	unsigned int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_sub(
	unsigned int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_sub(
	unsigned int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_and(
	unsigned int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_and(
	unsigned int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_or(
	unsigned int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_or(
	unsigned int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_xor(
	unsigned int _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline unsigned int _Atomic_uint::fetch_xor(
	unsigned int _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline unsigned int atomic_fetch_add(
		volatile atomic<unsigned int> *_Atom,
			unsigned int _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_add(atomic<unsigned int> *_Atom,
		unsigned int _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_add_explicit(
		volatile atomic<unsigned int> *_Atom, unsigned int _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_add_explicit(
	atomic<unsigned int> *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_sub(
		volatile atomic<unsigned int> *_Atom,
			unsigned int _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_sub(atomic<unsigned int> *_Atom,
		unsigned int _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_sub_explicit(
	volatile atomic<unsigned int> *_Atom, unsigned int _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_sub_explicit(
		atomic<unsigned int> *_Atom, unsigned int _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_and(
		volatile atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_and(
		atomic<unsigned int> *_Atom, unsigned int _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_and_explicit(
		volatile atomic<unsigned int> *_Atom, unsigned int _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_and_explicit(
		atomic<unsigned int> *_Atom, unsigned int _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_or(volatile atomic<unsigned int> *_Atom,
		unsigned int _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_or(atomic<unsigned int> *_Atom,
		unsigned int _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_or_explicit(
		volatile atomic<unsigned int> *_Atom, unsigned int _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_or_explicit(
		atomic<unsigned int> *_Atom, unsigned int _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_xor(volatile atomic<unsigned int> *_Atom,
		unsigned int _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_xor(atomic<unsigned int> *_Atom,
		unsigned int _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_uint *>(_Atom), _Value));
	}

template<>
	inline unsigned int atomic_fetch_xor_explicit(
		volatile atomic<unsigned int> *_Atom, unsigned int _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_uint *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned int atomic_fetch_xor_explicit(
		atomic<unsigned int> *_Atom, unsigned int _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_uint *>(_Atom), _Value, _Order));
	}
 #line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
 #line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 






























































































































#line 765 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"










static_assert(4 == sizeof (long),
	"_ISIZE and _ITYPE should match.");









  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_long
	{	
	long operator=(long) volatile noexcept;
	long operator=(long) noexcept;

	bool is_lock_free() const volatile noexcept;
	bool is_lock_free() const noexcept;
	void store(long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	void store(long, memory_order = memory_order_seq_cst)
		noexcept;
	long load(memory_order = memory_order_seq_cst)
		const volatile noexcept;
	long load(memory_order = memory_order_seq_cst)
		const noexcept;
	operator long() const volatile noexcept;
	operator long() const noexcept;
	long exchange(long,
		memory_order = memory_order_seq_cst) volatile noexcept;
	long exchange(long,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(long&, long,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(long&, long,
		memory_order, memory_order) noexcept;
	bool compare_exchange_strong(long&, long,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(long&, long,
		memory_order, memory_order) noexcept;
	bool compare_exchange_weak(long&, long,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(long&, long,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(long&, long,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(long&, long,
		memory_order = memory_order_seq_cst) noexcept;

 
	long operator++(int) volatile noexcept;
	long operator++(int) noexcept;
	long operator--(int) volatile noexcept;
	long operator--(int) noexcept;
	long operator++() volatile noexcept;
	long operator++() noexcept;
	long operator--() volatile noexcept;
	long operator--() noexcept;
	long operator+=(long) volatile noexcept;
	long operator+=(long) noexcept;
	long operator-=(long) volatile noexcept;
	long operator-=(long) noexcept;
	long operator&=(long) volatile noexcept;
	long operator&=(long) noexcept;
	long operator|=(long) volatile noexcept;
	long operator|=(long) noexcept;
	long operator^=(long) volatile noexcept;
	long operator^=(long) noexcept;

	long fetch_add(long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	long fetch_add(long, memory_order = memory_order_seq_cst) noexcept;
	long fetch_sub(long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	long fetch_sub(long, memory_order = memory_order_seq_cst) noexcept;
	long fetch_and(long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	long fetch_and(long, memory_order = memory_order_seq_cst) noexcept;
	long fetch_or(long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	long fetch_or(long, memory_order = memory_order_seq_cst) noexcept;
	long fetch_xor(long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	long fetch_xor(long, memory_order = memory_order_seq_cst) noexcept;
 #line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 


















 



 
	alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;
 

#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	} _Atomic_long;

 
		
template<>
	struct atomic<long>
		: _Atomic_long
	{	

	atomic() noexcept = default;

	constexpr atomic(long _Val) noexcept
		: _Atomic_long{(_Uint4_t)_Val}
		{	
		}

	long operator=(long _Val) volatile noexcept
		{	
		return (_Atomic_long::operator=(_Val));
		}

	long operator=(long _Val) noexcept
		{	
		return (_Atomic_long::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 










































































































































































































































		
	
inline bool atomic_is_lock_free(const volatile _Atomic_long *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}

inline bool atomic_is_lock_free(const _Atomic_long *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}

 
inline bool atomic_is_lock_free(const volatile atomic<long> *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}

inline bool atomic_is_lock_free(const atomic<long> *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}
 #line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_long *_Atom,
	long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(_Atomic_long *_Atom,
	long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

 
inline void atomic_init(volatile atomic<long> *_Atom,
	long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(atomic<long> *_Atom,
	long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}
 #line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

inline void atomic_store_explicit(
	volatile _Atomic_long *_Atom, long _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store_explicit(
	_Atomic_long *_Atom, long _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_long *_Atom,
	long _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_long *_Atom,
	long _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline long atomic_load_explicit(
	const volatile _Atomic_long *_Atom, memory_order _Order) noexcept
	{	
	return ((long)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

inline long atomic_load_explicit(
	const _Atomic_long *_Atom, memory_order _Order) noexcept
	{	
	return ((long)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

inline long atomic_load(
	const volatile _Atomic_long *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline long atomic_load(
	const _Atomic_long *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline long atomic_exchange_explicit(
	volatile _Atomic_long *_Atom, long _Value,
		memory_order _Order) noexcept
	{	
	return ((long)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_exchange_explicit(
	_Atomic_long *_Atom, long _Value,
		memory_order _Order) noexcept
	{	
	return ((long)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_exchange(volatile _Atomic_long *_Atom,
	long _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_exchange(_Atomic_long *_Atom,
	long _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_long *_Atom, long *_Exp, long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_long *_Atom, long *_Exp, long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_long *_Atom, long *_Exp,
		long _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_long *_Atom, long *_Exp,
		long _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_long *_Atom, long *_Exp, long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_long *_Atom, long *_Exp, long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_long *_Atom, long *_Exp, long _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_long *_Atom, long *_Exp, long _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline long _Atomic_long::operator=(long _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline long _Atomic_long::operator=(long _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_long::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline bool _Atomic_long::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_long::store(long _Value,
	memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_long::store(long _Value,
	memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline long _Atomic_long::load(
	memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline long _Atomic_long::load(
	memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline _Atomic_long::operator long() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_long::operator long() const noexcept
	{	
	return (atomic_load(this));
	}

inline long _Atomic_long::exchange(
	long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::exchange(
	long _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_long::compare_exchange_weak(
	long& _Exp, long _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_long::compare_exchange_weak(
	long& _Exp, long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_long::compare_exchange_weak(
	long& _Exp, long _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_long::compare_exchange_weak(
	long& _Exp, long _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_long::compare_exchange_strong(
	long& _Exp, long _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_long::compare_exchange_strong(
	long& _Exp, long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_long::compare_exchange_strong(
	long& _Exp, long _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_long::compare_exchange_strong(
	long& _Exp, long _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	inline bool atomic_is_lock_free(
		const volatile atomic<long> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_long *>(_Atom)));
	}

template<>
	inline bool atomic_is_lock_free(
		const atomic<long> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_long *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<long> *_Atom,
		long _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_long *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<long> *_Atom,
		long _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_long *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<long> *_Atom,
		long _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_long *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<long> *_Atom,
		long _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_long *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<long> *_Atom,
		long _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_long *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<long> *_Atom,
		long _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_long *>(_Atom),
		_Value, _Order);
	}

template<>
	inline long atomic_load(const volatile atomic<long> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_long *>(_Atom)));
	}

template<>
	inline long atomic_load(const atomic<long> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_long *>(_Atom)));
	}

template<>
	inline long atomic_load_explicit(
		const volatile atomic<long> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_long *>(_Atom), _Order));
	}

template<>
	inline long atomic_load_explicit(
		const atomic<long> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_long *>(_Atom), _Order));
	}

template<>
	inline long atomic_exchange(
		volatile atomic<long> *_Atom, long _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_exchange(atomic<long> *_Atom,
		long _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_exchange_explicit(
		volatile atomic<long> *_Atom,
			long _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_exchange_explicit(atomic<long> *_Atom,
		long _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_long *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<long> *_Atom, long *_Exp,
			long _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_long *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<long> *_Atom, long *_Exp,
			long _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_long *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<long> *_Atom, long *_Exp, long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_long *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<long> *_Atom, long *_Exp, long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_long *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<long> *_Atom, long *_Exp,
			long _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_long *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<long> *_Atom, long *_Exp,
			long _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_long *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<long> *_Atom, long *_Exp, long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_long *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<long> *_Atom, long *_Exp, long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_long *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 
		
inline long atomic_fetch_add_explicit(
	volatile _Atomic_long *_Atom, long _Value,
		memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_add_explicit(
	_Atomic_long *_Atom, long _Value,
		memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_add(volatile _Atomic_long *_Atom,
		long _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_add(_Atomic_long *_Atom,
	long _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_sub_explicit(
	volatile _Atomic_long *_Atom, long _Value,
		memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_sub_explicit(
	_Atomic_long *_Atom, long _Value,
		memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_sub(volatile _Atomic_long *_Atom,
	long _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_sub(_Atomic_long *_Atom,
	long _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_and_explicit(
	volatile _Atomic_long *_Atom, long _Value,
		memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_and_explicit(
	_Atomic_long *_Atom, long _Value,
		memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_and(volatile _Atomic_long *_Atom,
	long _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_and(_Atomic_long *_Atom,
	long _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_or_explicit(
	volatile _Atomic_long *_Atom, long _Value,
		memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_or_explicit(
	_Atomic_long *_Atom, long _Value,
		memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_or(
	volatile _Atomic_long *_Atom, long _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_or(
	_Atomic_long *_Atom, long _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_xor_explicit(
	volatile _Atomic_long *_Atom, long _Value,
		memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_xor_explicit(
	_Atomic_long *_Atom, long _Value,
		memory_order _Order) noexcept
	{	
	return ((long)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline long atomic_fetch_xor(
	volatile _Atomic_long *_Atom, long _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long atomic_fetch_xor(
	_Atomic_long *_Atom, long _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline long _Atomic_long::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline long _Atomic_long::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline long _Atomic_long::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline long _Atomic_long::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline long _Atomic_long::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline long _Atomic_long::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline long _Atomic_long::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline long _Atomic_long::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline long _Atomic_long::operator+=(long _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline long _Atomic_long::operator+=(long _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline long _Atomic_long::operator-=(long _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline long _Atomic_long::operator-=(long _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline long _Atomic_long::operator&=(long _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline long _Atomic_long::operator&=(long _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline long _Atomic_long::operator|=(long _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline long _Atomic_long::operator|=(long _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline long _Atomic_long::operator^=(long _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline long _Atomic_long::operator^=(long _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline long _Atomic_long::fetch_add(
	long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_add(
	long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_sub(
	long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_sub(
	long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_and(
	long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_and(
	long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_or(
	long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_or(
	long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_xor(
	long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline long _Atomic_long::fetch_xor(
	long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline long atomic_fetch_add(
		volatile atomic<long> *_Atom,
			long _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_add(atomic<long> *_Atom,
		long _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_add_explicit(
		volatile atomic<long> *_Atom, long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_add_explicit(
	atomic<long> *_Atom, long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_sub(
		volatile atomic<long> *_Atom,
			long _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_sub(atomic<long> *_Atom,
		long _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_sub_explicit(
	volatile atomic<long> *_Atom, long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_sub_explicit(
		atomic<long> *_Atom, long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_and(
		volatile atomic<long> *_Atom, long _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_and(
		atomic<long> *_Atom, long _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_and_explicit(
		volatile atomic<long> *_Atom, long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_and_explicit(
		atomic<long> *_Atom, long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_or(volatile atomic<long> *_Atom,
		long _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_or(atomic<long> *_Atom,
		long _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_or_explicit(
		volatile atomic<long> *_Atom, long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_or_explicit(
		atomic<long> *_Atom, long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_xor(volatile atomic<long> *_Atom,
		long _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_xor(atomic<long> *_Atom,
		long _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_long *>(_Atom), _Value));
	}

template<>
	inline long atomic_fetch_xor_explicit(
		volatile atomic<long> *_Atom, long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_long *>(_Atom), _Value, _Order));
	}

template<>
	inline long atomic_fetch_xor_explicit(
		atomic<long> *_Atom, long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_long *>(_Atom), _Value, _Order));
	}
 #line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
 #line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 






























































































































#line 771 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"










static_assert(4 == sizeof (unsigned long),
	"_ISIZE and _ITYPE should match.");









  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_ulong
	{	
	unsigned long operator=(unsigned long) volatile noexcept;
	unsigned long operator=(unsigned long) noexcept;

	bool is_lock_free() const volatile noexcept;
	bool is_lock_free() const noexcept;
	void store(unsigned long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	void store(unsigned long, memory_order = memory_order_seq_cst)
		noexcept;
	unsigned long load(memory_order = memory_order_seq_cst)
		const volatile noexcept;
	unsigned long load(memory_order = memory_order_seq_cst)
		const noexcept;
	operator unsigned long() const volatile noexcept;
	operator unsigned long() const noexcept;
	unsigned long exchange(unsigned long,
		memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned long exchange(unsigned long,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(unsigned long&, unsigned long,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(unsigned long&, unsigned long,
		memory_order, memory_order) noexcept;
	bool compare_exchange_strong(unsigned long&, unsigned long,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(unsigned long&, unsigned long,
		memory_order, memory_order) noexcept;
	bool compare_exchange_weak(unsigned long&, unsigned long,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(unsigned long&, unsigned long,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(unsigned long&, unsigned long,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(unsigned long&, unsigned long,
		memory_order = memory_order_seq_cst) noexcept;

 
	unsigned long operator++(int) volatile noexcept;
	unsigned long operator++(int) noexcept;
	unsigned long operator--(int) volatile noexcept;
	unsigned long operator--(int) noexcept;
	unsigned long operator++() volatile noexcept;
	unsigned long operator++() noexcept;
	unsigned long operator--() volatile noexcept;
	unsigned long operator--() noexcept;
	unsigned long operator+=(unsigned long) volatile noexcept;
	unsigned long operator+=(unsigned long) noexcept;
	unsigned long operator-=(unsigned long) volatile noexcept;
	unsigned long operator-=(unsigned long) noexcept;
	unsigned long operator&=(unsigned long) volatile noexcept;
	unsigned long operator&=(unsigned long) noexcept;
	unsigned long operator|=(unsigned long) volatile noexcept;
	unsigned long operator|=(unsigned long) noexcept;
	unsigned long operator^=(unsigned long) volatile noexcept;
	unsigned long operator^=(unsigned long) noexcept;

	unsigned long fetch_add(unsigned long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned long fetch_add(unsigned long, memory_order = memory_order_seq_cst) noexcept;
	unsigned long fetch_sub(unsigned long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned long fetch_sub(unsigned long, memory_order = memory_order_seq_cst) noexcept;
	unsigned long fetch_and(unsigned long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned long fetch_and(unsigned long, memory_order = memory_order_seq_cst) noexcept;
	unsigned long fetch_or(unsigned long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned long fetch_or(unsigned long, memory_order = memory_order_seq_cst) noexcept;
	unsigned long fetch_xor(unsigned long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned long fetch_xor(unsigned long, memory_order = memory_order_seq_cst) noexcept;
 #line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 


















 



 
	alignas(sizeof(_Uint4_t)) _Uint4_t _My_val;
 

#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	} _Atomic_ulong;

 
		
template<>
	struct atomic<unsigned long>
		: _Atomic_ulong
	{	

	atomic() noexcept = default;

	constexpr atomic(unsigned long _Val) noexcept
		: _Atomic_ulong{(_Uint4_t)_Val}
		{	
		}

	unsigned long operator=(unsigned long _Val) volatile noexcept
		{	
		return (_Atomic_ulong::operator=(_Val));
		}

	unsigned long operator=(unsigned long _Val) noexcept
		{	
		return (_Atomic_ulong::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 










































































































































































































































		
	
inline bool atomic_is_lock_free(const volatile _Atomic_ulong *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}

inline bool atomic_is_lock_free(const _Atomic_ulong *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}

 
inline bool atomic_is_lock_free(const volatile atomic<unsigned long> *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}

inline bool atomic_is_lock_free(const atomic<unsigned long> *) noexcept
	{	
	return (_Atomic_is_lock_free_4());
	}
 #line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_ulong *_Atom,
	unsigned long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(_Atomic_ulong *_Atom,
	unsigned long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

 
inline void atomic_init(volatile atomic<unsigned long> *_Atom,
	unsigned long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}

inline void atomic_init(atomic<unsigned long> *_Atom,
	unsigned long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint4_t)_Value;

	}
 #line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

inline void atomic_store_explicit(
	volatile _Atomic_ulong *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store_explicit(
	_Atomic_ulong *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_ulong *_Atom,
	unsigned long _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_ulong *_Atom,
	unsigned long _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline unsigned long atomic_load_explicit(
	const volatile _Atomic_ulong *_Atom, memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

inline unsigned long atomic_load_explicit(
	const _Atomic_ulong *_Atom, memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_load_4 ((_Uint4_t*)&_Atom->_My_val, _Order));
	}

inline unsigned long atomic_load(
	const volatile _Atomic_ulong *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline unsigned long atomic_load(
	const _Atomic_ulong *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline unsigned long atomic_exchange_explicit(
	volatile _Atomic_ulong *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_exchange_explicit(
	_Atomic_ulong *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_exchange_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_exchange(volatile _Atomic_ulong *_Atom,
	unsigned long _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_exchange(_Atomic_ulong *_Atom,
	unsigned long _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_ulong *_Atom, unsigned long *_Exp,
		unsigned long _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_ulong *_Atom, unsigned long *_Exp,
		unsigned long _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t*)_Exp, (_Uint4_t)_Value, _Order1, _Order2));
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_ulong *_Atom, unsigned long *_Exp, unsigned long _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline unsigned long _Atomic_ulong::operator=(unsigned long _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline unsigned long _Atomic_ulong::operator=(unsigned long _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_ulong::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline bool _Atomic_ulong::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_ulong::store(unsigned long _Value,
	memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_ulong::store(unsigned long _Value,
	memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline unsigned long _Atomic_ulong::load(
	memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline unsigned long _Atomic_ulong::load(
	memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline _Atomic_ulong::operator unsigned long() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_ulong::operator unsigned long() const noexcept
	{	
	return (atomic_load(this));
	}

inline unsigned long _Atomic_ulong::exchange(
	unsigned long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::exchange(
	unsigned long _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_ulong::compare_exchange_weak(
	unsigned long& _Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ulong::compare_exchange_weak(
	unsigned long& _Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ulong::compare_exchange_weak(
	unsigned long& _Exp, unsigned long _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ulong::compare_exchange_weak(
	unsigned long& _Exp, unsigned long _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ulong::compare_exchange_strong(
	unsigned long& _Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ulong::compare_exchange_strong(
	unsigned long& _Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ulong::compare_exchange_strong(
	unsigned long& _Exp, unsigned long _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ulong::compare_exchange_strong(
	unsigned long& _Exp, unsigned long _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	inline bool atomic_is_lock_free(
		const volatile atomic<unsigned long> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_ulong *>(_Atom)));
	}

template<>
	inline bool atomic_is_lock_free(
		const atomic<unsigned long> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_ulong *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<unsigned long> *_Atom,
		unsigned long _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_ulong *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<unsigned long> *_Atom,
		unsigned long _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_ulong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<unsigned long> *_Atom,
		unsigned long _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_ulong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<unsigned long> *_Atom,
		unsigned long _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_ulong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<unsigned long> *_Atom,
		unsigned long _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_ulong *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<unsigned long> *_Atom,
		unsigned long _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_ulong *>(_Atom),
		_Value, _Order);
	}

template<>
	inline unsigned long atomic_load(const volatile atomic<unsigned long> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_ulong *>(_Atom)));
	}

template<>
	inline unsigned long atomic_load(const atomic<unsigned long> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_ulong *>(_Atom)));
	}

template<>
	inline unsigned long atomic_load_explicit(
		const volatile atomic<unsigned long> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_ulong *>(_Atom), _Order));
	}

template<>
	inline unsigned long atomic_load_explicit(
		const atomic<unsigned long> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_ulong *>(_Atom), _Order));
	}

template<>
	inline unsigned long atomic_exchange(
		volatile atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_exchange(atomic<unsigned long> *_Atom,
		unsigned long _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_exchange_explicit(
		volatile atomic<unsigned long> *_Atom,
			unsigned long _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_exchange_explicit(atomic<unsigned long> *_Atom,
		unsigned long _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_ulong *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<unsigned long> *_Atom, unsigned long *_Exp,
			unsigned long _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<unsigned long> *_Atom, unsigned long *_Exp,
			unsigned long _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_ulong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_ulong *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<unsigned long> *_Atom, unsigned long *_Exp,
			unsigned long _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<unsigned long> *_Atom, unsigned long *_Exp,
			unsigned long _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_ulong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<unsigned long> *_Atom, unsigned long *_Exp, unsigned long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_ulong *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 
		
inline unsigned long atomic_fetch_add_explicit(
	volatile _Atomic_ulong *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_add_explicit(
	_Atomic_ulong *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_add_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_add(volatile _Atomic_ulong *_Atom,
		unsigned long _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_add(_Atomic_ulong *_Atom,
	unsigned long _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_sub_explicit(
	volatile _Atomic_ulong *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_sub_explicit(
	_Atomic_ulong *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_sub_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_sub(volatile _Atomic_ulong *_Atom,
	unsigned long _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_sub(_Atomic_ulong *_Atom,
	unsigned long _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_and_explicit(
	volatile _Atomic_ulong *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_and_explicit(
	_Atomic_ulong *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_and_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_and(volatile _Atomic_ulong *_Atom,
	unsigned long _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_and(_Atomic_ulong *_Atom,
	unsigned long _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_or_explicit(
	volatile _Atomic_ulong *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_or_explicit(
	_Atomic_ulong *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_or_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_or(
	volatile _Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_or(
	_Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_xor_explicit(
	volatile _Atomic_ulong *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_xor_explicit(
	_Atomic_ulong *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long)_Atomic_fetch_xor_4 ((_Uint4_t*)&_Atom->_My_val, (_Uint4_t)_Value, _Order));
	}

inline unsigned long atomic_fetch_xor(
	volatile _Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long atomic_fetch_xor(
	_Atomic_ulong *_Atom, unsigned long _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline unsigned long _Atomic_ulong::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned long _Atomic_ulong::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned long _Atomic_ulong::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned long _Atomic_ulong::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned long _Atomic_ulong::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned long _Atomic_ulong::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned long _Atomic_ulong::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned long _Atomic_ulong::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned long _Atomic_ulong::operator+=(unsigned long _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned long _Atomic_ulong::operator+=(unsigned long _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned long _Atomic_ulong::operator-=(unsigned long _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned long _Atomic_ulong::operator-=(unsigned long _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned long _Atomic_ulong::operator&=(unsigned long _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned long _Atomic_ulong::operator&=(unsigned long _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned long _Atomic_ulong::operator|=(unsigned long _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned long _Atomic_ulong::operator|=(unsigned long _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned long _Atomic_ulong::operator^=(unsigned long _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned long _Atomic_ulong::operator^=(unsigned long _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned long _Atomic_ulong::fetch_add(
	unsigned long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_add(
	unsigned long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_sub(
	unsigned long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_sub(
	unsigned long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_and(
	unsigned long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_and(
	unsigned long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_or(
	unsigned long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_or(
	unsigned long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_xor(
	unsigned long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline unsigned long _Atomic_ulong::fetch_xor(
	unsigned long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline unsigned long atomic_fetch_add(
		volatile atomic<unsigned long> *_Atom,
			unsigned long _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_add(atomic<unsigned long> *_Atom,
		unsigned long _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_add_explicit(
		volatile atomic<unsigned long> *_Atom, unsigned long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_add_explicit(
	atomic<unsigned long> *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_sub(
		volatile atomic<unsigned long> *_Atom,
			unsigned long _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_sub(atomic<unsigned long> *_Atom,
		unsigned long _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_sub_explicit(
	volatile atomic<unsigned long> *_Atom, unsigned long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_sub_explicit(
		atomic<unsigned long> *_Atom, unsigned long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_and(
		volatile atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_and(
		atomic<unsigned long> *_Atom, unsigned long _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_and_explicit(
		volatile atomic<unsigned long> *_Atom, unsigned long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_and_explicit(
		atomic<unsigned long> *_Atom, unsigned long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_or(volatile atomic<unsigned long> *_Atom,
		unsigned long _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_or(atomic<unsigned long> *_Atom,
		unsigned long _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_or_explicit(
		volatile atomic<unsigned long> *_Atom, unsigned long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_or_explicit(
		atomic<unsigned long> *_Atom, unsigned long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_xor(volatile atomic<unsigned long> *_Atom,
		unsigned long _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_xor(atomic<unsigned long> *_Atom,
		unsigned long _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_ulong *>(_Atom), _Value));
	}

template<>
	inline unsigned long atomic_fetch_xor_explicit(
		volatile atomic<unsigned long> *_Atom, unsigned long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_ulong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long atomic_fetch_xor_explicit(
		atomic<unsigned long> *_Atom, unsigned long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_ulong *>(_Atom), _Value, _Order));
	}
 #line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
 #line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 






























































































































#line 777 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"










static_assert(8 == sizeof (long long),
	"_ISIZE and _ITYPE should match.");









  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_llong
	{	
	long long operator=(long long) volatile noexcept;
	long long operator=(long long) noexcept;

	bool is_lock_free() const volatile noexcept;
	bool is_lock_free() const noexcept;
	void store(long long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	void store(long long, memory_order = memory_order_seq_cst)
		noexcept;
	long long load(memory_order = memory_order_seq_cst)
		const volatile noexcept;
	long long load(memory_order = memory_order_seq_cst)
		const noexcept;
	operator long long() const volatile noexcept;
	operator long long() const noexcept;
	long long exchange(long long,
		memory_order = memory_order_seq_cst) volatile noexcept;
	long long exchange(long long,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(long long&, long long,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(long long&, long long,
		memory_order, memory_order) noexcept;
	bool compare_exchange_strong(long long&, long long,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(long long&, long long,
		memory_order, memory_order) noexcept;
	bool compare_exchange_weak(long long&, long long,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(long long&, long long,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(long long&, long long,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(long long&, long long,
		memory_order = memory_order_seq_cst) noexcept;

 
	long long operator++(int) volatile noexcept;
	long long operator++(int) noexcept;
	long long operator--(int) volatile noexcept;
	long long operator--(int) noexcept;
	long long operator++() volatile noexcept;
	long long operator++() noexcept;
	long long operator--() volatile noexcept;
	long long operator--() noexcept;
	long long operator+=(long long) volatile noexcept;
	long long operator+=(long long) noexcept;
	long long operator-=(long long) volatile noexcept;
	long long operator-=(long long) noexcept;
	long long operator&=(long long) volatile noexcept;
	long long operator&=(long long) noexcept;
	long long operator|=(long long) volatile noexcept;
	long long operator|=(long long) noexcept;
	long long operator^=(long long) volatile noexcept;
	long long operator^=(long long) noexcept;

	long long fetch_add(long long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	long long fetch_add(long long, memory_order = memory_order_seq_cst) noexcept;
	long long fetch_sub(long long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	long long fetch_sub(long long, memory_order = memory_order_seq_cst) noexcept;
	long long fetch_and(long long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	long long fetch_and(long long, memory_order = memory_order_seq_cst) noexcept;
	long long fetch_or(long long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	long long fetch_or(long long, memory_order = memory_order_seq_cst) noexcept;
	long long fetch_xor(long long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	long long fetch_xor(long long, memory_order = memory_order_seq_cst) noexcept;
 #line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 


















 



 
	alignas(sizeof(_Uint8_t)) _Uint8_t _My_val;
 

#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	} _Atomic_llong;

 
		
template<>
	struct atomic<long long>
		: _Atomic_llong
	{	

	atomic() noexcept = default;

	constexpr atomic(long long _Val) noexcept
		: _Atomic_llong{(_Uint8_t)_Val}
		{	
		}

	long long operator=(long long _Val) volatile noexcept
		{	
		return (_Atomic_llong::operator=(_Val));
		}

	long long operator=(long long _Val) noexcept
		{	
		return (_Atomic_llong::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 










































































































































































































































		
	
inline bool atomic_is_lock_free(const volatile _Atomic_llong *) noexcept
	{	
	return (_Atomic_is_lock_free_8());
	}

inline bool atomic_is_lock_free(const _Atomic_llong *) noexcept
	{	
	return (_Atomic_is_lock_free_8());
	}

 
inline bool atomic_is_lock_free(const volatile atomic<long long> *) noexcept
	{	
	return (_Atomic_is_lock_free_8());
	}

inline bool atomic_is_lock_free(const atomic<long long> *) noexcept
	{	
	return (_Atomic_is_lock_free_8());
	}
 #line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_llong *_Atom,
	long long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}

inline void atomic_init(_Atomic_llong *_Atom,
	long long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}

 
inline void atomic_init(volatile atomic<long long> *_Atom,
	long long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}

inline void atomic_init(atomic<long long> *_Atom,
	long long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}
 #line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

inline void atomic_store_explicit(
	volatile _Atomic_llong *_Atom, long long _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
	}

inline void atomic_store_explicit(
	_Atomic_llong *_Atom, long long _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_llong *_Atom,
	long long _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_llong *_Atom,
	long long _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline long long atomic_load_explicit(
	const volatile _Atomic_llong *_Atom, memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
	}

inline long long atomic_load_explicit(
	const _Atomic_llong *_Atom, memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
	}

inline long long atomic_load(
	const volatile _Atomic_llong *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline long long atomic_load(
	const _Atomic_llong *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline long long atomic_exchange_explicit(
	volatile _Atomic_llong *_Atom, long long _Value,
		memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_exchange_explicit(
	_Atomic_llong *_Atom, long long _Value,
		memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_exchange(volatile _Atomic_llong *_Atom,
	long long _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_exchange(_Atomic_llong *_Atom,
	long long _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_llong *_Atom, long long *_Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_llong *_Atom, long long *_Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_llong *_Atom, long long *_Exp,
		long long _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_llong *_Atom, long long *_Exp,
		long long _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_llong *_Atom, long long *_Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_llong *_Atom, long long *_Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_llong *_Atom, long long *_Exp, long long _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_llong *_Atom, long long *_Exp, long long _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline long long _Atomic_llong::operator=(long long _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline long long _Atomic_llong::operator=(long long _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_llong::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline bool _Atomic_llong::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_llong::store(long long _Value,
	memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_llong::store(long long _Value,
	memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline long long _Atomic_llong::load(
	memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline long long _Atomic_llong::load(
	memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline _Atomic_llong::operator long long() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_llong::operator long long() const noexcept
	{	
	return (atomic_load(this));
	}

inline long long _Atomic_llong::exchange(
	long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::exchange(
	long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_llong::compare_exchange_weak(
	long long& _Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_llong::compare_exchange_weak(
	long long& _Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_llong::compare_exchange_weak(
	long long& _Exp, long long _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_llong::compare_exchange_weak(
	long long& _Exp, long long _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_llong::compare_exchange_strong(
	long long& _Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_llong::compare_exchange_strong(
	long long& _Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_llong::compare_exchange_strong(
	long long& _Exp, long long _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_llong::compare_exchange_strong(
	long long& _Exp, long long _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	inline bool atomic_is_lock_free(
		const volatile atomic<long long> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_llong *>(_Atom)));
	}

template<>
	inline bool atomic_is_lock_free(
		const atomic<long long> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_llong *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<long long> *_Atom,
		long long _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_llong *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<long long> *_Atom,
		long long _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_llong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<long long> *_Atom,
		long long _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_llong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<long long> *_Atom,
		long long _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_llong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<long long> *_Atom,
		long long _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_llong *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<long long> *_Atom,
		long long _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_llong *>(_Atom),
		_Value, _Order);
	}

template<>
	inline long long atomic_load(const volatile atomic<long long> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_llong *>(_Atom)));
	}

template<>
	inline long long atomic_load(const atomic<long long> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_llong *>(_Atom)));
	}

template<>
	inline long long atomic_load_explicit(
		const volatile atomic<long long> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_llong *>(_Atom), _Order));
	}

template<>
	inline long long atomic_load_explicit(
		const atomic<long long> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_llong *>(_Atom), _Order));
	}

template<>
	inline long long atomic_exchange(
		volatile atomic<long long> *_Atom, long long _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_exchange(atomic<long long> *_Atom,
		long long _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_exchange_explicit(
		volatile atomic<long long> *_Atom,
			long long _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_exchange_explicit(atomic<long long> *_Atom,
		long long _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_llong *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<long long> *_Atom, long long *_Exp,
			long long _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_llong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<long long> *_Atom, long long *_Exp,
			long long _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_llong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<long long> *_Atom, long long *_Exp, long long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_llong *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<long long> *_Atom, long long *_Exp, long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_llong *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<long long> *_Atom, long long *_Exp,
			long long _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_llong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<long long> *_Atom, long long *_Exp,
			long long _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_llong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<long long> *_Atom, long long *_Exp, long long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_llong *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<long long> *_Atom, long long *_Exp, long long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_llong *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 
		
inline long long atomic_fetch_add_explicit(
	volatile _Atomic_llong *_Atom, long long _Value,
		memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_add_explicit(
	_Atomic_llong *_Atom, long long _Value,
		memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_add(volatile _Atomic_llong *_Atom,
		long long _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_add(_Atomic_llong *_Atom,
	long long _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_sub_explicit(
	volatile _Atomic_llong *_Atom, long long _Value,
		memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_sub_explicit(
	_Atomic_llong *_Atom, long long _Value,
		memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_sub(volatile _Atomic_llong *_Atom,
	long long _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_sub(_Atomic_llong *_Atom,
	long long _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_and_explicit(
	volatile _Atomic_llong *_Atom, long long _Value,
		memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_and_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_and_explicit(
	_Atomic_llong *_Atom, long long _Value,
		memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_and_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_and(volatile _Atomic_llong *_Atom,
	long long _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_and(_Atomic_llong *_Atom,
	long long _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_or_explicit(
	volatile _Atomic_llong *_Atom, long long _Value,
		memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_or_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_or_explicit(
	_Atomic_llong *_Atom, long long _Value,
		memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_or_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_or(
	volatile _Atomic_llong *_Atom, long long _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_or(
	_Atomic_llong *_Atom, long long _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_xor_explicit(
	volatile _Atomic_llong *_Atom, long long _Value,
		memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_xor_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_xor_explicit(
	_Atomic_llong *_Atom, long long _Value,
		memory_order _Order) noexcept
	{	
	return ((long long)_Atomic_fetch_xor_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline long long atomic_fetch_xor(
	volatile _Atomic_llong *_Atom, long long _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline long long atomic_fetch_xor(
	_Atomic_llong *_Atom, long long _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline long long _Atomic_llong::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline long long _Atomic_llong::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline long long _Atomic_llong::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline long long _Atomic_llong::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline long long _Atomic_llong::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline long long _Atomic_llong::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline long long _Atomic_llong::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline long long _Atomic_llong::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline long long _Atomic_llong::operator+=(long long _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline long long _Atomic_llong::operator+=(long long _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline long long _Atomic_llong::operator-=(long long _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline long long _Atomic_llong::operator-=(long long _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline long long _Atomic_llong::operator&=(long long _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline long long _Atomic_llong::operator&=(long long _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline long long _Atomic_llong::operator|=(long long _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline long long _Atomic_llong::operator|=(long long _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline long long _Atomic_llong::operator^=(long long _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline long long _Atomic_llong::operator^=(long long _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline long long _Atomic_llong::fetch_add(
	long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_add(
	long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_sub(
	long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_sub(
	long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_and(
	long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_and(
	long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_or(
	long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_or(
	long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_xor(
	long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline long long _Atomic_llong::fetch_xor(
	long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline long long atomic_fetch_add(
		volatile atomic<long long> *_Atom,
			long long _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_add(atomic<long long> *_Atom,
		long long _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_add_explicit(
		volatile atomic<long long> *_Atom, long long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_add_explicit(
	atomic<long long> *_Atom, long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_sub(
		volatile atomic<long long> *_Atom,
			long long _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_sub(atomic<long long> *_Atom,
		long long _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_sub_explicit(
	volatile atomic<long long> *_Atom, long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_sub_explicit(
		atomic<long long> *_Atom, long long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_and(
		volatile atomic<long long> *_Atom, long long _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_and(
		atomic<long long> *_Atom, long long _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_and_explicit(
		volatile atomic<long long> *_Atom, long long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_and_explicit(
		atomic<long long> *_Atom, long long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_or(volatile atomic<long long> *_Atom,
		long long _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_or(atomic<long long> *_Atom,
		long long _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_or_explicit(
		volatile atomic<long long> *_Atom, long long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_or_explicit(
		atomic<long long> *_Atom, long long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_xor(volatile atomic<long long> *_Atom,
		long long _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_xor(atomic<long long> *_Atom,
		long long _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_llong *>(_Atom), _Value));
	}

template<>
	inline long long atomic_fetch_xor_explicit(
		volatile atomic<long long> *_Atom, long long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_llong *>(_Atom), _Value, _Order));
	}

template<>
	inline long long atomic_fetch_xor_explicit(
		atomic<long long> *_Atom, long long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_llong *>(_Atom), _Value, _Order));
	}
 #line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
 #line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 






























































































































#line 783 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"





#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"










static_assert(8 == sizeof (unsigned long long),
	"_ISIZE and _ITYPE should match.");









  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_ullong
	{	
	unsigned long long operator=(unsigned long long) volatile noexcept;
	unsigned long long operator=(unsigned long long) noexcept;

	bool is_lock_free() const volatile noexcept;
	bool is_lock_free() const noexcept;
	void store(unsigned long long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	void store(unsigned long long, memory_order = memory_order_seq_cst)
		noexcept;
	unsigned long long load(memory_order = memory_order_seq_cst)
		const volatile noexcept;
	unsigned long long load(memory_order = memory_order_seq_cst)
		const noexcept;
	operator unsigned long long() const volatile noexcept;
	operator unsigned long long() const noexcept;
	unsigned long long exchange(unsigned long long,
		memory_order = memory_order_seq_cst) volatile noexcept;
	unsigned long long exchange(unsigned long long,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(unsigned long long&, unsigned long long,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(unsigned long long&, unsigned long long,
		memory_order, memory_order) noexcept;
	bool compare_exchange_strong(unsigned long long&, unsigned long long,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(unsigned long long&, unsigned long long,
		memory_order, memory_order) noexcept;
	bool compare_exchange_weak(unsigned long long&, unsigned long long,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(unsigned long long&, unsigned long long,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(unsigned long long&, unsigned long long,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(unsigned long long&, unsigned long long,
		memory_order = memory_order_seq_cst) noexcept;

 
	unsigned long long operator++(int) volatile noexcept;
	unsigned long long operator++(int) noexcept;
	unsigned long long operator--(int) volatile noexcept;
	unsigned long long operator--(int) noexcept;
	unsigned long long operator++() volatile noexcept;
	unsigned long long operator++() noexcept;
	unsigned long long operator--() volatile noexcept;
	unsigned long long operator--() noexcept;
	unsigned long long operator+=(unsigned long long) volatile noexcept;
	unsigned long long operator+=(unsigned long long) noexcept;
	unsigned long long operator-=(unsigned long long) volatile noexcept;
	unsigned long long operator-=(unsigned long long) noexcept;
	unsigned long long operator&=(unsigned long long) volatile noexcept;
	unsigned long long operator&=(unsigned long long) noexcept;
	unsigned long long operator|=(unsigned long long) volatile noexcept;
	unsigned long long operator|=(unsigned long long) noexcept;
	unsigned long long operator^=(unsigned long long) volatile noexcept;
	unsigned long long operator^=(unsigned long long) noexcept;

	unsigned long long fetch_add(unsigned long long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned long long fetch_add(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
	unsigned long long fetch_sub(unsigned long long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned long long fetch_sub(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
	unsigned long long fetch_and(unsigned long long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned long long fetch_and(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
	unsigned long long fetch_or(unsigned long long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned long long fetch_or(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
	unsigned long long fetch_xor(unsigned long long, memory_order = memory_order_seq_cst)
		volatile noexcept;
	unsigned long long fetch_xor(unsigned long long, memory_order = memory_order_seq_cst) noexcept;
 #line 144 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 


















 



 
	alignas(sizeof(_Uint8_t)) _Uint8_t _My_val;
 

#line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	} _Atomic_ullong;

 
		
template<>
	struct atomic<unsigned long long>
		: _Atomic_ullong
	{	

	atomic() noexcept = default;

	constexpr atomic(unsigned long long _Val) noexcept
		: _Atomic_ullong{(_Uint8_t)_Val}
		{	
		}

	unsigned long long operator=(unsigned long long _Val) volatile noexcept
		{	
		return (_Atomic_ullong::operator=(_Val));
		}

	unsigned long long operator=(unsigned long long _Val) noexcept
		{	
		return (_Atomic_ullong::operator=(_Val));
		}

	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;
	};
 #line 205 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 










































































































































































































































		
	
inline bool atomic_is_lock_free(const volatile _Atomic_ullong *) noexcept
	{	
	return (_Atomic_is_lock_free_8());
	}

inline bool atomic_is_lock_free(const _Atomic_ullong *) noexcept
	{	
	return (_Atomic_is_lock_free_8());
	}

 
inline bool atomic_is_lock_free(const volatile atomic<unsigned long long> *) noexcept
	{	
	return (_Atomic_is_lock_free_8());
	}

inline bool atomic_is_lock_free(const atomic<unsigned long long> *) noexcept
	{	
	return (_Atomic_is_lock_free_8());
	}
 #line 464 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	
inline void atomic_init(volatile _Atomic_ullong *_Atom,
	unsigned long long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}

inline void atomic_init(_Atomic_ullong *_Atom,
	unsigned long long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}

 
inline void atomic_init(volatile atomic<unsigned long long> *_Atom,
	unsigned long long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}

inline void atomic_init(atomic<unsigned long long> *_Atom,
	unsigned long long _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}
 #line 495 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

inline void atomic_store_explicit(
	volatile _Atomic_ullong *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
	}

inline void atomic_store_explicit(
	_Atomic_ullong *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_ullong *_Atom,
	unsigned long long _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_ullong *_Atom,
	unsigned long long _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline unsigned long long atomic_load_explicit(
	const volatile _Atomic_ullong *_Atom, memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
	}

inline unsigned long long atomic_load_explicit(
	const _Atomic_ullong *_Atom, memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
	}

inline unsigned long long atomic_load(
	const volatile _Atomic_ullong *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline unsigned long long atomic_load(
	const _Atomic_ullong *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline unsigned long long atomic_exchange_explicit(
	volatile _Atomic_ullong *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_exchange_explicit(
	_Atomic_ullong *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_exchange(volatile _Atomic_ullong *_Atom,
	unsigned long long _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_exchange(_Atomic_ullong *_Atom,
	unsigned long long _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_ullong *_Atom, unsigned long long *_Exp,
		unsigned long long _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_ullong *_Atom, unsigned long long *_Exp,
		unsigned long long _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_ullong *_Atom, unsigned long long *_Exp, unsigned long long _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline unsigned long long _Atomic_ullong::operator=(unsigned long long _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline unsigned long long _Atomic_ullong::operator=(unsigned long long _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_ullong::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline bool _Atomic_ullong::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_ullong::store(unsigned long long _Value,
	memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_ullong::store(unsigned long long _Value,
	memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline unsigned long long _Atomic_ullong::load(
	memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline unsigned long long _Atomic_ullong::load(
	memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline _Atomic_ullong::operator unsigned long long() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_ullong::operator unsigned long long() const noexcept
	{	
	return (atomic_load(this));
	}

inline unsigned long long _Atomic_ullong::exchange(
	unsigned long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::exchange(
	unsigned long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_ullong::compare_exchange_weak(
	unsigned long long& _Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ullong::compare_exchange_weak(
	unsigned long long& _Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ullong::compare_exchange_weak(
	unsigned long long& _Exp, unsigned long long _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ullong::compare_exchange_weak(
	unsigned long long& _Exp, unsigned long long _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ullong::compare_exchange_strong(
	unsigned long long& _Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ullong::compare_exchange_strong(
	unsigned long long& _Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_ullong::compare_exchange_strong(
	unsigned long long& _Exp, unsigned long long _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_ullong::compare_exchange_strong(
	unsigned long long& _Exp, unsigned long long _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 
template<>
	inline bool atomic_is_lock_free(
		const volatile atomic<unsigned long long> *_Atom) noexcept
	{
	return (atomic_is_lock_free(
		static_cast<const volatile _Atomic_ullong *>(_Atom)));
	}

template<>
	inline bool atomic_is_lock_free(
		const atomic<unsigned long long> *_Atom) noexcept
	{
	return (atomic_is_lock_free(static_cast<const _Atomic_ullong *>(_Atom)));
	}

template<>
	inline void atomic_init(volatile atomic<unsigned long long> *_Atom,
		unsigned long long _Value) noexcept
	{
	atomic_init(static_cast<volatile _Atomic_ullong *>(_Atom), _Value);
	}

template<>
	inline void atomic_init(atomic<unsigned long long> *_Atom,
		unsigned long long _Value) noexcept
	{
	atomic_init(static_cast<_Atomic_ullong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(volatile atomic<unsigned long long> *_Atom,
		unsigned long long _Value) noexcept
	{
	atomic_store(static_cast<volatile _Atomic_ullong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store(atomic<unsigned long long> *_Atom,
		unsigned long long _Value) noexcept
	{
	atomic_store(static_cast<_Atomic_ullong *>(_Atom), _Value);
	}

template<>
	inline void atomic_store_explicit(volatile atomic<unsigned long long> *_Atom,
		unsigned long long _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<volatile _Atomic_ullong *>(_Atom),
		_Value, _Order);
	}

template<>
	inline void atomic_store_explicit(atomic<unsigned long long> *_Atom,
		unsigned long long _Value, memory_order _Order) noexcept
	{
	atomic_store_explicit(static_cast<_Atomic_ullong *>(_Atom),
		_Value, _Order);
	}

template<>
	inline unsigned long long atomic_load(const volatile atomic<unsigned long long> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_ullong *>(_Atom)));
	}

template<>
	inline unsigned long long atomic_load(const atomic<unsigned long long> *_Atom) noexcept
	{
	return (atomic_load(static_cast<const volatile _Atomic_ullong *>(_Atom)));
	}

template<>
	inline unsigned long long atomic_load_explicit(
		const volatile atomic<unsigned long long> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const volatile _Atomic_ullong *>(_Atom), _Order));
	}

template<>
	inline unsigned long long atomic_load_explicit(
		const atomic<unsigned long long> *_Atom, memory_order _Order) noexcept
	{
	return (atomic_load_explicit(
		static_cast<const _Atomic_ullong *>(_Atom), _Order));
	}

template<>
	inline unsigned long long atomic_exchange(
		volatile atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	return (atomic_exchange(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_exchange(atomic<unsigned long long> *_Atom,
		unsigned long long _Value) noexcept
	{
	return (atomic_exchange(static_cast<_Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_exchange_explicit(
		volatile atomic<unsigned long long> *_Atom,
			unsigned long long _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_exchange_explicit(atomic<unsigned long long> *_Atom,
		unsigned long long _Value, memory_order _Order) noexcept
	{
	return (atomic_exchange_explicit(static_cast<_Atomic_ullong *>(_Atom),
		_Value, _Order));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<unsigned long long> *_Atom, unsigned long long *_Exp,
			unsigned long long _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak(
		atomic<unsigned long long> *_Atom, unsigned long long *_Exp,
			unsigned long long _Value) noexcept
	{
	return (atomic_compare_exchange_weak(
		static_cast<_Atomic_ullong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_weak_explicit(
		static_cast<_Atomic_ullong *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<unsigned long long> *_Atom, unsigned long long *_Exp,
			unsigned long long _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong(
		atomic<unsigned long long> *_Atom, unsigned long long *_Exp,
			unsigned long long _Value) noexcept
	{
	return (atomic_compare_exchange_strong(
		static_cast<_Atomic_ullong *>(_Atom), _Exp, _Value));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Exp,
			_Value, _Order1, _Order2));
	}

template<>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<unsigned long long> *_Atom, unsigned long long *_Exp, unsigned long long _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (atomic_compare_exchange_strong_explicit(
		static_cast<_Atomic_ullong *>(_Atom), _Exp, _Value, _Order1, _Order2));
	}
 #line 962 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 
		
inline unsigned long long atomic_fetch_add_explicit(
	volatile _Atomic_ullong *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_add_explicit(
	_Atomic_ullong *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_add(volatile _Atomic_ullong *_Atom,
		unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_add(_Atomic_ullong *_Atom,
	unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_sub_explicit(
	volatile _Atomic_ullong *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_sub_explicit(
	_Atomic_ullong *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_sub(volatile _Atomic_ullong *_Atom,
	unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_sub(_Atomic_ullong *_Atom,
	unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_and_explicit(
	volatile _Atomic_ullong *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_and_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_and_explicit(
	_Atomic_ullong *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_and_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_and(volatile _Atomic_ullong *_Atom,
	unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_and(_Atomic_ullong *_Atom,
	unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_and_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_or_explicit(
	volatile _Atomic_ullong *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_or_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_or_explicit(
	_Atomic_ullong *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_or_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_or(
	volatile _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_or(
	_Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_or_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_xor_explicit(
	volatile _Atomic_ullong *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_xor_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_xor_explicit(
	_Atomic_ullong *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{	
	return ((unsigned long long)_Atomic_fetch_xor_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline unsigned long long atomic_fetch_xor(
	volatile _Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline unsigned long long atomic_fetch_xor(
	_Atomic_ullong *_Atom, unsigned long long _Value) noexcept
	{	
	return (atomic_fetch_xor_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline unsigned long long _Atomic_ullong::operator++(int) volatile noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned long long _Atomic_ullong::operator++(int) noexcept
	{	
	return (atomic_fetch_add(this, 1));
	}

inline unsigned long long _Atomic_ullong::operator--(int) volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned long long _Atomic_ullong::operator--(int) noexcept
	{	
	return (atomic_fetch_sub(this, 1));
	}

inline unsigned long long _Atomic_ullong::operator++() volatile noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned long long _Atomic_ullong::operator++() noexcept
	{	
	return (atomic_fetch_add(this, 1) + 1);
	}

inline unsigned long long _Atomic_ullong::operator--() volatile noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned long long _Atomic_ullong::operator--() noexcept
	{	
	return (atomic_fetch_sub(this, 1) - 1);
	}

inline unsigned long long _Atomic_ullong::operator+=(unsigned long long _Right) volatile noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned long long _Atomic_ullong::operator+=(unsigned long long _Right) noexcept
	{	
	return (atomic_fetch_add(this, _Right) + _Right);
	}

inline unsigned long long _Atomic_ullong::operator-=(unsigned long long _Right) volatile noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned long long _Atomic_ullong::operator-=(unsigned long long _Right) noexcept
	{	
	return (atomic_fetch_sub(this, _Right) - _Right);
	}

inline unsigned long long _Atomic_ullong::operator&=(unsigned long long _Right) volatile noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned long long _Atomic_ullong::operator&=(unsigned long long _Right) noexcept
	{	
	return (atomic_fetch_and(this, _Right) & _Right);
	}

inline unsigned long long _Atomic_ullong::operator|=(unsigned long long _Right) volatile noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned long long _Atomic_ullong::operator|=(unsigned long long _Right) noexcept
	{	
	return (atomic_fetch_or(this, _Right) | _Right);
	}

inline unsigned long long _Atomic_ullong::operator^=(unsigned long long _Right) volatile noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned long long _Atomic_ullong::operator^=(unsigned long long _Right) noexcept
	{	
	return (atomic_fetch_xor(this, _Right) ^ _Right);
	}

inline unsigned long long _Atomic_ullong::fetch_add(
	unsigned long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_add(
	unsigned long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_sub(
	unsigned long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_sub(
	unsigned long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_and(
	unsigned long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_and(
	unsigned long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_and_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_or(
	unsigned long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_or(
	unsigned long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_or_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_xor(
	unsigned long long _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

inline unsigned long long _Atomic_ullong::fetch_xor(
	unsigned long long _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_xor_explicit(this, _Value, _Order));
	}

	
 
template<>
	inline unsigned long long atomic_fetch_add(
		volatile atomic<unsigned long long> *_Atom,
			unsigned long long _Value) noexcept
	{
	return (atomic_fetch_add(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_add(atomic<unsigned long long> *_Atom,
		unsigned long long _Value) noexcept
	{
	return (atomic_fetch_add(static_cast<_Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_add_explicit(
		volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_add_explicit(
	atomic<unsigned long long> *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_add_explicit(
		static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_sub(
		volatile atomic<unsigned long long> *_Atom,
			unsigned long long _Value) noexcept
	{
	return (atomic_fetch_sub(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_sub(atomic<unsigned long long> *_Atom,
		unsigned long long _Value) noexcept
	{
	return (atomic_fetch_sub(static_cast<_Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_sub_explicit(
	volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
		memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_sub_explicit(
		atomic<unsigned long long> *_Atom, unsigned long long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_sub_explicit(
		static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_and(
		volatile atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	return (atomic_fetch_and(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_and(
		atomic<unsigned long long> *_Atom, unsigned long long _Value) noexcept
	{
	return (atomic_fetch_and(static_cast<_Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_and_explicit(
		volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_and_explicit(
		atomic<unsigned long long> *_Atom, unsigned long long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_and_explicit(
		static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_or(volatile atomic<unsigned long long> *_Atom,
		unsigned long long _Value) noexcept
	{
	return (atomic_fetch_or(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_or(atomic<unsigned long long> *_Atom,
		unsigned long long _Value) noexcept
	{
	return (atomic_fetch_or(static_cast<_Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_or_explicit(
		volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_or_explicit(
		atomic<unsigned long long> *_Atom, unsigned long long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_or_explicit(
		static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_xor(volatile atomic<unsigned long long> *_Atom,
		unsigned long long _Value) noexcept
	{
	return (atomic_fetch_xor(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_xor(atomic<unsigned long long> *_Atom,
		unsigned long long _Value) noexcept
	{
	return (atomic_fetch_xor(static_cast<_Atomic_ullong *>(_Atom), _Value));
	}

template<>
	inline unsigned long long atomic_fetch_xor_explicit(
		volatile atomic<unsigned long long> *_Atom, unsigned long long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<volatile _Atomic_ullong *>(_Atom), _Value, _Order));
	}

template<>
	inline unsigned long long atomic_fetch_xor_explicit(
		atomic<unsigned long long> *_Atom, unsigned long long _Value,
			memory_order _Order) noexcept
	{
	return (atomic_fetch_xor_explicit(
		static_cast<_Atomic_ullong *>(_Atom), _Value, _Order));
	}
 #line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
 #line 1416 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

 






























































































































#line 789 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"






#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"










static_assert(8 == sizeof (void *),
	"_ISIZE and _ITYPE should match.");









  




  



  



  






  






  



  



  



  



  



		
typedef struct _Atomic_address
	{	
	void * operator=(void *) volatile noexcept;
	void * operator=(void *) noexcept;

	bool is_lock_free() const volatile noexcept;
	bool is_lock_free() const noexcept;
	void store(void *, memory_order = memory_order_seq_cst)
		volatile noexcept;
	void store(void *, memory_order = memory_order_seq_cst)
		noexcept;
	void * load(memory_order = memory_order_seq_cst)
		const volatile noexcept;
	void * load(memory_order = memory_order_seq_cst)
		const noexcept;
	operator void *() const volatile noexcept;
	operator void *() const noexcept;
	void * exchange(void *,
		memory_order = memory_order_seq_cst) volatile noexcept;
	void * exchange(void *,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_weak(void *&, void *,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_weak(void *&, void *,
		memory_order, memory_order) noexcept;
	bool compare_exchange_strong(void *&, void *,
		memory_order, memory_order) volatile noexcept;
	bool compare_exchange_strong(void *&, void *,
		memory_order, memory_order) noexcept;
	bool compare_exchange_weak(void *&, void *,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_weak(void *&, void *,
		memory_order = memory_order_seq_cst) noexcept;
	bool compare_exchange_strong(void *&, void *,
		memory_order = memory_order_seq_cst) volatile noexcept;
	bool compare_exchange_strong(void *&, void *,
		memory_order = memory_order_seq_cst) noexcept;

 




































 
	void * fetch_add(ptrdiff_t,
		memory_order = memory_order_seq_cst) volatile noexcept;
	void * fetch_add(ptrdiff_t,
		memory_order = memory_order_seq_cst) noexcept;
	void * fetch_sub(ptrdiff_t,
		memory_order = memory_order_seq_cst) volatile noexcept;
	void * fetch_sub(ptrdiff_t,
		memory_order = memory_order_seq_cst) noexcept;
	void * operator+=(ptrdiff_t) volatile noexcept;
	void * operator+=(ptrdiff_t) noexcept;
	void * operator-=(ptrdiff_t) volatile noexcept;
	void * operator-=(ptrdiff_t) noexcept;
 #line 159 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"





 



 

#line 171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	_Uint8_t _My_val;
 #line 173 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

	} _Atomic_address;

 





























 
		
template<class _Ty>
	struct atomic<_Ty *>
		: _Atomic_address
	{	
	atomic(const atomic&) = delete;
	atomic& operator=(const atomic&) = delete;
	atomic& operator=(const atomic&) volatile = delete;

	atomic() noexcept = default;

	constexpr atomic(_Ty *_Right) noexcept
		: _Atomic_address{(_Uint8_t)_Right}
		{	
		}

	_Ty *operator=(_Ty *_Right) volatile noexcept
		{	
		return (reinterpret_cast<_Ty *>(
			_Atomic_address::operator=((void *)_Right)));
		}

	_Ty *operator=(_Ty *_Right) noexcept
		{	
		return (reinterpret_cast<_Ty *>(
			_Atomic_address::operator=((void *)_Right)));
		}

	void store(_Ty *_Value,
		memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		_Atomic_address::store((void *)_Value, _Order);
		}

	void store(_Ty *_Value,
		memory_order _Order = memory_order_seq_cst) noexcept
		{	
		_Atomic_address::store((void *)_Value, _Order);
		}

	_Ty *load(memory_order _Order = memory_order_seq_cst)
		const volatile noexcept
		{	
		return (reinterpret_cast<_Ty *>(_Atomic_address::load(_Order)));
		}

	_Ty *load(memory_order _Order = memory_order_seq_cst)
		const noexcept
		{	
		return (reinterpret_cast<_Ty *>(_Atomic_address::load(_Order)));
		}

	operator _Ty *() const volatile noexcept
		{	
		return (reinterpret_cast<_Ty *>(_Atomic_address::operator void *()));
		}

	operator _Ty *() const noexcept
		{	
		return (reinterpret_cast<_Ty *>(_Atomic_address::operator void *()));
		}

	_Ty *exchange(_Ty *_Value,
		memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		return (reinterpret_cast<_Ty *>(_Atomic_address::exchange(
			(void *)_Value, _Order)));
		}

	_Ty *exchange(_Ty *_Value,
		memory_order _Order = memory_order_seq_cst) noexcept
		{	
		return (reinterpret_cast<_Ty *>(_Atomic_address::exchange(
			(void *)_Value, _Order)));
		}

	bool compare_exchange_weak(
		_Ty *& _Exp, _Ty *_Value,
			memory_order _Order1,
			memory_order _Order2) volatile noexcept
		{	
		return (_Atomic_address::compare_exchange_weak(
			(void *&)_Exp, (void *)_Value, _Order1, _Order2));
		}

	bool compare_exchange_weak(
		_Ty *& _Exp, _Ty *_Value,
		memory_order _Order1,
		memory_order _Order2) noexcept
		{	
		return (_Atomic_address::compare_exchange_weak(
			(void *&)_Exp, (void *)_Value, _Order1, _Order2));
		}

	bool compare_exchange_weak(
		_Ty *& _Exp, _Ty *_Value,
		memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		return (_Atomic_address::compare_exchange_weak(
			(void *&)_Exp, (void *)_Value, _Order));
		}

	bool compare_exchange_weak(
		_Ty *& _Exp, _Ty *_Value,
		memory_order _Order = memory_order_seq_cst) noexcept
		{	
		return (_Atomic_address::compare_exchange_weak(
			(void *&)_Exp, (void *)_Value, _Order));
		}

	bool compare_exchange_strong(
		_Ty *& _Exp, _Ty *_Value,
		memory_order _Order1, memory_order _Order2) volatile noexcept
		{	
		return (_Atomic_address::compare_exchange_strong(
			(void *&)_Exp, (void *)_Value, _Order1, _Order2));
		}

	bool compare_exchange_strong(
		_Ty *& _Exp, _Ty *_Value,
		memory_order _Order1, memory_order _Order2) noexcept
		{	
		return (_Atomic_address::compare_exchange_strong(
			(void *&)_Exp, (void *)_Value, _Order1, _Order2));
		}

	bool compare_exchange_strong(
		_Ty *& _Exp, _Ty *_Value,
		memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		return (_Atomic_address::compare_exchange_strong(
			(void *&)_Exp, (void *)_Value, _Order));
		}

	bool compare_exchange_strong(
		_Ty *& _Exp, _Ty *_Value,
		memory_order _Order = memory_order_seq_cst) noexcept
		{	
		return (_Atomic_address::compare_exchange_strong(
			(void *&)_Exp, (void *)_Value, _Order));
		}

	typedef typename _If<is_object<_Ty>::value, _Ty, char>::type _Obj;

	_Ty *fetch_add(ptrdiff_t _Value,
		memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		return (reinterpret_cast<_Ty *>(
			_Atomic_address::fetch_add(_Value * sizeof (_Obj), _Order)));
		}

	_Ty *fetch_add(ptrdiff_t _Value,
		memory_order _Order = memory_order_seq_cst) noexcept
		{	
		return (reinterpret_cast<_Ty *>(
			_Atomic_address::fetch_add(_Value * sizeof (_Obj), _Order)));
		}

	_Ty *fetch_sub(ptrdiff_t _Value,
		memory_order _Order = memory_order_seq_cst) volatile noexcept
		{	
		return (reinterpret_cast<_Ty *>(
			_Atomic_address::fetch_sub(_Value * sizeof (_Obj), _Order)));
		}

	_Ty *fetch_sub(ptrdiff_t _Value,
		memory_order _Order = memory_order_seq_cst) noexcept
		{	
		return (reinterpret_cast<_Ty *>(
			_Atomic_address::fetch_sub(_Value * sizeof (_Obj), _Order)));
		}

	_Ty *operator++(int) volatile noexcept
		{	
		return (fetch_add(1));
		}

	_Ty *operator++(int) noexcept
		{	
		return (fetch_add(1));
		}

	_Ty *operator--(int) volatile noexcept
		{	
		return (fetch_sub(1));
		}

	_Ty *operator--(int) noexcept
		{	
		return (fetch_sub(1));
		}

	_Ty *operator+=(ptrdiff_t _Right) volatile noexcept
		{	
		return ((_Ty *)((_Obj *)fetch_add(_Right) + _Right));
		}

	_Ty *operator+=(ptrdiff_t _Right) noexcept
		{	
		return ((_Ty *)((_Obj *)fetch_add(_Right) + _Right));
		}

	_Ty *operator-=(ptrdiff_t _Right) volatile noexcept
		{	
		return ((_Ty *)((_Obj *)fetch_sub(_Right) - _Right));
		}

	_Ty *operator-=(ptrdiff_t _Right) noexcept
		{	
		return ((_Ty *)((_Obj *)fetch_sub(_Right) - _Right));
		}

	_Ty *operator++() volatile noexcept
		{	
		return (*this += 1);
		}

	_Ty *operator++() noexcept
		{	
		return (*this += 1);
		}

	_Ty *operator--() volatile noexcept
		{	
		return (*this -= 1);
		}

	_Ty *operator--() noexcept
		{	
		return (*this -= 1);
		}
	};
 #line 440 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"

		
	
inline bool atomic_is_lock_free(const volatile _Atomic_address *) noexcept
	{	
	return (_Atomic_is_lock_free_8());
	}

inline bool atomic_is_lock_free(const _Atomic_address *) noexcept
	{	
	return (_Atomic_is_lock_free_8());
	}

 











	
inline void atomic_init(volatile _Atomic_address *_Atom,
	void * _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}

inline void atomic_init(_Atomic_address *_Atom,
	void * _Value) noexcept
	{	
	_Atom->_My_val = (_Uint8_t)_Value;

	}

 















inline void atomic_store_explicit(
	volatile _Atomic_address *_Atom, void * _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
	}

inline void atomic_store_explicit(
	_Atomic_address *_Atom, void * _Value,
		memory_order _Order) noexcept
	{	
	_Atomic_store_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order);
	}

inline void atomic_store(volatile _Atomic_address *_Atom,
	void * _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void atomic_store(_Atomic_address *_Atom,
	void * _Value) noexcept
	{	
	atomic_store_explicit(_Atom, _Value, memory_order_seq_cst);
	}

inline void * atomic_load_explicit(
	const volatile _Atomic_address *_Atom, memory_order _Order) noexcept
	{	
	return ((void *)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
	}

inline void * atomic_load_explicit(
	const _Atomic_address *_Atom, memory_order _Order) noexcept
	{	
	return ((void *)_Atomic_load_8 ((_Uint8_t*)&_Atom->_My_val, _Order));
	}

inline void * atomic_load(
	const volatile _Atomic_address *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline void * atomic_load(
	const _Atomic_address *_Atom) noexcept
	{	
	return (atomic_load_explicit(_Atom, memory_order_seq_cst));
	}

inline void * atomic_exchange_explicit(
	volatile _Atomic_address *_Atom, void * _Value,
		memory_order _Order) noexcept
	{	
	return ((void *)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline void * atomic_exchange_explicit(
	_Atomic_address *_Atom, void * _Value,
		memory_order _Order) noexcept
	{	
	return ((void *)_Atomic_exchange_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline void * atomic_exchange(volatile _Atomic_address *_Atom,
	void * _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline void * atomic_exchange(_Atomic_address *_Atom,
	void * _Value) noexcept
	{	
	return (atomic_exchange_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak_explicit(
	volatile _Atomic_address *_Atom, void * *_Exp, void * _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 578 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak_explicit(
	_Atomic_address *_Atom, void * *_Exp, void * _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_weak_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 586 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_weak(
	volatile _Atomic_address *_Atom, void * *_Exp,
		void * _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_weak(
	_Atomic_address *_Atom, void * *_Exp,
		void * _Value) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong_explicit(
	volatile _Atomic_address *_Atom, void * *_Exp, void * _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 610 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong_explicit(
	_Atomic_address *_Atom, void * *_Exp, void * _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (_Atomic_compare_exchange_strong_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t*)_Exp, (_Uint8_t)_Value, _Order1, _Order2));
#line 618 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"
	}

inline bool atomic_compare_exchange_strong(
	volatile _Atomic_address *_Atom, void * *_Exp, void * _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

inline bool atomic_compare_exchange_strong(
	_Atomic_address *_Atom, void * *_Exp, void * _Value) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		_Atom, _Exp, _Value, memory_order_seq_cst, memory_order_seq_cst));
	}

		
inline void * _Atomic_address::operator=(void * _Value) volatile noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline void * _Atomic_address::operator=(void * _Value) noexcept
	{	
	atomic_store(this, _Value);
	return (_Value);
	}

inline bool _Atomic_address::is_lock_free() const volatile noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline bool _Atomic_address::is_lock_free() const noexcept
	{	
	return (atomic_is_lock_free(this));
	}

inline void _Atomic_address::store(void * _Value,
	memory_order _Order) volatile noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void _Atomic_address::store(void * _Value,
	memory_order _Order) noexcept
	{	
	atomic_store_explicit(this, _Value, _Order);
	}

inline void * _Atomic_address::load(
	memory_order _Order) const volatile noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline void * _Atomic_address::load(
	memory_order _Order) const noexcept
	{	
	return (atomic_load_explicit(this, _Order));
	}

inline _Atomic_address::operator void *() const volatile noexcept
	{	
	return (atomic_load(this));
	}

inline _Atomic_address::operator void *() const noexcept
	{	
	return (atomic_load(this));
	}

inline void * _Atomic_address::exchange(
	void * _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline void * _Atomic_address::exchange(
	void * _Value, memory_order _Order) noexcept
	{	
	return (atomic_exchange_explicit(this, _Value, _Order));
	}

inline bool _Atomic_address::compare_exchange_weak(
	void *& _Exp, void * _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_address::compare_exchange_weak(
	void *& _Exp, void * _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_address::compare_exchange_weak(
	void *& _Exp, void * _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_address::compare_exchange_weak(
	void *& _Exp, void * _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_weak_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_address::compare_exchange_strong(
	void *& _Exp, void * _Value,
	memory_order _Order1, memory_order _Order2) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_address::compare_exchange_strong(
	void *& _Exp, void * _Value,
	memory_order _Order1, memory_order _Order2) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order1, _Order2));
	}

inline bool _Atomic_address::compare_exchange_strong(
	void *& _Exp, void * _Value,
	memory_order _Order) volatile noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

inline bool _Atomic_address::compare_exchange_strong(
	void *& _Exp, void * _Value,
	memory_order _Order) noexcept
	{	
	return (atomic_compare_exchange_strong_explicit(
		this, &_Exp, _Value, _Order, _Get_memory_order(_Order)));
	}

		
 


































































































































































































 





































































































































































































































































































































































































































































 
		
inline void * atomic_fetch_add_explicit(
	volatile _Atomic_address *_Atom, ptrdiff_t _Value,
		memory_order _Order) noexcept
	{	
	return ((void *)(void *)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline void * atomic_fetch_add_explicit(
	_Atomic_address *_Atom, ptrdiff_t _Value,
		memory_order _Order) noexcept
	{	
	return ((void *)(void *)_Atomic_fetch_add_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline void * atomic_fetch_add(
	volatile _Atomic_address *_Atom, ptrdiff_t _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline void * atomic_fetch_add(
	_Atomic_address *_Atom, ptrdiff_t _Value) noexcept
	{	
	return (atomic_fetch_add_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline void * atomic_fetch_sub_explicit(
	volatile _Atomic_address *_Atom, ptrdiff_t _Value,
		memory_order _Order) noexcept
	{	
	return ((void *)(void *)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline void * atomic_fetch_sub_explicit(
	_Atomic_address *_Atom, ptrdiff_t _Value,
		memory_order _Order) noexcept
	{	
	return ((void *)(void *)_Atomic_fetch_sub_8 ((_Uint8_t*)&_Atom->_My_val, (_Uint8_t)_Value, _Order));
	}

inline void * atomic_fetch_sub(
	volatile _Atomic_address *_Atom, ptrdiff_t _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

inline void * atomic_fetch_sub(
	_Atomic_address *_Atom, ptrdiff_t _Value) noexcept
	{	
	return (atomic_fetch_sub_explicit(_Atom, _Value, memory_order_seq_cst));
	}

		
inline void * _Atomic_address::fetch_add(
	ptrdiff_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline void * _Atomic_address::fetch_add(
	ptrdiff_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_add_explicit(this, _Value, _Order));
	}

inline void * _Atomic_address::fetch_sub(
	ptrdiff_t _Value, memory_order _Order) volatile noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline void * _Atomic_address::fetch_sub(
	ptrdiff_t _Value, memory_order _Order) noexcept
	{	
	return (atomic_fetch_sub_explicit(this, _Value, _Order));
	}

inline void * _Atomic_address::operator+=(ptrdiff_t _Right) volatile noexcept
	{	
	return ((char*)fetch_add(_Right) + _Right);
	}

inline void * _Atomic_address::operator+=(ptrdiff_t _Right) noexcept
	{	
	return ((char*)fetch_add(_Right) + _Right);
	}

inline void * _Atomic_address::operator-=(ptrdiff_t _Right) volatile noexcept
	{	
	return ((char*)fetch_sub(_Right) - _Right);
	}

inline void * _Atomic_address::operator-=(ptrdiff_t _Right) noexcept
	{	
	return ((char*)fetch_sub(_Right) - _Right);
	}
 #line 1516 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xxatomic"




























#line 796 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"

		
template <class _Ty>
	inline bool atomic_is_lock_free(
		const volatile atomic<_Ty> *_Atom) noexcept
	{
	return (_Atom->is_lock_free());
	}

template <class _Ty>
	inline bool atomic_is_lock_free(
		const atomic<_Ty> *_Atom) noexcept
	{
	return (_Atom->is_lock_free());
	}

template <class _Ty>
	inline void atomic_init(
		volatile atomic<_Ty> *_Atom, _Ty _Value) noexcept
	{
	*_Atom = _Value;
	}

template <class _Ty>
	inline void atomic_init(
		atomic<_Ty> *_Atom, _Ty _Value) noexcept
	{
	*_Atom = _Value;
	}

template <class _Ty>
	inline void atomic_store(volatile atomic<_Ty> *_Atom,
		_Ty _Value) noexcept
	{
	_Atom->store(_Value);
	}

template <class _Ty>
	inline void atomic_store(atomic<_Ty> *_Atom,
		_Ty _Value) noexcept
	{
	_Atom->store(_Value);
	}

template <class _Ty>
	inline void atomic_store_explicit(
		volatile atomic<_Ty> *_Atom, _Ty _Value,
			memory_order _Order) noexcept
	{
	_Atom->store(_Value, _Order);
	}

template <class _Ty>
	inline void atomic_store_explicit(
		atomic<_Ty> *_Atom, _Ty _Value,
			memory_order _Order) noexcept
	{
	_Atom->store(_Value, _Order);
	}

template <class _Ty>
	inline _Ty atomic_load(const volatile atomic<_Ty> *_Atom) noexcept
	{
	return (_Atom->load());
	}

template <class _Ty>
	inline _Ty atomic_load(const atomic<_Ty> *_Atom) noexcept
	{
	return (_Atom->load());
	}

template <class _Ty>
	inline _Ty atomic_load_explicit(
		const volatile atomic<_Ty> *_Atom,
			memory_order _Order) noexcept
	{
	return (_Atom->load(_Order));
	}

template <class _Ty>
	inline _Ty atomic_load_explicit(
		const atomic<_Ty> *_Atom,
			memory_order _Order) noexcept
	{
	return (_Atom->load(_Order));
	}

template <class _Ty>
	inline _Ty atomic_exchange(volatile atomic<_Ty> *_Atom,
		_Ty _Value) noexcept
	{
	return (_Atom->exchange(_Value));
	}

template <class _Ty>
	inline _Ty atomic_exchange(atomic<_Ty> *_Atom,
		_Ty _Value) noexcept
	{
	return (_Atom->exchange(_Value));
	}

template <class _Ty>
	inline _Ty atomic_exchange_explicit(volatile atomic<_Ty> *_Atom,
		_Ty _Value, memory_order _Order) noexcept
	{
	return (_Atom->exchange(_Value, _Order));
	}

template <class _Ty>
	inline _Ty atomic_exchange_explicit(atomic<_Ty> *_Atom, _Ty _Value,
		memory_order _Order) noexcept
	{
	return (_Atom->exchange(_Value, _Order));
	}

template <class _Ty>
	inline bool atomic_compare_exchange_weak(
		volatile atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value) noexcept
	{
	return (_Atom->compare_exchange_weak(*_Exp, _Value));
	}

template <class _Ty>
	inline bool atomic_compare_exchange_weak(
		atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value) noexcept
	{
	return (_Atom->compare_exchange_weak(*_Exp, _Value));
	}

template <class _Ty>
	inline bool atomic_compare_exchange_weak_explicit(
		volatile atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (_Atom->compare_exchange_weak(*_Exp, _Value, _Order1, _Order2));
	}

template <class _Ty>
	inline bool atomic_compare_exchange_weak_explicit(
		atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (_Atom->compare_exchange_weak(*_Exp, _Value, _Order1, _Order2));
	}

template <class _Ty>
	inline bool atomic_compare_exchange_strong(
		volatile atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value) noexcept
	{
	return (_Atom->compare_exchange_strong(*_Exp, _Value));
	}

template <class _Ty>
	inline bool atomic_compare_exchange_strong(
		atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value) noexcept
	{
	return (_Atom->compare_exchange_strong(*_Exp, _Value));
	}

template <class _Ty>
	inline bool atomic_compare_exchange_strong_explicit(
		volatile atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (_Atom->compare_exchange_strong(*_Exp, _Value, _Order1, _Order2));
	}

template <class _Ty>
	inline bool atomic_compare_exchange_strong_explicit(
		atomic<_Ty> *_Atom, _Ty *_Exp, _Ty _Value,
		memory_order _Order1, memory_order _Order2) noexcept
	{
	return (_Atom->compare_exchange_strong(*_Exp, _Value, _Order1, _Order2));
	}

		
template <class _Ty>
	inline _Ty *atomic_fetch_add(volatile atomic<_Ty*> *_Atom,
		ptrdiff_t _Value) noexcept
	{
	return (_Atom->fetch_add(_Value));
	}

template <class _Ty>
	inline _Ty *atomic_fetch_add(atomic<_Ty*> *_Atom,
		ptrdiff_t _Value) noexcept
	{
	return (_Atom->fetch_add(_Value));
	}

template <class _Ty>
	inline _Ty *atomic_fetch_add_explicit(
		volatile atomic<_Ty*> *_Atom, ptrdiff_t _Value,
			memory_order _Order) noexcept
	{
	return (_Atom->fetch_add(_Value, _Order));
	}

template <class _Ty>
	inline _Ty *atomic_fetch_add_explicit(
		atomic<_Ty*> *_Atom, ptrdiff_t _Value,
			memory_order _Order) noexcept
	{
	return (_Atom->fetch_add(_Value, _Order));
	}

template <class _Ty>
	inline _Ty *atomic_fetch_sub(volatile atomic<_Ty*> *_Atom,
		ptrdiff_t _Value) noexcept
	{
	return (_Atom->fetch_sub(_Value));
	}

template <class _Ty>
	inline _Ty *atomic_fetch_sub(atomic<_Ty*> *_Atom,
		ptrdiff_t _Value) noexcept
	{
	return (_Atom->fetch_sub(_Value));
	}

template <class _Ty>
	inline _Ty *atomic_fetch_sub_explicit(
		volatile atomic<_Ty*> *_Atom, ptrdiff_t _Value,
			memory_order _Order) noexcept
	{
	return (_Atom->fetch_sub(_Value, _Order));
	}

template <class _Ty>
	inline _Ty *atomic_fetch_sub_explicit(
		atomic<_Ty*> *_Atom, ptrdiff_t _Value,
			memory_order _Order) noexcept
	{
	return (_Atom->fetch_sub(_Value, _Order));
	}

		
extern "C" inline void atomic_thread_fence(memory_order _Order) noexcept
	{	
	return (_Atomic_thread_fence(_Order));
	}

extern "C" inline void atomic_signal_fence(memory_order _Order) noexcept
	{	
	return (_Atomic_signal_fence(_Order));
	}

		
typedef atomic<bool> atomic_bool;

typedef atomic<char> atomic_char;
typedef atomic<signed char> atomic_schar;
typedef atomic<unsigned char> atomic_uchar;
typedef atomic<short> atomic_short;
typedef atomic<unsigned short> atomic_ushort;
typedef atomic<int> atomic_int;
typedef atomic<unsigned int> atomic_uint;
typedef atomic<long> atomic_long;
typedef atomic<unsigned long> atomic_ulong;
typedef atomic<long long> atomic_llong;
typedef atomic<unsigned long long> atomic_ullong;

typedef atomic<char16_t> atomic_char16_t;
typedef atomic<char32_t> atomic_char32_t;

typedef atomic<wchar_t> atomic_wchar_t;

typedef atomic<int8_t> atomic_int8_t;
typedef atomic<uint8_t> atomic_uint8_t;
typedef atomic<int16_t> atomic_int16_t;
typedef atomic<uint16_t> atomic_uint16_t;
typedef atomic<int32_t> atomic_int32_t;
typedef atomic<uint32_t> atomic_uint32_t;
typedef atomic<int64_t> atomic_int64_t;
typedef atomic<uint64_t> atomic_uint64_t;

typedef atomic<int_least8_t> atomic_int_least8_t;
typedef atomic<uint_least8_t> atomic_uint_least8_t;
typedef atomic<int_least16_t> atomic_int_least16_t;
typedef atomic<uint_least16_t> atomic_uint_least16_t;
typedef atomic<int_least32_t> atomic_int_least32_t;
typedef atomic<uint_least32_t> atomic_uint_least32_t;
typedef atomic<int_least64_t> atomic_int_least64_t;
typedef atomic<uint_least64_t> atomic_uint_least64_t;

typedef atomic<int_fast8_t> atomic_int_fast8_t;
typedef atomic<uint_fast8_t> atomic_uint_fast8_t;
typedef atomic<int_fast16_t> atomic_int_fast16_t;
typedef atomic<uint_fast16_t> atomic_uint_fast16_t;
typedef atomic<int_fast32_t> atomic_int_fast32_t;
typedef atomic<uint_fast32_t> atomic_uint_fast32_t;
typedef atomic<int_fast64_t> atomic_int_fast64_t;
typedef atomic<uint_fast64_t> atomic_uint_fast64_t;

typedef atomic<intptr_t> atomic_intptr_t;
typedef atomic<uintptr_t> atomic_uintptr_t;
typedef atomic<size_t> atomic_size_t;
typedef atomic<ptrdiff_t> atomic_ptrdiff_t;
typedef atomic<intmax_t> atomic_intmax_t;
typedef atomic<uintmax_t> atomic_uintmax_t;
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1102 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"
#line 1103 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\atomic"






#line 8 "d:\\git\\block_match\\block_match\\thread_pool.h"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concurrent_queue.h"



















#pragma once


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"








#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
























































#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concurrent_queue.h"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\memory"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"

#pragma once










 
#line 15 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"

 
namespace std {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t;  using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t;  using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;


	namespace tr1 {
using :: int8_t; using :: int16_t;
using :: int32_t; using :: int64_t;
using :: uint8_t; using :: uint16_t;
using :: uint32_t; using :: uint64_t;

using :: int_least8_t; using :: int_least16_t;
using :: int_least32_t;  using :: int_least64_t;
using :: uint_least8_t; using :: uint_least16_t;
using :: uint_least32_t; using :: uint_least64_t;

using :: int_fast8_t; using :: int_fast16_t;
using :: int_fast32_t;  using :: int_fast64_t;
using :: uint_fast8_t; using :: uint_fast16_t;
using :: uint_fast32_t; using :: uint_fast64_t;

using :: intmax_t; using :: intptr_t;
using :: uintmax_t; using :: uintptr_t;
	}	
#line 57 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"
}
 #line 59 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"

#line 61 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cstdint"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"

#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 

  

 
 
extern "C" {
 #line 18 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
 #line 19 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"

		





		






void __cdecl _Feraise(int);

typedef union
	{	
	unsigned short _Word[8];
	float _Float;
	double _Double;
	long double _Long_double;
	} _Dconst;

		
__declspec(dllimport) double __cdecl _Cosh(double, double);
__declspec(dllimport) short __cdecl _Dtest(double *);
__declspec(dllimport) double __cdecl _Sinh(double, double);

__declspec(dllimport) short __cdecl _Exp(double *, double, short);
extern __declspec(dllimport)  _Dconst _Denorm, _Hugeval, _Inf,
	_Nan, _Snan;

		
__declspec(dllimport) float __cdecl _FCosh(float, float);
__declspec(dllimport) short __cdecl _FDtest(float *);
__declspec(dllimport) float __cdecl _FSinh(float, float);

__declspec(dllimport) short __cdecl _FExp(float *, float, short);
extern __declspec(dllimport)  _Dconst _FDenorm, _FInf, _FNan, _FSnan;

		
__declspec(dllimport) long double __cdecl _LCosh(long double, long double);
__declspec(dllimport) short __cdecl _LDtest(long double *);
__declspec(dllimport) long double __cdecl _LSinh(long double, long double);

__declspec(dllimport) short __cdecl _LExp(long double *, long double, short);
extern __declspec(dllimport)  _Dconst _LDenorm, _LInf, _LNan, _LSnan;

 
 
}
 #line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
 #line 73 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"

 
 #pragma warning(pop)
 #pragma pack(pop)

#line 79 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"
#line 80 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\ymath.h"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cfloat"

#pragma once




#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\float.h"








#pragma once




__pragma(pack(push, 8)) extern "C" {




    


        


            
        #line 27 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\float.h"
    #line 28 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\float.h"
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\float.h"



















    






        
    #line 57 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\float.h"
#line 58 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\float.h"
























































































































































#line 211 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\float.h"

    

#line 215 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\float.h"











__declspec(dllimport) unsigned int __cdecl _clearfp(void);

#pragma warning(push)
#pragma warning(disable: 4141)

 __declspec(deprecated("This function or variable may be unsafe. Consider using " "_controlfp_s" " instead. To disable deprecation, use _CRT_SECURE_NO_WARNINGS. " "See online help for details."))
__declspec(dllimport) unsigned int __cdecl _controlfp(
      unsigned int _NewValue,
      unsigned int _Mask
    );

#pragma warning(pop)


__declspec(dllimport) void __cdecl _set_controlfp(
      unsigned int _NewValue,
      unsigned int _Mask
    );


__declspec(dllimport) errno_t __cdecl _controlfp_s(
      unsigned int* _CurrentState,
           unsigned int  _NewValue,
           unsigned int  _Mask
    );


__declspec(dllimport) unsigned int __cdecl _statusfp(void);


__declspec(dllimport) void __cdecl _fpreset(void);















__declspec(dllimport) unsigned int __cdecl _control87(
      unsigned int _NewValue,
      unsigned int _Mask
    );












 
__declspec(dllimport) int* __cdecl __fpecode(void);



 
__declspec(dllimport) int __cdecl __fpe_flt_rounds(void);












  __declspec(dllimport) double __cdecl _copysign(  double _Number,   double _Sign);
  __declspec(dllimport) double __cdecl _chgsign(  double _X);
  __declspec(dllimport) double __cdecl _scalb(  double _X,   long _Y);
  __declspec(dllimport) double __cdecl _logb(  double _X);
  __declspec(dllimport) double __cdecl _nextafter(  double _X,   double _Y);
  __declspec(dllimport) int    __cdecl _finite(  double _X);
  __declspec(dllimport) int    __cdecl _isnan(  double _X);
  __declspec(dllimport) int    __cdecl _fpclass(  double _X);


      __declspec(dllimport) float __cdecl _scalbf(  float _X,   long _Y);
#line 319 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\float.h"










    
    
    

    
    __declspec(dllimport) void __cdecl fpreset(void);

    
    

    
    

    
    
    

    
    
    
    
    
    
    

    
    
    

    
    
    
    
    

    
    
    
    

    

    
    
    
    
    
    

    
    
    
    

    
    
    
    
    
    

    
    
    
    

    

#line 398 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\float.h"



} __pragma(pack(pop))
#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cfloat"
#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cfloat"





#line 8 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"

#pragma once









 #line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"












__pragma(pack(push, 8)) extern "C" {



#pragma warning(push)
#pragma warning(disable:4738) 
#pragma warning(disable:4820) 
#line 21 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"



    
    
    struct _exception
    {
        int    type;   
        char*  name;   
        double arg1;   
        double arg2;   
        double retval; 
    };

    
    
    
        

        struct _complex
        {
            double x, y; 
        };

        


#line 49 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"
    #line 50 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"
#line 51 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"










#line 62 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"
    typedef float  float_t;
    typedef double double_t;
#line 65 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"















    
        extern double const _HUGE;
    

#line 85 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"
#line 86 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"


    
#line 90 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"


















































































void __cdecl _fperrraise(  int _Except);

  __declspec(dllimport) short __cdecl _dclass(  double _X);
  __declspec(dllimport) short __cdecl _ldclass(  long double _X);
  __declspec(dllimport) short __cdecl _fdclass(  float _X);

  __declspec(dllimport) int __cdecl _dsign(  double _X);
  __declspec(dllimport) int __cdecl _ldsign(  long double _X);
  __declspec(dllimport) int __cdecl _fdsign(  float _X);

  __declspec(dllimport) int __cdecl _dpcomp(  double _X,   double _Y);
  __declspec(dllimport) int __cdecl _ldpcomp(  long double _X,   long double _Y);
  __declspec(dllimport) int __cdecl _fdpcomp(  float _X,   float _Y);

  __declspec(dllimport) short __cdecl _dtest(  double* _Px);
  __declspec(dllimport) short __cdecl _ldtest(  long double* _Px);
  __declspec(dllimport) short __cdecl _fdtest(  float* _Px);

__declspec(dllimport) short __cdecl _d_int(  double* _Px,   short _Xexp);
__declspec(dllimport) short __cdecl _ld_int(  long double* _Px,   short _Xexp);
__declspec(dllimport) short __cdecl _fd_int(  float* _Px,   short _Xexp);

__declspec(dllimport) short __cdecl _dscale(  double* _Px,   long _Lexp);
__declspec(dllimport) short __cdecl _ldscale(  long double* _Px,   long _Lexp);
__declspec(dllimport) short __cdecl _fdscale(  float* _Px,   long _Lexp);

__declspec(dllimport) short __cdecl _dunscale(  short* _Pex,   double* _Px);
__declspec(dllimport) short __cdecl _ldunscale(  short* _Pex,   long double* _Px);
__declspec(dllimport) short __cdecl _fdunscale(  short* _Pex,   float* _Px);

  __declspec(dllimport) short __cdecl _dexp(  double* _Px,   double _Y,   long _Eoff);
  __declspec(dllimport) short __cdecl _ldexp(  long double* _Px,   long double _Y,   long _Eoff);
  __declspec(dllimport) short __cdecl _fdexp(  float* _Px,   float _Y,   long _Eoff);

  __declspec(dllimport) short __cdecl _dnorm(  unsigned short* _Ps);
  __declspec(dllimport) short __cdecl _fdnorm(  unsigned short* _Ps);

  __declspec(dllimport) double __cdecl _dpoly(  double _X,   double const* _Tab,   int _N);
  __declspec(dllimport) long double __cdecl _ldpoly(  long double _X,   long double const* _Tab,   int _N);
  __declspec(dllimport) float __cdecl _fdpoly(  float _X,   float const* _Tab,   int _N);

  __declspec(dllimport) double __cdecl _dlog(  double _X,   int _Baseflag);
  __declspec(dllimport) long double __cdecl _ldlog(  long double _X,   int _Baseflag);
  __declspec(dllimport) float __cdecl _fdlog(  float _X,   int _Baseflag);

  __declspec(dllimport) double __cdecl _dsin(  double _X,   unsigned int _Qoff);
  __declspec(dllimport) long double __cdecl _ldsin(  long double _X,   unsigned int _Qoff);
  __declspec(dllimport) float __cdecl _fdsin(  float _X,   unsigned int _Qoff);


typedef union
{   
    unsigned short _Sh[4];
    double _Val;
} _double_val;


typedef union
{   
    unsigned short _Sh[2];
    float _Val;
} _float_val;


typedef union
{   
    unsigned short _Sh[4];
    long double _Val;
} _ldouble_val;

typedef union
{   
    unsigned short _Word[4];
    float _Float;
    double _Double;
    long double _Long_double;
} _float_const;

extern const _float_const _Denorm_C,  _Inf_C,  _Nan_C,  _Snan_C, _Hugeval_C;
extern const _float_const _FDenorm_C, _FInf_C, _FNan_C, _FSnan_C;
extern const _float_const _LDenorm_C, _LInf_C, _LNan_C, _LSnan_C;

extern const _float_const _Eps_C,  _Rteps_C;
extern const _float_const _FEps_C, _FRteps_C;
extern const _float_const _LEps_C, _LRteps_C;

extern const double      _Zero_C,  _Xbig_C;
extern const float       _FZero_C, _FXbig_C;
extern const long double _LZero_C, _LXbig_C;




























extern "C++"
{
      inline int fpclassify(  float _X) throw()
    {
        return _fdtest(&_X);
    }

      inline int fpclassify(  double _X) throw()
    {
        return _dtest(&_X);
    }

      inline int fpclassify(  long double _X) throw()
    {
        return _ldtest(&_X);
    }

      inline bool signbit(  float _X) throw()
    {
        return _fdsign(_X) != 0;
    }

      inline bool signbit(  double _X) throw()
    {
        return _dsign(_X) != 0;
    }

      inline bool signbit(  long double _X) throw()
    {
        return _ldsign(_X) != 0;
    }

      inline int _fpcomp(  float _X,   float _Y) throw()
    {
        return _fdpcomp(_X, _Y);
    }

      inline int _fpcomp(  double _X,   double _Y) throw()
    {
        return _dpcomp(_X, _Y);
    }

      inline int _fpcomp(  long double _X,   long double _Y) throw()
    {
        return _ldpcomp(_X, _Y);
    }

    template <class _Trc, class _Tre> struct _Combined_type
    {   
        typedef float _Type;
    };

    template <> struct _Combined_type<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Combined_type<float, long double>
    {   
        typedef long double _Type;
    };

    template <class _Ty, class _T2> struct _Real_widened
    {   
        typedef long double _Type;
    };

    template <> struct _Real_widened<float, float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_widened<float, double>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, float>
    {   
        typedef double _Type;
    };

    template <> struct _Real_widened<double, double>
    {   
        typedef double _Type;
    };

    template <class _Ty> struct _Real_type
    {   
        typedef double _Type;   
    };

    template <> struct _Real_type<float>
    {   
        typedef float _Type;
    };

    template <> struct _Real_type<long double>
    {   
        typedef long double _Type;
    };

    template <class _T1, class _T2>
      inline int _fpcomp(  _T1 _X,   _T2 _Y) throw()
    {   
        typedef typename _Combined_type<float,
            typename _Real_widened<
            typename _Real_type<_T1>::_Type,
            typename _Real_type<_T2>::_Type>::_Type>::_Type _Tw;
        return _fpcomp((_Tw)_X, (_Tw)_Y);
    }

    template <class _Ty>
      inline bool isfinite(  _Ty _X) throw()
    {
        return fpclassify(_X) <= 0;
    }

    template <class _Ty>
      inline bool isinf(  _Ty _X) throw()
    {
        return fpclassify(_X) == 1;
    }

    template <class _Ty>
      inline bool isnan(  _Ty _X) throw()
    {
        return fpclassify(_X) == 2;
    }

    template <class _Ty>
      inline bool isnormal(  _Ty _X) throw()
    {
        return fpclassify(_X) == (-1);
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 4) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isgreaterequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (2 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isless(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & 1) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessequal(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 2)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool islessgreater(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return (_fpcomp(_X, _Y) & (1 | 4)) != 0;
    }

    template <class _Ty1, class _Ty2>
      inline bool isunordered(  _Ty1 _X,   _Ty2 _Y) throw()
    {
        return _fpcomp(_X, _Y) == 0;
    }
}  
#line 462 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"





  int       __cdecl abs(  int _X);
  long      __cdecl labs(  long _X);
  long long __cdecl llabs(  long long _X);

  double __cdecl acos(  double _X);
  double __cdecl asin(  double _X);
  double __cdecl atan(  double _X);
  double __cdecl atan2(  double _Y,   double _X);

  double __cdecl cos(  double _X);
  double __cdecl cosh(  double _X);
  double __cdecl exp(  double _X);
   double __cdecl fabs(  double _X);
  double __cdecl fmod(  double _X,   double _Y);
  double __cdecl log(  double _X);
  double __cdecl log10(  double _X);
  double __cdecl pow(  double _X,   double _Y);
  double __cdecl sin(  double _X);
  double __cdecl sinh(  double _X);
   double __cdecl sqrt(  double _X);
  double __cdecl tan(  double _X);
  double __cdecl tanh(  double _X);

  __declspec(dllimport) double    __cdecl acosh(  double _X);
  __declspec(dllimport) double    __cdecl asinh(  double _X);
  __declspec(dllimport) double    __cdecl atanh(  double _X);
  __declspec(dllimport)  double    __cdecl atof(  char const* _String);
  __declspec(dllimport)  double    __cdecl _atof_l(  char const* _String,   _locale_t _Locale);
  __declspec(dllimport) double    __cdecl _cabs(  struct _complex _Complex_value);
  __declspec(dllimport) double    __cdecl cbrt(  double _X);
  __declspec(dllimport) double    __cdecl ceil(  double _X);
  __declspec(dllimport) double    __cdecl _chgsign(  double _X);
  __declspec(dllimport) double    __cdecl copysign(  double _Number,   double _Sign);
  __declspec(dllimport) double    __cdecl _copysign(  double _Number,   double _Sign);
  __declspec(dllimport) double    __cdecl erf(  double _X);
  __declspec(dllimport) double    __cdecl erfc(  double _X);
  __declspec(dllimport) double    __cdecl exp2(  double _X);
  __declspec(dllimport) double    __cdecl expm1(  double _X);
  __declspec(dllimport) double    __cdecl fdim(  double _X,   double _Y);
  __declspec(dllimport) double    __cdecl floor(  double _X);
  __declspec(dllimport) double    __cdecl fma(  double _X,   double _Y,   double _Z);
  __declspec(dllimport) double    __cdecl fmax(  double _X,   double _Y);
  __declspec(dllimport) double    __cdecl fmin(  double _X,   double _Y);
  __declspec(dllimport) double    __cdecl frexp(  double _X,   int* _Y);
  __declspec(dllimport) double    __cdecl hypot(  double _X,   double _Y);
  __declspec(dllimport) double    __cdecl _hypot(  double _X,   double _Y);
  __declspec(dllimport) int       __cdecl ilogb(  double _X);
  __declspec(dllimport) double    __cdecl ldexp(  double _X,   int _Y);
  __declspec(dllimport) double    __cdecl lgamma(  double _X);
  __declspec(dllimport) long long __cdecl llrint(  double _X);
  __declspec(dllimport) long long __cdecl llround(  double _X);
  __declspec(dllimport) double    __cdecl log1p(  double _X);
  __declspec(dllimport) double    __cdecl log2(  double _X);
  __declspec(dllimport) double    __cdecl logb(  double _X);
  __declspec(dllimport) long      __cdecl lrint(  double _X);
  __declspec(dllimport) long      __cdecl lround(  double _X);

int __cdecl _matherr(  struct _exception* _Except);

  __declspec(dllimport) double __cdecl modf(  double _X,   double* _Y);
  __declspec(dllimport) double __cdecl nan(  char const*);
  __declspec(dllimport) double __cdecl nearbyint(  double _X);
  __declspec(dllimport) double __cdecl nextafter(  double _X,   double _Y);
  __declspec(dllimport) double __cdecl nexttoward(  double _X,   long double _Y);
  __declspec(dllimport) double __cdecl remainder(  double _X,   double _Y);
  __declspec(dllimport) double __cdecl remquo(  double _X,   double _Y,   int* _Z);
  __declspec(dllimport) double __cdecl rint(  double _X);
  __declspec(dllimport) double __cdecl round(  double _X);
  __declspec(dllimport) double __cdecl scalbln(  double _X,   long _Y);
  __declspec(dllimport) double __cdecl scalbn(  double _X,   int _Y);
  __declspec(dllimport) double __cdecl tgamma(  double _X);
  __declspec(dllimport) double __cdecl trunc(  double _X);
  __declspec(dllimport) double __cdecl _j0(  double _X );
  __declspec(dllimport) double __cdecl _j1(  double _X );
  __declspec(dllimport) double __cdecl _jn(int _X,   double _Y);
  __declspec(dllimport) double __cdecl _y0(  double _X);
  __declspec(dllimport) double __cdecl _y1(  double _X);
  __declspec(dllimport) double __cdecl _yn(  int _X,   double _Y);

  __declspec(dllimport) float     __cdecl acoshf(  float _X);
  __declspec(dllimport) float     __cdecl asinhf(  float _X);
  __declspec(dllimport) float     __cdecl atanhf(  float _X);
  __declspec(dllimport) float     __cdecl cbrtf(  float _X);
  __declspec(dllimport) float     __cdecl _chgsignf(  float _X);
  __declspec(dllimport) float     __cdecl copysignf(  float _Number,   float _Sign);
  __declspec(dllimport) float     __cdecl _copysignf(  float _Number,   float _Sign);
  __declspec(dllimport) float     __cdecl erff(  float _X);
  __declspec(dllimport) float     __cdecl erfcf(  float _X);
  __declspec(dllimport) float     __cdecl expm1f(  float _X);
  __declspec(dllimport) float     __cdecl exp2f(  float _X);
  __declspec(dllimport) float     __cdecl fdimf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl fmaf(  float _X,   float _Y,   float _Z);
  __declspec(dllimport) float     __cdecl fmaxf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl fminf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl _hypotf(  float _X,   float _Y);
  __declspec(dllimport) int       __cdecl ilogbf(  float _X);
  __declspec(dllimport) float     __cdecl lgammaf(  float _X);
  __declspec(dllimport) long long __cdecl llrintf(  float _X);
  __declspec(dllimport) long long __cdecl llroundf(  float _X);
  __declspec(dllimport) float     __cdecl log1pf(  float _X);
  __declspec(dllimport) float     __cdecl log2f(  float _X);
  __declspec(dllimport) float     __cdecl logbf(  float _X);
  __declspec(dllimport) long      __cdecl lrintf(  float _X);
  __declspec(dllimport) long      __cdecl lroundf(  float _X);
  __declspec(dllimport) float     __cdecl nanf(  char const*);
  __declspec(dllimport) float     __cdecl nearbyintf(  float _X);
  __declspec(dllimport) float     __cdecl nextafterf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl nexttowardf(  float _X,   long double _Y);
  __declspec(dllimport) float     __cdecl remainderf(  float _X,   float _Y);
  __declspec(dllimport) float     __cdecl remquof(  float _X,   float _Y,   int* _Z);
  __declspec(dllimport) float     __cdecl rintf(  float _X);
  __declspec(dllimport) float     __cdecl roundf(  float _X);
  __declspec(dllimport) float     __cdecl scalblnf(  float _X,   long _Y);
  __declspec(dllimport) float     __cdecl scalbnf(  float _X,   int _Y);
  __declspec(dllimport) float     __cdecl tgammaf(  float _X);
  __declspec(dllimport) float     __cdecl truncf(  float _X);





#line 589 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"

      __declspec(dllimport) float __cdecl _logbf(  float _X);
      __declspec(dllimport) float __cdecl _nextafterf(  float _X,   float _Y);
      __declspec(dllimport) int   __cdecl _finitef(  float _X);
      __declspec(dllimport) int   __cdecl _isnanf(  float _X);
      __declspec(dllimport) int   __cdecl _fpclassf(  float _X);

      __declspec(dllimport) int   __cdecl _set_FMA3_enable(  int _Flag);
      __declspec(dllimport) int   __cdecl _get_FMA3_enable(void);






#line 605 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"





      __declspec(dllimport) float __cdecl acosf(  float _X);
      __declspec(dllimport) float __cdecl asinf(  float _X);
      __declspec(dllimport) float __cdecl atan2f(  float _Y,   float _X);
      __declspec(dllimport) float __cdecl atanf(  float _X);
      __declspec(dllimport) float __cdecl ceilf(  float _X);
      __declspec(dllimport) float __cdecl cosf(  float _X);
      __declspec(dllimport) float __cdecl coshf(  float _X);
      __declspec(dllimport) float __cdecl expf(  float _X);











































#line 662 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"





#line 668 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"

      __inline float __cdecl fabsf(  float _X)
    {
        return (float)fabs(_X);
    }

#line 675 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"



      __declspec(dllimport) float __cdecl floorf(  float _X);
      __declspec(dllimport) float __cdecl fmodf(  float _X,   float _Y);













#line 694 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"

  __inline float __cdecl frexpf(  float _X,   int *_Y)
{
    return (float)frexp(_X, _Y);
}

  __inline float __cdecl hypotf(  float _X,   float _Y)
{
    return _hypotf(_X, _Y);
}

  __inline float __cdecl ldexpf(  float _X,   int _Y)
{
    return (float)ldexp(_X, _Y);
}



      __declspec(dllimport) float  __cdecl log10f(  float _X);
      __declspec(dllimport) float  __cdecl logf(  float _X);
      __declspec(dllimport) float  __cdecl modff(  float _X,   float *_Y);
      __declspec(dllimport) float  __cdecl powf(  float _X,   float _Y);
      __declspec(dllimport) float  __cdecl sinf(  float _X);
      __declspec(dllimport) float  __cdecl sinhf(  float _X);
      __declspec(dllimport) float  __cdecl sqrtf(  float _X);
      __declspec(dllimport) float  __cdecl tanf(  float _X);
      __declspec(dllimport) float  __cdecl tanhf(  float _X);



















































#line 773 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"

  __declspec(dllimport) long double __cdecl acoshl(  long double _X);

  __inline long double __cdecl acosl(  long double _X)
{
    return acos((double)_X);
}

  __declspec(dllimport) long double __cdecl asinhl(  long double _X);

  __inline long double __cdecl asinl(  long double _X)
{
    return asin((double)_X);
}

  __inline long double __cdecl atan2l(  long double _Y,   long double _X)
{
    return atan2((double)_Y, (double)_X);
}

  __declspec(dllimport) long double __cdecl atanhl(  long double _X);

  __inline long double __cdecl atanl(  long double _X)
{
    return atan((double)_X);
}

  __declspec(dllimport) long double __cdecl cbrtl(  long double _X);

  __inline long double __cdecl ceill(  long double _X)
{
    return ceil((double)_X);
}

  __inline long double __cdecl _chgsignl(  long double _X)
{
    return _chgsign((double)_X);
}

  __declspec(dllimport) long double __cdecl copysignl(  long double _Number,   long double _Sign);

  __inline long double __cdecl _copysignl(  long double _Number,   long double _Sign)
{
    return _copysign((double)_Number, (double)_Sign);
}

  __inline long double __cdecl coshl(  long double _X)
{
    return cosh((double)_X);
}

  __inline long double __cdecl cosl(  long double _X)
{
    return cos((double)_X);
}

  __declspec(dllimport) long double __cdecl erfl(  long double _X);
  __declspec(dllimport) long double __cdecl erfcl(  long double _X);

  __inline long double __cdecl expl(  long double _X)
{
    return exp((double)_X);
}

  __declspec(dllimport) long double __cdecl exp2l(  long double _X);
  __declspec(dllimport) long double __cdecl expm1l(  long double _X);

  __inline long double __cdecl fabsl(  long double _X)
{
    return fabs((double)_X);
}

  __declspec(dllimport) long double __cdecl fdiml(  long double _X,   long double _Y);

  __inline long double __cdecl floorl(  long double _X)
{
    return floor((double)_X);
}

  __declspec(dllimport) long double __cdecl fmal(  long double _X,   long double _Y,   long double _Z);
  __declspec(dllimport) long double __cdecl fmaxl(  long double _X,   long double _Y);
  __declspec(dllimport) long double __cdecl fminl(  long double _X,   long double _Y);

  __inline long double __cdecl fmodl(  long double _X,   long double _Y)
{
    return fmod((double)_X, (double)_Y);
}

  __inline long double __cdecl frexpl(  long double _X,   int *_Y)
{
    return frexp((double)_X, _Y);
}

  __declspec(dllimport) int __cdecl ilogbl(  long double _X);

  __inline long double __cdecl _hypotl(  long double _X,   long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

  __inline long double __cdecl hypotl(  long double _X,   long double _Y)
{
    return _hypot((double)_X, (double)_Y);
}

  __inline long double __cdecl ldexpl(  long double _X,   int _Y)
{
    return ldexp((double)_X, _Y);
}

  __declspec(dllimport) long double __cdecl lgammal(  long double _X);
  __declspec(dllimport) long long __cdecl llrintl(  long double _X);
  __declspec(dllimport) long long __cdecl llroundl(  long double _X);

  __inline long double __cdecl logl(  long double _X)
{
    return log((double)_X);
}

  __inline long double __cdecl log10l(  long double _X)
{
    return log10((double)_X);
}

  __declspec(dllimport) long double __cdecl log1pl(  long double _X);
  __declspec(dllimport) long double __cdecl log2l(  long double _X);
  __declspec(dllimport) long double __cdecl logbl(  long double _X);
  __declspec(dllimport) long __cdecl lrintl(  long double _X);
  __declspec(dllimport) long __cdecl lroundl(  long double _X);

  __inline long double __cdecl modfl(  long double _X,   long double* _Y)
{
    double _F, _I;
    _F = modf((double)_X, &_I);
    *_Y = _I;
    return _F;
}

  __declspec(dllimport) long double __cdecl nanl(  char const*);
  __declspec(dllimport) long double __cdecl nearbyintl(  long double _X);
  __declspec(dllimport) long double __cdecl nextafterl(  long double _X,   long double _Y);
  __declspec(dllimport) long double __cdecl nexttowardl(  long double _X,   long double _Y);

  __inline long double __cdecl powl(  long double _X,   long double _Y)
{
    return pow((double)_X, (double)_Y);
}

  __declspec(dllimport) long double __cdecl remainderl(  long double _X,   long double _Y);
  __declspec(dllimport) long double __cdecl remquol(  long double _X,   long double _Y,   int* _Z);
  __declspec(dllimport) long double __cdecl rintl(  long double _X);
  __declspec(dllimport) long double __cdecl roundl(  long double _X);
  __declspec(dllimport) long double __cdecl scalblnl(  long double _X,   long _Y);
  __declspec(dllimport) long double __cdecl scalbnl(  long double _X,   int _Y);

  __inline long double __cdecl sinhl(  long double _X)
{
    return sinh((double)_X);
}

  __inline long double __cdecl sinl(  long double _X)
{
    return sin((double)_X);
}

  __inline long double __cdecl sqrtl(  long double _X)
{
    return sqrt((double)_X);
}

  __inline long double __cdecl tanhl(  long double _X)
{
    return tanh((double)_X);
}

  __inline long double __cdecl tanl(  long double _X)
{
    return tan((double)_X);
}

  __declspec(dllimport) long double __cdecl tgammal(  long double _X);
  __declspec(dllimport) long double __cdecl truncl(  long double _X);





#line 961 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"



    
    
    
    
    
    
    

    

    
        
            extern double HUGE;
        

#line 980 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"

        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j0" ". See online help for details."))   __declspec(dllimport) double __cdecl j0(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_j1" ". See online help for details."))   __declspec(dllimport) double __cdecl j1(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_jn" ". See online help for details."))   __declspec(dllimport) double __cdecl jn(  int _X,   double _Y);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y0" ". See online help for details."))   __declspec(dllimport) double __cdecl y0(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_y1" ". See online help for details."))   __declspec(dllimport) double __cdecl y1(  double _X);
        __declspec(deprecated("The POSIX name for this item is deprecated. Instead, use the ISO C " "and C++ conformant name: " "_yn" ". See online help for details."))   __declspec(dllimport) double __cdecl yn(  int _X,   double _Y);
    #line 988 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"
#line 989 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"



#pragma warning(pop)
#line 994 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"


} __pragma(pack(pop))

#line 999 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"























#line 1023 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\math.h"

#line 13 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"

 

  inline double abs(  double _Xx) noexcept
	{
	return (:: fabs(_Xx));
	}

  inline double pow(  double _Xx,   int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: pow(_Xx, static_cast<double>(_Yx)));
	}

  inline float abs(  float _Xx) noexcept
	{
	return (:: fabsf(_Xx));
	}

  inline float acos(  float _Xx) noexcept
	{
	return (:: acosf(_Xx));
	}

  inline float acosh(  float _Xx) noexcept
	{
	return (:: acoshf(_Xx));
	}

  inline float asin(  float _Xx) noexcept
	{
	return (:: asinf(_Xx));
	}

  inline float asinh(  float _Xx) noexcept
	{
	return (:: asinhf(_Xx));
	}

  inline float atan(  float _Xx) noexcept
	{
	return (:: atanf(_Xx));
	}

  inline float atanh(  float _Xx) noexcept
	{
	return (:: atanhf(_Xx));
	}

  inline float atan2(  float _Yx,   float _Xx) noexcept
	{
	return (:: atan2f(_Yx, _Xx));
	}

  inline float cbrt(  float _Xx) noexcept
	{
	return (:: cbrtf(_Xx));
	}

  inline float ceil(  float _Xx) noexcept
	{
	return (:: ceilf(_Xx));
	}

  inline float copysign(  float _Number,
	  float _Sign) noexcept
	{
	return (:: copysignf(_Number, _Sign));
	}

  inline float cos(  float _Xx) noexcept
	{
	return (:: cosf(_Xx));
	}

  inline float cosh(  float _Xx) noexcept
	{
	return (:: coshf(_Xx));
	}

  inline float erf(  float _Xx) noexcept
	{
	return (:: erff(_Xx));
	}

  inline float erfc(  float _Xx) noexcept
	{
	return (:: erfcf(_Xx));
	}

  inline float exp(  float _Xx) noexcept
	{
	return (:: expf(_Xx));
	}

  inline float exp2(  float _Xx) noexcept
	{
	return (:: exp2f(_Xx));
	}

  inline float expm1(  float _Xx) noexcept
	{
	return (:: expm1f(_Xx));
	}

  inline float fabs(  float _Xx) noexcept
	{
	return (:: fabsf(_Xx));
	}

  inline float fdim(  float _Xx,   float _Yx) noexcept
	{
	return (:: fdimf(_Xx, _Yx));
	}

  inline float floor(  float _Xx) noexcept
	{
	return (:: floorf(_Xx));
	}

  inline float fma(  float _Xx,   float _Yx,
	  float _Zx) noexcept
	{
	return (:: fmaf(_Xx, _Yx, _Zx));
	}

  inline float fmax(  float _Xx,   float _Yx) noexcept
	{
	return (:: fmaxf(_Xx, _Yx));
	}

  inline float fmin(  float _Xx,   float _Yx) noexcept
	{
	return (:: fminf(_Xx, _Yx));
	}

  inline float fmod(  float _Xx,   float _Yx) noexcept
	{
	return (:: fmodf(_Xx, _Yx));
	}

  inline float frexp(  float _Xx,   int* _Yx) noexcept
	{
	return (:: frexpf(_Xx, _Yx));
	}

  inline float hypot(  float _Xx,   float _Yx) noexcept
	{
	return (:: hypotf(_Xx, _Yx));
	}

  inline int ilogb(  float _Xx) noexcept
	{
	return (:: ilogbf(_Xx));
	}

  inline float ldexp(  float _Xx,   int _Yx) noexcept
	{
	return (:: ldexpf(_Xx, _Yx));
	}

  inline float lgamma(  float _Xx) noexcept
	{
	return (:: lgammaf(_Xx));
	}

  inline long long llrint(  float _Xx) noexcept
	{
	return (:: llrintf(_Xx));
	}

  inline long long llround(  float _Xx) noexcept
	{
	return (:: llroundf(_Xx));
	}

  inline float log(  float _Xx) noexcept
	{
	return (:: logf(_Xx));
	}

  inline float log10(  float _Xx) noexcept
	{
	return (:: log10f(_Xx));
	}

  inline float log1p(  float _Xx) noexcept
	{
	return (:: log1pf(_Xx));
	}

  inline float log2(  float _Xx) noexcept
	{
	return (:: log2f(_Xx));
	}

  inline float logb(  float _Xx) noexcept
	{
	return (:: logbf(_Xx));
	}

  inline long lrint(  float _Xx) noexcept
	{
	return (:: lrintf(_Xx));
	}

  inline long lround(  float _Xx) noexcept
	{
	return (:: lroundf(_Xx));
	}

  inline float modf(  float _Xx,   float* _Yx) noexcept
	{
	return (:: modff(_Xx, _Yx));
	}

  inline float nearbyint(  float _Xx) noexcept
	{
	return (:: nearbyintf(_Xx));
	}

  inline float nextafter(  float _Xx,   float _Yx) noexcept
	{
	return (:: nextafterf(_Xx, _Yx));
	}

  inline float nexttoward(  float _Xx,
	  long double _Yx) noexcept
	{
	return (:: nexttowardf(_Xx, _Yx));
	}

  inline float pow(  float _Xx,
	  float _Yx) noexcept
	{
	return (:: powf(_Xx, _Yx));
	}

  inline float pow(  float _Xx,   int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: powf(_Xx, static_cast<float>(_Yx)));
	}

  inline float remainder(  float _Xx,   float _Yx) noexcept
	{
	return (:: remainderf(_Xx, _Yx));
	}

  inline float remquo(  float _Xx,   float _Yx,
	  int *_Zx) noexcept
	{
	return (:: remquof(_Xx, _Yx, _Zx));
	}

  inline float rint(  float _Xx) noexcept
	{
	return (:: rintf(_Xx));
	}

  inline float round(  float _Xx) noexcept
	{
	return (:: roundf(_Xx));
	}

  inline float scalbln(  float _Xx,   long _Yx) noexcept
	{
	return (:: scalblnf(_Xx, _Yx));
	}

  inline float scalbn(  float _Xx,   int _Yx) noexcept
	{
	return (:: scalbnf(_Xx, _Yx));
	}

  inline float sin(  float _Xx) noexcept
	{
	return (:: sinf(_Xx));
	}

  inline float sinh(  float _Xx) noexcept
	{
	return (:: sinhf(_Xx));
	}

  inline float sqrt(  float _Xx) noexcept
	{
	return (:: sqrtf(_Xx));
	}

  inline float tan(  float _Xx) noexcept
	{
	return (:: tanf(_Xx));
	}

  inline float tanh(  float _Xx) noexcept
	{
	return (:: tanhf(_Xx));
	}

  inline float tgamma(  float _Xx) noexcept
	{
	return (:: tgammaf(_Xx));
	}

  inline float trunc(  float _Xx) noexcept
	{
	return (:: truncf(_Xx));
	}

  inline long double abs(  long double _Xx) noexcept
	{
	return (:: fabsl(_Xx));
	}

  inline long double acos(  long double _Xx) noexcept
	{
	return (:: acosl(_Xx));
	}

  inline long double acosh(  long double _Xx) noexcept
	{
	return (:: acoshl(_Xx));
	}

  inline long double asin(  long double _Xx) noexcept
	{
	return (:: asinl(_Xx));
	}

  inline long double asinh(  long double _Xx) noexcept
	{
	return (:: asinhl(_Xx));
	}

  inline long double atan(  long double _Xx) noexcept
	{
	return (:: atanl(_Xx));
	}

  inline long double atanh(  long double _Xx) noexcept
	{
	return (:: atanhl(_Xx));
	}

  inline long double atan2(  long double _Yx,
	  long double _Xx) noexcept
	{
	return (:: atan2l(_Yx, _Xx));
	}

  inline long double cbrt(  long double _Xx) noexcept
	{
	return (:: cbrtl(_Xx));
	}

  inline long double ceil(  long double _Xx) noexcept
	{
	return (:: ceill(_Xx));
	}

  inline long double copysign(  long double _Number,
	  long double _Sign) noexcept
	{
	return (:: copysignl(_Number, _Sign));
	}

  inline long double cos(  long double _Xx) noexcept
	{
	return (:: cosl(_Xx));
	}

  inline long double cosh(  long double _Xx) noexcept
	{
	return (:: coshl(_Xx));
	}

  inline long double erf(  long double _Xx) noexcept
	{
	return (:: erfl(_Xx));
	}

  inline long double erfc(  long double _Xx) noexcept
	{
	return (:: erfcl(_Xx));
	}

  inline long double exp(  long double _Xx) noexcept
	{
	return (:: expl(_Xx));
	}

  inline long double exp2(  long double _Xx) noexcept
	{
	return (:: exp2l(_Xx));
	}

  inline long double expm1(  long double _Xx) noexcept
	{
	return (:: expm1l(_Xx));
	}

  inline long double fabs(  long double _Xx) noexcept
	{
	return (:: fabsl(_Xx));
	}

  inline long double fdim(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fdiml(_Xx, _Yx));
	}

  inline long double floor(  long double _Xx) noexcept
	{
	return (:: floorl(_Xx));
	}

  inline long double fma(  long double _Xx,
	  long double _Yx,   long double _Zx) noexcept
	{
	return (:: fmal(_Xx, _Yx, _Zx));
	}

  inline long double fmax(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fmaxl(_Xx, _Yx));
	}

  inline long double fmin(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fminl(_Xx, _Yx));
	}

  inline long double fmod(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: fmodl(_Xx, _Yx));
	}

  inline long double frexp(  long double _Xx,
	  int* _Yx) noexcept
	{
	return (:: frexpl(_Xx, _Yx));
	}

  inline long double hypot(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: hypotl(_Xx, _Yx));
	}

  inline int ilogb(  long double _Xx) noexcept
	{
	return (:: ilogbl(_Xx));
	}

  inline long double ldexp(  long double _Xx,
	  int _Yx) noexcept
	{
	return (:: ldexpl(_Xx, _Yx));
	}

  inline long double lgamma(  long double _Xx) noexcept
	{
	return (:: lgammal(_Xx));
	}

  inline long long llrint(  long double _Xx) noexcept
	{
	return (:: llrintl(_Xx));
	}

  inline long long llround(  long double _Xx) noexcept
	{
	return (:: llroundl(_Xx));
	}

  inline long double log(  long double _Xx) noexcept
	{
	return (:: logl(_Xx));
	}

  inline long double log10(  long double _Xx) noexcept
	{
	return (:: log10l(_Xx));
	}

  inline long double log1p(  long double _Xx) noexcept
	{
	return (:: log1pl(_Xx));
	}

  inline long double log2(  long double _Xx) noexcept
	{
	return (:: log2l(_Xx));
	}

  inline long double logb(  long double _Xx) noexcept
	{
	return (:: logbl(_Xx));
	}

  inline long lrint(  long double _Xx) noexcept
	{
	return (:: lrintl(_Xx));
	}

  inline long lround(  long double _Xx) noexcept
	{
	return (:: lroundl(_Xx));
	}

  inline long double modf(  long double _Xx,
	  long double* _Yx) noexcept
	{
	return (:: modfl(_Xx, _Yx));
	}

  inline long double nearbyint(  long double _Xx) noexcept
	{
	return (:: nearbyintl(_Xx));
	}

  inline long double nextafter(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: nextafterl(_Xx, _Yx));
	}

  inline long double nexttoward(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: nexttowardl(_Xx, _Yx));
	}

  inline long double pow(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: powl(_Xx, _Yx));
	}

  inline long double pow(  long double _Xx,
	  int _Yx) noexcept
	{
	if (_Yx == 2)
		return (_Xx * _Xx);

	return (:: powl(_Xx, static_cast<long double>(_Yx)));
	}

  inline long double remainder(  long double _Xx,
	  long double _Yx) noexcept
	{
	return (:: remainderl(_Xx, _Yx));
	}

  inline long double remquo(  long double _Xx,
	  long double _Yx,   int *_Zx) noexcept
	{
	return (:: remquol(_Xx, _Yx, _Zx));
	}

  inline long double rint(  long double _Xx) noexcept
	{
	return (:: rintl(_Xx));
	}

  inline long double round(  long double _Xx) noexcept
	{
	return (:: roundl(_Xx));
	}

  inline long double scalbln(  long double _Xx,
	  long _Yx) noexcept
	{
	return (:: scalblnl(_Xx, _Yx));
	}

  inline long double scalbn(  long double _Xx,
	  int _Yx) noexcept
	{
	return (:: scalbnl(_Xx, _Yx));
	}

  inline long double sin(  long double _Xx) noexcept
	{
	return (:: sinl(_Xx));
	}

  inline long double sinh(  long double _Xx) noexcept
	{
	return (:: sinhl(_Xx));
	}

  inline long double sqrt(  long double _Xx) noexcept
	{
	return (:: sqrtl(_Xx));
	}

  inline long double tan(  long double _Xx) noexcept
	{
	return (:: tanl(_Xx));
	}

  inline long double tanh(  long double _Xx) noexcept
	{
	return (:: tanhl(_Xx));
	}

  inline long double tgamma(  long double _Xx) noexcept
	{
	return (:: tgammal(_Xx));
	}

  inline long double trunc(  long double _Xx) noexcept
	{
	return (:: truncl(_Xx));
	}

 #line 641 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"






 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"


 
#pragma once





 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
template<class _Ty>
	struct _Promote_to_float
	{	
	typedef typename conditional<is_integral<_Ty>::value,
		double, _Ty>::type type;
	};

template<class _Ty1,
	class _Ty2>
	struct _Common_float_type
	{	
	typedef typename _Promote_to_float<_Ty1>::type _Ty1f;
	typedef typename _Promote_to_float<_Ty2>::type _Ty2f;
	typedef typename conditional<is_same<_Ty1f, long double>::value
		|| is_same<_Ty2f, long double>::value, long double,
		typename conditional<is_same<_Ty1f, double>::value
			|| is_same<_Ty2f, double>::value, double,
			float>::type>::type type;
	};
}








































template<class _Ty1,
	class _Ty2> inline
	typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value
		&& ::std:: is_arithmetic<_Ty2>::value,
		typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type
	pow(const _Ty1 _Left, const _Ty2 _Right)
	{	
	typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
	return (:: pow(type(_Left), type(_Right)));
	}


extern "C"    double __cdecl acos(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acos(_Ty _Left) { return (:: acos((double)_Left)); }
extern "C"    double __cdecl asin(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asin(_Ty _Left) { return (:: asin((double)_Left)); }
extern "C"    double __cdecl atan(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atan(_Ty _Left) { return (:: atan((double)_Left)); }
extern "C"    double __cdecl atan2(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type atan2(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: atan2((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl ceil(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ceil(_Ty _Left) { return (:: ceil((double)_Left)); }
extern "C"    double __cdecl cos(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cos(_Ty _Left) { return (:: cos((double)_Left)); }
extern "C"    double __cdecl cosh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cosh(_Ty _Left) { return (:: cosh((double)_Left)); }
extern "C"    double __cdecl exp(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp(_Ty _Left) { return (:: exp((double)_Left)); }

extern "C"    double __cdecl fabs(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type fabs(_Ty _Left) { return (:: fabs((double)_Left)); }

extern "C"   __declspec(dllimport) double __cdecl floor(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type floor(_Ty _Left) { return (:: floor((double)_Left)); }
extern "C"    double __cdecl fmod(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmod(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmod((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl frexp(  double,   int *); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type frexp(_Ty _Left,   int * _Arg2) { return (:: frexp((double)_Left, _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl ldexp(  double,   int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type ldexp(_Ty _Left,   int _Arg2) { return (:: ldexp((double)_Left, _Arg2)); }
extern "C"    double __cdecl log(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log(_Ty _Left) { return (:: log((double)_Left)); }
extern "C"    double __cdecl log10(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log10(_Ty _Left) { return (:: log10((double)_Left)); }


extern "C"    double __cdecl sin(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sin(_Ty _Left) { return (:: sin((double)_Left)); }
extern "C"    double __cdecl sinh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sinh(_Ty _Left) { return (:: sinh((double)_Left)); }
extern "C"    double __cdecl sqrt(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type sqrt(_Ty _Left) { return (:: sqrt((double)_Left)); }
extern "C"    double __cdecl tan(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tan(_Ty _Left) { return (:: tan((double)_Left)); }
extern "C"    double __cdecl tanh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tanh(_Ty _Left) { return (:: tanh((double)_Left)); }

		









		

inline float _Fma(float _Left, float _Middle, float _Right)
	{	
	return (:: fmaf(_Left, _Middle, _Right));
	}

inline double _Fma(double _Left, double _Middle, double _Right)
	{	
	return (:: fma(_Left, _Middle, _Right));
	}

inline long double _Fma(long double _Left, long double _Middle,
	long double _Right)
	{	
	return (:: fmal(_Left, _Middle, _Right));
	}

template<class _Ty1,
	class _Ty2,
	class _Ty3> inline
	typename ::std:: _Common_float_type<_Ty1,
		typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type
	fma(_Ty1 _Left, _Ty2 _Middle, _Ty3 _Right)
	{	
	typedef typename ::std:: _Common_float_type<_Ty1,
		typename ::std:: _Common_float_type<_Ty2, _Ty3>::type>::type type;
	return (_Fma((type)_Left, (type)_Middle, (type)_Right));
	}

		

inline float _Remquo(float _Left, float _Right, int *_Pquo)
	{	
	return (:: remquof(_Left, _Right, _Pquo));
	}

inline double _Remquo(double _Left, double _Right, int *_Pquo)
	{	
	return (:: remquo(_Left, _Right, _Pquo));
	}

inline long double _Remquo(long double _Left, long double _Right, int *_Pquo)
	{	
	return (:: remquol(_Left, _Right, _Pquo));
	}

template<class _Ty1,
	class _Ty2> inline
	typename ::std:: _Common_float_type<_Ty1, _Ty2>::type
	remquo(_Ty1 _Left, _Ty2 _Right, int *_Pquo)
	{	
	typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type;
	return (_Remquo((type)_Left, (type)_Right, _Pquo));
	}

extern "C"   __declspec(dllimport) double __cdecl acosh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type acosh(_Ty _Left) { return (:: acosh((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl asinh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type asinh(_Ty _Left) { return (:: asinh((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl atanh(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type atanh(_Ty _Left) { return (:: atanh((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl cbrt(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type cbrt(_Ty _Left) { return (:: cbrt((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl copysign(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type copysign(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: copysign((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl erf(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erf(_Ty _Left) { return (:: erf((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl erfc(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type erfc(_Ty _Left) { return (:: erfc((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl expm1(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type expm1(_Ty _Left) { return (:: expm1((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl exp2(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type exp2(_Ty _Left) { return (:: exp2((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl fdim(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fdim(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fdim((type)_Left, (type)_Right)); }

extern "C"   __declspec(dllimport) double __cdecl fmax(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmax(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmax((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl fmin(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type fmin(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: fmin((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl hypot(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type hypot(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: hypot((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) int __cdecl ilogb(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, int>::type ilogb(_Ty _Left) { return (:: ilogb((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl lgamma(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type lgamma(_Ty _Left) { return (:: lgamma((double)_Left)); }
extern "C"   __declspec(dllimport) long long __cdecl llrint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llrint(_Ty _Left) { return (:: llrint((double)_Left)); }
extern "C"   __declspec(dllimport) long long __cdecl llround(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long long>::type llround(_Ty _Left) { return (:: llround((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl log1p(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log1p(_Ty _Left) { return (:: log1p((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl log2(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type log2(_Ty _Left) { return (:: log2((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl logb(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type logb(_Ty _Left) { return (:: logb((double)_Left)); }
extern "C"   __declspec(dllimport) long __cdecl lrint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lrint(_Ty _Left) { return (:: lrint((double)_Left)); }
extern "C"   __declspec(dllimport) long __cdecl lround(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, long>::type lround(_Ty _Left) { return (:: lround((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl nearbyint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nearbyint(_Ty _Left) { return (:: nearbyint((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl nextafter(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type nextafter(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: nextafter((type)_Left, (type)_Right)); }
extern "C"   __declspec(dllimport) double __cdecl nexttoward(  double,   long double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type nexttoward(_Ty _Left,   long double _Arg2) { return (:: nexttoward((double)_Left, _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl remainder(   double,   double); template<class _Ty1, class _Ty2> inline typename ::std:: enable_if< ::std:: is_arithmetic<_Ty1>::value && ::std:: is_arithmetic<_Ty2>::value, typename ::std:: _Common_float_type<_Ty1, _Ty2>::type>::type remainder(_Ty1 _Left, _Ty2 _Right) { typedef typename ::std:: _Common_float_type<_Ty1, _Ty2>::type type; return (:: remainder((type)_Left, (type)_Right)); }

extern "C"   __declspec(dllimport) double __cdecl rint(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type rint(_Ty _Left) { return (:: rint((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl round(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type round(_Ty _Left) { return (:: round((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl scalbln(  double,   long); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbln(_Ty _Left,   long _Arg2) { return (:: scalbln((double)_Left, _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl scalbn(  double,   int); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type scalbn(_Ty _Left,   int _Arg2) { return (:: scalbn((double)_Left, _Arg2)); }
extern "C"   __declspec(dllimport) double __cdecl tgamma(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type tgamma(_Ty _Left) { return (:: tgamma((double)_Left)); }
extern "C"   __declspec(dllimport) double __cdecl trunc(  double); template<class _Ty> inline typename ::std:: enable_if< ::std:: is_integral<_Ty>::value, double>::type trunc(_Ty _Left) { return (:: trunc((double)_Left)); }

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 218 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
#line 219 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"
 #line 220 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xtgmath.h"





#line 648 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"
#line 649 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"

 
namespace std {
using :: abs; using :: acos; using :: asin;
using :: atan; using :: atan2; using :: ceil;
using :: cos; using :: cosh; using :: exp;
using :: fabs; using :: floor; using :: fmod;
using :: frexp; using :: ldexp; using :: log;
using :: log10; using :: modf; using :: pow;
using :: sin; using :: sinh; using :: sqrt;
using :: tan; using :: tanh;

using :: acosf; using :: asinf;
using :: atanf; using :: atan2f; using :: ceilf;
using :: cosf; using :: coshf; using :: expf;
using :: fabsf; using :: floorf; using :: fmodf;
using :: frexpf; using :: ldexpf; using :: logf;
using :: log10f; using :: modff; using :: powf;
using :: sinf; using :: sinhf; using :: sqrtf;
using :: tanf; using :: tanhf;

using :: acosl; using :: asinl;
using :: atanl; using :: atan2l; using :: ceill;
using :: cosl; using :: coshl; using :: expl;
using :: fabsl; using :: floorl; using :: fmodl;
using :: frexpl; using :: ldexpl; using :: logl;
using :: log10l; using :: modfl; using :: powl;
using :: sinl; using :: sinhl; using :: sqrtl;
using :: tanl; using :: tanhl;

using :: float_t; using :: double_t;

using :: acosh; using :: asinh; using :: atanh;
using :: cbrt; using :: erf; using :: erfc;
using :: expm1; using :: exp2;
using :: hypot; using :: ilogb; using :: lgamma;
using :: log1p; using :: log2; using :: logb;
using :: llrint; using :: lrint; using :: nearbyint;
using :: rint; using :: llround; using :: lround;
using :: fdim; using :: fma; using :: fmax; using :: fmin;
using :: round; using :: trunc;
using :: remainder; using :: remquo;
using :: copysign; using :: nan; using :: nextafter;
using :: scalbn; using :: scalbln;
using :: nexttoward; using :: tgamma;

using :: acoshf; using :: asinhf; using :: atanhf;
using :: cbrtf; using :: erff; using :: erfcf;
using :: expm1f; using :: exp2f;
using :: hypotf; using :: ilogbf; using :: lgammaf;
using :: log1pf; using :: log2f; using :: logbf;
using :: llrintf; using :: lrintf; using :: nearbyintf;
using :: rintf; using :: llroundf; using :: lroundf;
using :: fdimf; using :: fmaf; using :: fmaxf; using :: fminf;
using :: roundf; using :: truncf;
using :: remainderf; using :: remquof;
using :: copysignf; using :: nanf;
using :: nextafterf; using :: scalbnf; using :: scalblnf;
using :: nexttowardf; using :: tgammaf;

using :: acoshl; using :: asinhl; using :: atanhl;
using :: cbrtl; using :: erfl; using :: erfcl;
using :: expm1l; using :: exp2l;
using :: hypotl; using :: ilogbl; using :: lgammal;
using :: log1pl; using :: log2l; using :: logbl;
using :: llrintl; using :: lrintl; using :: nearbyintl;
using :: rintl; using :: llroundl; using :: lroundl;
using :: fdiml; using :: fmal; using :: fmaxl; using :: fminl;
using :: roundl; using :: truncl;
using :: remainderl; using :: remquol;
using :: copysignl; using :: nanl;
using :: nextafterl; using :: scalbnl; using :: scalblnl;
using :: nexttowardl; using :: tgammal;

using :: fpclassify; using :: signbit;
using :: isfinite; using :: isinf;
using :: isnan; using :: isnormal;
using :: isgreater; using :: isgreaterequal;
using :: isless; using :: islessequal;
using :: islessgreater; using :: isunordered;
}
 #line 731 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"

#line 733 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\cmath"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"



 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {















 

 
 
 
 

 
 
 
 

 
 
 
 

		
typedef enum
	{	
	denorm_indeterminate = -1,
	denorm_absent = 0,
	denorm_present = 1}
		float_denorm_style;

		
typedef enum
	{	
	round_indeterminate = -1,
	round_toward_zero = 0,
	round_to_nearest = 1,
	round_toward_infinity = 2,
	round_toward_neg_infinity = 3}
		float_round_style;

		
struct _Num_base
	{	
	static constexpr float_denorm_style has_denorm = (float_denorm_style)(denorm_absent);
	static constexpr bool has_denorm_loss = (bool)(false);
	static constexpr bool has_infinity = (bool)(false);
	static constexpr bool has_quiet_NaN = (bool)(false);
	static constexpr bool has_signaling_NaN = (bool)(false);
	static constexpr bool is_bounded = (bool)(false);
	static constexpr bool is_exact = (bool)(false);
	static constexpr bool is_iec559 = (bool)(false);
	static constexpr bool is_integer = (bool)(false);
	static constexpr bool is_modulo = (bool)(false);
	static constexpr bool is_signed = (bool)(false);
	static constexpr bool is_specialized = (bool)(false);
	static constexpr bool tinyness_before = (bool)(false);
	static constexpr bool traps = (bool)(false);
	static constexpr float_round_style round_style = (float_round_style)(round_toward_zero);
	static constexpr int digits = (int)(0);
	static constexpr int digits10 = (int)(0);

	static constexpr int max_digits10 = (int)(0);

	static constexpr int max_exponent = (int)(0);
	static constexpr int max_exponent10 = (int)(0);
	static constexpr int min_exponent = (int)(0);
	static constexpr int min_exponent10 = (int)(0);
	static constexpr int radix = (int)(0);
	};

		
template<class _Ty>
	class numeric_limits
		: public _Num_base
	{	
public:
	static constexpr _Ty (min)() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty lowest() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (_Ty());
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (_Ty());
		}
	};

template<class _Ty>
	class numeric_limits<const _Ty>
		: public numeric_limits<_Ty>
	{	
	};

template<class _Ty>
	class numeric_limits<volatile _Ty>
		: public numeric_limits<_Ty>
	{	
	};

template<class _Ty>
	class numeric_limits<const volatile _Ty>
		: public numeric_limits<_Ty>
	{	
	};

		
struct _Num_int_base
	: public _Num_base
	{	
	static constexpr bool is_bounded = (bool)(true);
	static constexpr bool is_exact = (bool)(true);
	static constexpr bool is_integer = (bool)(true);
	static constexpr bool is_modulo = (bool)(true);
	static constexpr bool is_specialized = (bool)(true);
	static constexpr int radix = (int)(2);
	};

		
struct _Num_float_base
	: public _Num_base
	{	
	static constexpr float_denorm_style has_denorm = (float_denorm_style)(denorm_present);
	static constexpr bool has_denorm_loss = (bool)(true);
	static constexpr bool has_infinity = (bool)(true);
	static constexpr bool has_quiet_NaN = (bool)(true);
	static constexpr bool has_signaling_NaN = (bool)(true);
	static constexpr bool is_bounded = (bool)(true);
	static constexpr bool is_exact = (bool)(false);
	static constexpr bool is_iec559 = (bool)(true);
	static constexpr bool is_integer = (bool)(false);
	static constexpr bool is_modulo = (bool)(false);
	static constexpr bool is_signed = (bool)(true);
	static constexpr bool is_specialized = (bool)(true);
	static constexpr bool tinyness_before = (bool)(true);
	static constexpr bool traps = (bool)(false);
	static constexpr float_round_style round_style = (float_round_style)(round_to_nearest);
	static constexpr int radix = (int)(2);
	};

		
template<> class numeric_limits<char>
	: public _Num_int_base
	{	
public:
	typedef char _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((-128));
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (127);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)((-128) != 0);
	static constexpr int digits = (int)(8 - ((-128) != 0 ? 1 : 0));
	static constexpr int digits10 = (int)((8 - ((-128) != 0 ? 1 : 0)) * 301L / 1000);
#line 259 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<wchar_t>
	: public _Num_int_base
	{	
public:
	typedef wchar_t _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((_Ty)0x0000);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return ((_Ty)0xffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(0x0000 != 0);
	static constexpr int digits = (int)(8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0));
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	static constexpr int digits10 = (int)((8 * sizeof (wchar_t) - (0x0000 != 0 ? 1 : 0)) * 301L / 1000);
#line 318 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<bool>
	: public _Num_int_base
	{	
public:
	typedef bool _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (false);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (true);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_modulo = (bool)(false);
	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(1);
	static constexpr int digits10 = (int)(0);
	};

		
template<> class numeric_limits<signed char>
	: public _Num_int_base
	{	
public:
	typedef signed char _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((-128));
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (127);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(true);
	static constexpr int digits = (int)(8 - 1);
	static constexpr int digits10 = (int)((8 - 1) * 301L / 1000);
	};

		
template<> class numeric_limits<unsigned char>
	: public _Num_int_base
	{	
public:
	typedef unsigned char _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8);
	static constexpr int digits10 = (int)(8 * 301L / 1000);
	};

		
template<> class numeric_limits<short>
	: public _Num_int_base
	{	
public:
	typedef short _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((-32768));
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (32767);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(true);
	static constexpr int digits = (int)(8 * sizeof (short) - 1);
	static constexpr int digits10 = (int)((8 * sizeof (short) - 1) * 301L / 1000);
#line 548 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

 
		
template<> class numeric_limits<unsigned short>
	: public _Num_int_base
	{	
public:
	typedef unsigned short _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (unsigned short));
	static constexpr int digits10 = (int)(8 * sizeof (unsigned short) * 301L / 1000);
#line 607 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};
 #line 609 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

		
template<> class numeric_limits<char16_t>
	: public _Num_int_base
	{	
public:
	typedef char16_t _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (char16_t));
	static constexpr int digits10 = (int)(8 * sizeof (char16_t) * 301L / 1000);
#line 666 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<int>
	: public _Num_int_base
	{	
public:
	typedef int _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((-2147483647 - 1));
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (2147483647);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(true);
	static constexpr int digits = (int)(8 * sizeof (int) - 1);
	static constexpr int digits10 = (int)((8 * sizeof (int) - 1) * 301L / 1000);
#line 724 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<unsigned int>
	: public _Num_int_base
	{	
public:
	typedef unsigned int _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffffffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (unsigned int));
	static constexpr int digits10 = (int)(8 * sizeof (unsigned int) * 301L / 1000);
#line 782 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<long>
	: public _Num_int_base
	{	
public:
	typedef long _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return ((-2147483647L - 1));
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (2147483647L);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(true);
	static constexpr int digits = (int)(8 * sizeof (long) - 1);
	static constexpr int digits10 = (int)((8 * sizeof (long) - 1) * 301L / 1000);
#line 840 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<unsigned long>
	: public _Num_int_base
	{	
public:
	typedef unsigned long _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffffffffUL);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (unsigned long));
	static constexpr int digits10 = (int)(8 * sizeof (unsigned long) * 301L / 1000);
#line 898 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<char32_t>
	: public _Num_int_base
	{	
public:
	typedef char32_t _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffffffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (char32_t));
	static constexpr int digits10 = (int)(8 * sizeof (char32_t) * 301L / 1000);
#line 956 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<long long>
	: public _Num_int_base
	{	
public:
	typedef long long _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (-0x7fffffffffffffff - 1);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0x7fffffffffffffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(true);
	static constexpr int digits = (int)(8 * sizeof (long long) - 1);
	static constexpr int digits10 = (int)((8 * sizeof (long long) - 1) * 301L / 1000);
#line 1014 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<unsigned long long>
	: public _Num_int_base
	{	
public:
	typedef unsigned long long _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (0);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (0xffffffffffffffff);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return ((min)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (0);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (0);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (0);
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (0);
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (0);
		}

	static constexpr bool is_signed = (bool)(false);
	static constexpr int digits = (int)(8 * sizeof (unsigned long long));
	static constexpr int digits10 = (int)(8 * sizeof (unsigned long long) * 301L / 1000);
#line 1072 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	};

		
template<> class numeric_limits<float>
	: public _Num_float_base
	{	
public:
	typedef float _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (1.175494351e-38F);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (3.402823466e+38F);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return (-(max)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (1.192092896e-07F);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0.5F);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (1.401298464e-45F);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (__builtin_huge_valf());
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (__builtin_nanf("0"));
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (__builtin_nansf("1"));
		}

	static constexpr int digits = (int)(24);
	static constexpr int digits10 = (int)(6);

	static constexpr int max_digits10 = (int)(2 + 24 * 301L / 1000);

	static constexpr int max_exponent = (int)((int)128);
	static constexpr int max_exponent10 = (int)((int)38);
	static constexpr int min_exponent = (int)((int)(-125));
	static constexpr int min_exponent10 = (int)((int)(-37));
	};

		
template<> class numeric_limits<double>
	: public _Num_float_base
	{	
public:
	typedef double _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (2.2250738585072014e-308);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (1.7976931348623158e+308);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return (-(max)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (2.2204460492503131e-016);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0.5);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (4.9406564584124654e-324);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (__builtin_huge_val());
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (__builtin_nan("0"));
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (__builtin_nans("1"));
		}

	static constexpr int digits = (int)(53);
	static constexpr int digits10 = (int)(15);

	static constexpr int max_digits10 = (int)(2 + 53 * 301L / 1000);

	static constexpr int max_exponent = (int)((int)1024);
	static constexpr int max_exponent10 = (int)((int)308);
	static constexpr int min_exponent = (int)((int)(-1021));
	static constexpr int min_exponent10 = (int)((int)(-307));
	};

		
template<> class numeric_limits<long double>
	: public _Num_float_base
	{	
public:
	typedef long double _Ty;

	static constexpr _Ty (min)() noexcept
		{	
		return (2.2250738585072014e-308);
		}

	static constexpr _Ty (max)() noexcept
		{	
		return (1.7976931348623158e+308);
		}

	static constexpr _Ty lowest() noexcept
		{	
		return (-(max)());
		}

	static constexpr _Ty epsilon() noexcept
		{	
		return (2.2204460492503131e-016);
		}

	static constexpr _Ty round_error() noexcept
		{	
		return (0.5L);
		}

	static constexpr _Ty denorm_min() noexcept
		{	
		return (4.9406564584124654e-324);
		}

	static constexpr _Ty infinity() noexcept
		{	
		return (__builtin_huge_val());
		}

	static constexpr _Ty quiet_NaN() noexcept
		{	
		return (__builtin_nan("0"));
		}

	static constexpr _Ty signaling_NaN() noexcept
		{	
		return (__builtin_nans("1"));
		}

	static constexpr int digits = (int)(53);
	static constexpr int digits10 = (int)(15);

	static constexpr int max_digits10 = (int)(2 + 53 * 301L / 1000);

	static constexpr int max_exponent = (int)((int)1024);
	static constexpr int max_exponent10 = (int)((int)308);
	static constexpr int min_exponent = (int)((int)(-1021));
	static constexpr int min_exponent10 = (int)((int)(-307));
	};

  
   
   


  
  
	__declspec(selectany) constexpr float_denorm_style _Num_base::has_denorm;
	__declspec(selectany) constexpr bool _Num_base::has_denorm_loss;
	__declspec(selectany) constexpr bool _Num_base::has_infinity;
	__declspec(selectany) constexpr bool _Num_base::has_quiet_NaN;
	__declspec(selectany) constexpr bool _Num_base::has_signaling_NaN;
	__declspec(selectany) constexpr bool _Num_base::is_bounded;
	__declspec(selectany) constexpr bool _Num_base::is_exact;
	__declspec(selectany) constexpr bool _Num_base::is_iec559;
	__declspec(selectany) constexpr bool _Num_base::is_integer;
	__declspec(selectany) constexpr bool _Num_base::is_modulo;
	__declspec(selectany) constexpr bool _Num_base::is_signed;
	__declspec(selectany) constexpr bool _Num_base::is_specialized;
	__declspec(selectany) constexpr bool _Num_base::tinyness_before;
	__declspec(selectany) constexpr bool _Num_base::traps;
	__declspec(selectany) constexpr float_round_style _Num_base::round_style;
	__declspec(selectany) constexpr int _Num_base::digits;
	__declspec(selectany) constexpr int _Num_base::digits10;

	__declspec(selectany) constexpr int _Num_base::max_digits10;

	__declspec(selectany) constexpr int _Num_base::max_exponent;
	__declspec(selectany) constexpr int _Num_base::max_exponent10;
	__declspec(selectany) constexpr int _Num_base::min_exponent;
	__declspec(selectany) constexpr int _Num_base::min_exponent10;
	__declspec(selectany) constexpr int _Num_base::radix;

  
  
	__declspec(selectany) constexpr bool _Num_int_base::is_bounded;
	__declspec(selectany) constexpr bool _Num_int_base::is_exact;
	__declspec(selectany) constexpr bool _Num_int_base::is_integer;
	__declspec(selectany) constexpr bool _Num_int_base::is_modulo;
	__declspec(selectany) constexpr bool _Num_int_base::is_specialized;
	__declspec(selectany) constexpr int _Num_int_base::radix;

  
  
	__declspec(selectany) constexpr float_denorm_style _Num_float_base::has_denorm;
	__declspec(selectany) constexpr bool _Num_float_base::has_denorm_loss;
	__declspec(selectany) constexpr bool _Num_float_base::has_infinity;
	__declspec(selectany) constexpr bool _Num_float_base::has_quiet_NaN;
	__declspec(selectany) constexpr bool _Num_float_base::has_signaling_NaN;
	__declspec(selectany) constexpr bool _Num_float_base::is_bounded;
	__declspec(selectany) constexpr bool _Num_float_base::is_exact;
	__declspec(selectany) constexpr bool _Num_float_base::is_iec559;
	__declspec(selectany) constexpr bool _Num_float_base::is_integer;
	__declspec(selectany) constexpr bool _Num_float_base::is_modulo;
	__declspec(selectany) constexpr bool _Num_float_base::is_signed;
	__declspec(selectany) constexpr bool _Num_float_base::is_specialized;
	__declspec(selectany) constexpr bool _Num_float_base::tinyness_before;
	__declspec(selectany) constexpr bool _Num_float_base::traps;
	__declspec(selectany) constexpr float_round_style _Num_float_base::round_style;
	__declspec(selectany) constexpr int _Num_float_base::radix;

  
  
	__declspec(selectany) constexpr bool numeric_limits<char>::is_signed;
	__declspec(selectany) constexpr int numeric_limits<char>::digits;
	__declspec(selectany) constexpr int numeric_limits<char>::digits10;
#line 1330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

  
  
	__declspec(selectany) constexpr bool numeric_limits<wchar_t>::is_signed;
	__declspec(selectany) constexpr int numeric_limits<wchar_t>::digits;
#line 1336 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
	__declspec(selectany) constexpr int numeric_limits<wchar_t>::digits10;
#line 1338 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

  
  
	__declspec(selectany) constexpr bool numeric_limits<bool>::is_modulo;
	__declspec(selectany) constexpr bool numeric_limits<bool>::is_signed;
	__declspec(selectany) constexpr int numeric_limits<bool>::digits;
	__declspec(selectany) constexpr int numeric_limits<bool>::digits10;

  
  
	__declspec(selectany) constexpr bool numeric_limits<signed char>::is_signed;
	__declspec(selectany) constexpr int numeric_limits<signed char>::digits;
	__declspec(selectany) constexpr int numeric_limits<signed char>::digits10;

  
  
	__declspec(selectany) constexpr bool numeric_limits<unsigned char>::is_signed;
	__declspec(selectany) constexpr int numeric_limits<unsigned char>::digits;
	__declspec(selectany) constexpr int numeric_limits<unsigned char>::digits10;

  
  
	__declspec(selectany) constexpr bool numeric_limits<short>::is_signed;
	__declspec(selectany) constexpr int numeric_limits<short>::digits;
	__declspec(selectany) constexpr int numeric_limits<short>::digits10;
#line 1364 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

 
  
  
	__declspec(selectany) constexpr bool numeric_limits<unsigned short>::is_signed;
	__declspec(selectany) constexpr int numeric_limits<unsigned short>::digits;
	__declspec(selectany) constexpr int numeric_limits<unsigned short>::digits10;
#line 1372 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
 #line 1373 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

  
  
	__declspec(selectany) constexpr bool numeric_limits<char16_t>::is_signed;
	__declspec(selectany) constexpr int numeric_limits<char16_t>::digits;
	__declspec(selectany) constexpr int numeric_limits<char16_t>::digits10;
#line 1380 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

  
  
	__declspec(selectany) constexpr bool numeric_limits<int>::is_signed;
	__declspec(selectany) constexpr int numeric_limits<int>::digits;
	__declspec(selectany) constexpr int numeric_limits<int>::digits10;
#line 1387 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

  
  
	__declspec(selectany) constexpr bool numeric_limits<unsigned int>::is_signed;
	__declspec(selectany) constexpr int numeric_limits<unsigned int>::digits;
	__declspec(selectany) constexpr int numeric_limits<unsigned int>::digits10;
#line 1394 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

  
  
	__declspec(selectany) constexpr bool numeric_limits<long>::is_signed;
	__declspec(selectany) constexpr int numeric_limits<long>::digits;
	__declspec(selectany) constexpr int numeric_limits<long>::digits10;
#line 1401 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

  
  
	__declspec(selectany) constexpr bool numeric_limits<unsigned long>::is_signed;
	__declspec(selectany) constexpr int numeric_limits<unsigned long>::digits;
	__declspec(selectany) constexpr int numeric_limits<unsigned long>::digits10;
#line 1408 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

  
  
	__declspec(selectany) constexpr bool numeric_limits<char32_t>::is_signed;
	__declspec(selectany) constexpr int numeric_limits<char32_t>::digits;
	__declspec(selectany) constexpr int numeric_limits<char32_t>::digits10;
#line 1415 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

  
  
	__declspec(selectany) constexpr bool numeric_limits<long long>::is_signed;
	__declspec(selectany) constexpr int numeric_limits<long long>::digits;
	__declspec(selectany) constexpr int numeric_limits<long long>::digits10;
#line 1422 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

  
  
	__declspec(selectany) constexpr bool numeric_limits<unsigned long long>::is_signed;
	__declspec(selectany) constexpr int numeric_limits<unsigned long long>::digits;
	__declspec(selectany) constexpr int numeric_limits<unsigned long long>::digits10;
#line 1429 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

  
  
	__declspec(selectany) constexpr int numeric_limits<float>::digits;
	__declspec(selectany) constexpr int numeric_limits<float>::digits10;

	__declspec(selectany) constexpr int numeric_limits<float>::max_digits10;

	__declspec(selectany) constexpr int numeric_limits<float>::max_exponent;
	__declspec(selectany) constexpr int numeric_limits<float>::max_exponent10;
	__declspec(selectany) constexpr int numeric_limits<float>::min_exponent;
	__declspec(selectany) constexpr int numeric_limits<float>::min_exponent10;

  
  
	__declspec(selectany) constexpr int numeric_limits<double>::digits;
	__declspec(selectany) constexpr int numeric_limits<double>::digits10;

	__declspec(selectany) constexpr int numeric_limits<double>::max_digits10;

	__declspec(selectany) constexpr int numeric_limits<double>::max_exponent;
	__declspec(selectany) constexpr int numeric_limits<double>::max_exponent10;
	__declspec(selectany) constexpr int numeric_limits<double>::min_exponent;
	__declspec(selectany) constexpr int numeric_limits<double>::min_exponent10;

  
  
	__declspec(selectany) constexpr int numeric_limits<long double>::digits;
	__declspec(selectany) constexpr int numeric_limits<long double>::digits10;

	__declspec(selectany) constexpr int numeric_limits<long double>::max_digits10;

	__declspec(selectany) constexpr int numeric_limits<long double>::max_exponent;
	__declspec(selectany) constexpr int numeric_limits<long double>::max_exponent10;
	__declspec(selectany) constexpr int numeric_limits<long double>::min_exponent;
	__declspec(selectany) constexpr int numeric_limits<long double>::min_exponent10;
  #line 1466 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"

 
 
 
 

 
 
 
 

 
 
 
 
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1486 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"
#line 1487 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\limits"






#line 9 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"

#pragma once



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

#pragma once






 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {

  


  



  




  


  #line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

__declspec(dllimport) bool __cdecl uncaught_exception() noexcept;
__declspec(dllimport) int __cdecl uncaught_exceptions() noexcept;

}

 


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"







#pragma once


#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_terminate.h"







#pragma once





__pragma(pack(push, 8)) extern "C" {



typedef void (__cdecl* terminate_handler )();
typedef void (__cdecl* terminate_function)();








    __declspec(dllimport) __declspec(noreturn) void __cdecl abort();
    __declspec(dllimport) __declspec(noreturn) void __cdecl terminate() throw();

    

        __declspec(dllimport) terminate_handler __cdecl set_terminate(
              terminate_handler _NewTerminateHandler
            ) throw();

        __declspec(dllimport) terminate_handler __cdecl _get_terminate();

    #line 40 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_terminate.h"

#line 42 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_terminate.h"

} __pragma(pack(pop))

#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\ucrt\\corecrt_terminate.h"
#line 12 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"



__pragma(pack(push, 8)) extern "C" {



typedef void (__cdecl* unexpected_handler )();
typedef void (__cdecl* unexpected_function)();






struct _EXCEPTION_POINTERS;


    
    __declspec(dllimport) __declspec(noreturn) void __cdecl unexpected() throw(...);

    

        __declspec(dllimport) unexpected_handler __cdecl set_unexpected(
              unexpected_handler _NewUnexpectedHandler
            ) throw();

        __declspec(dllimport) unexpected_handler __cdecl _get_unexpected();

        typedef void (__cdecl* _se_translator_function)(unsigned int, struct _EXCEPTION_POINTERS*);

        __declspec(dllimport) _se_translator_function __cdecl _set_se_translator(
              _se_translator_function _NewSETranslator
            );

    #line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"

    class type_info;

    __declspec(dllimport) int __cdecl _is_exception_typeof(
          type_info const&     _Type,
          _EXCEPTION_POINTERS* _ExceptionPtr
        );

    __declspec(dllimport) bool __cdecl __uncaught_exception();
    __declspec(dllimport) int  __cdecl __uncaught_exceptions();

#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"

} __pragma(pack(pop))

#line 64 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\eh.h"
#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"





#pragma pack(push, 8)


__pragma(pack(push, 8)) extern "C" {

struct __std_exception_data
{
    char const* _What;
    bool        _DoFree;
};

__declspec(dllimport) void __cdecl __std_exception_copy(
       __std_exception_data const* _From,
      __std_exception_data*       _To
    );

__declspec(dllimport) void __cdecl __std_exception_destroy(
      __std_exception_data* _Data
    );

} __pragma(pack(pop))



namespace std {

class exception
{
public:

    exception() throw()
        : _Data()
    {
    }

    explicit exception(char const* const _Message) throw()
        : _Data()
    {
        __std_exception_data _InitData = { _Message, true };
        __std_exception_copy(&_InitData, &_Data);
    }

    exception(char const* const _Message, int) throw()
        : _Data()
    {
        _Data._What = _Message;
    }

    exception(exception const& _Other) throw()
        : _Data()
    {
        __std_exception_copy(&_Other._Data, &_Data);
    }

    exception& operator=(exception const& _Other) throw()
    {
        if (this == &_Other)
        {
            return *this;
        }

        __std_exception_destroy(&_Data);
        __std_exception_copy(&_Other._Data, &_Data);
        return *this;
    }

    virtual ~exception() throw()
    {
        __std_exception_destroy(&_Data);
    }

    virtual char const* what() const
    {
        return _Data._What ? _Data._What : "Unknown exception";
    }

private:

    __std_exception_data _Data;
};

class bad_exception
    : public exception
{
public:

    bad_exception() throw()
        : exception("bad exception", 1)
    {
    }
};

class bad_alloc
    : public exception
{
public:

    bad_alloc() throw()
        : exception("bad allocation", 1)
    {
    }

private:

    friend class bad_array_new_length;

    bad_alloc(char const* const _Message) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_array_new_length
    : public bad_alloc
{
public:

    bad_array_new_length() throw()
        : bad_alloc("bad array new length")
    {
    }
};

} 

#line 142 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_exception.h"
#pragma pack(pop)





#line 42 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

namespace std {

using ::set_terminate; using ::terminate_handler; using ::terminate; using ::set_unexpected; using ::unexpected_handler; using ::unexpected;

typedef void (__cdecl *_Prhand)(const exception&);


inline terminate_handler __cdecl get_terminate() noexcept
	{	
	return (_get_terminate());
	}

inline unexpected_handler __cdecl get_unexpected() noexcept
	{	
	return (_get_unexpected());
	}
#line 60 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

}

 




































































































































































#line 229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"









#line 239 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"

__declspec(dllimport) void __cdecl __ExceptionPtrCreate(  void*);
__declspec(dllimport) void __cdecl __ExceptionPtrDestroy(  void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopy(  void*,   const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrAssign(  void*,   const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrCompare(  const void*,   const void*);
__declspec(dllimport) bool __cdecl __ExceptionPtrToBool(  const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrSwap(  void*,   void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCurrentException(  void*);
[[noreturn]] __declspec(dllimport) void __cdecl __ExceptionPtrRethrow(  const void*);
__declspec(dllimport) void __cdecl __ExceptionPtrCopyException(
	  void*,   const void*,   const void*);

namespace std {

class exception_ptr
	{
public:
	exception_ptr() throw ()
		{
		__ExceptionPtrCreate(this);
		}

	exception_ptr(nullptr_t) throw ()
		{
		__ExceptionPtrCreate(this);
		}

	~exception_ptr() throw ()
		{
		__ExceptionPtrDestroy(this);
		}

	exception_ptr(const exception_ptr& _Rhs) throw ()
		{
		__ExceptionPtrCopy(this, &_Rhs);
		}

	exception_ptr& operator=(const exception_ptr& _Rhs) throw ()
		{
		__ExceptionPtrAssign(this, &_Rhs);
		return *this;
		}

	exception_ptr& operator=(nullptr_t) throw ()
		{
		exception_ptr _Ptr;
		__ExceptionPtrAssign(this, &_Ptr);
		return *this;
		}

	explicit operator bool() const throw ()
		{
		return __ExceptionPtrToBool(this);
		}

	[[noreturn]] void _RethrowException() const
		{
		__ExceptionPtrRethrow(this);
		}

	static exception_ptr _Current_exception() throw ()
		{
		exception_ptr _Retval;
		__ExceptionPtrCurrentException(&_Retval);
		return _Retval;
		}

	static exception_ptr _Copy_exception(  void* _Except,   const void* _Ptr)
		{
		exception_ptr _Retval = 0;
		if (!_Ptr)
			{
			
			return _Retval;
			}
		__ExceptionPtrCopyException(&_Retval, _Except, _Ptr);
		return _Retval;
		}

private:
	void* _Data1;
	void* _Data2;
	};

inline void swap(exception_ptr& _Lhs, exception_ptr& _Rhs) throw ()
	{
	__ExceptionPtrSwap(&_Lhs, &_Rhs);
	}

inline bool operator==(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
	{
	return __ExceptionPtrCompare(&_Lhs, &_Rhs);
	}

inline bool operator==(nullptr_t, const exception_ptr& _Rhs) throw ()
	{
	return !_Rhs;
	}

inline bool operator==(const exception_ptr& _Lhs, nullptr_t) throw ()
	{
	return !_Lhs;
	}

inline bool operator!=(const exception_ptr& _Lhs, const exception_ptr& _Rhs) throw ()
	{
	return !(_Lhs == _Rhs);
	}

inline bool operator!=(nullptr_t _Lhs, const exception_ptr& _Rhs) throw ()
	{
	return !(_Lhs == _Rhs);
	}

inline bool operator!=(const exception_ptr& _Lhs, nullptr_t _Rhs) throw ()
	{
	return !(_Lhs == _Rhs);
	}

inline exception_ptr current_exception() noexcept
	{
	return exception_ptr::_Current_exception();
	}

[[noreturn]] inline void rethrow_exception(  exception_ptr _Ptr)
	{
	_Ptr._RethrowException();
	}

template<class _Ex> void *__GetExceptionInfo(_Ex);

template<class _Ex> exception_ptr make_exception_ptr(_Ex _Except) noexcept
	{
	return exception_ptr::_Copy_exception(::std:: addressof(_Except), __GetExceptionInfo(_Except));
	}

	
class nested_exception
	{	
public:
	nested_exception() noexcept
		: _Exc(::std:: current_exception())
		{	
		}

	nested_exception(const nested_exception&) noexcept = default;
	nested_exception& operator=(const nested_exception&) noexcept = default;
	virtual ~nested_exception() noexcept = default;

	[[noreturn]] void rethrow_nested() const
		{	
		if (_Exc)
			::std:: rethrow_exception(_Exc);
		else
			::std:: terminate();
		}

	::std:: exception_ptr nested_ptr() const noexcept
		{	
		return (_Exc);
		}

private:
	::std:: exception_ptr _Exc;
	};

	
template<class _Ty,
	class _Uty>
	struct _With_nested
		: _Uty, nested_exception
	{	
	explicit _With_nested(_Ty&& _Arg)
		: _Uty(::std:: forward<_Ty>(_Arg)), nested_exception()
		{	
		}
	};

template<class _Ty>
	[[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, true_type)
	{	
	typedef typename remove_reference<_Ty>::type _Uty;
	typedef _With_nested<_Ty, _Uty> _Glued;

	throw _Glued(::std:: forward<_Ty>(_Arg));
	}

template<class _Ty>
	[[noreturn]] inline void _Throw_with_nested(_Ty&& _Arg, false_type)
	{	
	typedef typename decay<_Ty>::type _Decayed;

	throw _Decayed(::std:: forward<_Ty>(_Arg));
	}

template<class _Ty>
	[[noreturn]] inline void throw_with_nested(_Ty&& _Arg)
	{	
	typedef typename remove_reference<_Ty>::type _Uty;

	integral_constant<bool,
		is_class<_Uty>::value
		&& !is_base_of<nested_exception, _Uty>::value
		&& !is_final<_Uty>::value> _Tag;

	_Throw_with_nested(::std:: forward<_Ty>(_Arg), _Tag);
	}

	
template<class _Ty> inline
	void _Rethrow_if_nested(const _Ty *_Ptr, true_type)
	{	
	const auto _Nested = dynamic_cast<const nested_exception *>(_Ptr);

	if (_Nested)
		_Nested->rethrow_nested();
	}

template<class _Ty> inline
	void _Rethrow_if_nested(const _Ty *, false_type)
	{	
	}

template<class _Ty> inline
	void rethrow_if_nested(const _Ty& _Arg)
	{	
	integral_constant<bool,
		is_polymorphic<_Ty>::value
		&& (!is_base_of<nested_exception, _Ty>::value
			|| is_convertible<_Ty *, nested_exception *>::value)> _Tag;

	_Rethrow_if_nested(::std:: addressof(_Arg), _Tag);
	}
}

 
 #pragma warning(pop)
 #pragma pack(pop)

#line 480 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"
#line 481 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\exception"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"


 #pragma pack(push,8)
 #pragma warning(push,3)
 

  



namespace std {

		
 

typedef void (__cdecl * new_handler) ();
 #line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"

		
__declspec(dllimport) new_handler __cdecl set_new_handler(  new_handler)
	noexcept;	

__declspec(dllimport) new_handler __cdecl get_new_handler()
	noexcept;	
}

 
 #pragma warning(pop)
 #pragma pack(pop)

#line 38 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"
#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\new"





#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"


 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 
  
 #line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

 #pragma warning(disable: 4100)

namespace std {



 




 #line 33 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

 









		
inline
	__declspec(allocator) void *_Allocate(size_t _Count, size_t _Sz,
		bool _Try_aligned_allocation = true)
	{	
	void *_Ptr = 0;

	if (_Count == 0)
		return (_Ptr);

	
	if ((size_t)(-1) / _Sz < _Count)
		_Xbad_alloc();	
	const size_t _User_size = _Count * _Sz;

 
	if (_Try_aligned_allocation
		&& 4096 <= _User_size)
		{	
		static_assert(sizeof (void *) < 32,
			"Big allocations should at least match vector register size");
		const size_t _Block_size = (sizeof(void *) + 32 - 1) + _User_size;
		if (_Block_size <= _User_size)
			_Xbad_alloc();	
		const uintptr_t _Ptr_container =
			reinterpret_cast<uintptr_t>(::operator new(_Block_size));
		{ if (!(_Ptr_container != 0)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		_Ptr = reinterpret_cast<void *>((_Ptr_container + (sizeof(void *) + 32 - 1))
			& ~(32 - 1));
		static_cast<uintptr_t *>(_Ptr)[-1] = _Ptr_container;

 


		}
	else
 #line 81 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		{	
		_Ptr = ::operator new(_User_size);
		{ if (!(_Ptr != 0)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
		}
	return (_Ptr);
	}

		
inline
	void _Deallocate(void * _Ptr, size_t _Count, size_t _Sz)
	{	
 
	{ if (!(_Count <= (size_t)(-1) / _Sz)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
	const size_t _User_size = _Count * _Sz;
	if (4096 <= _User_size)
		{	
		const uintptr_t _Ptr_user = reinterpret_cast<uintptr_t>(_Ptr);
		{ if (!((_Ptr_user & (32 - 1)) == 0)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
#line 101 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
		const uintptr_t _Ptr_ptr = _Ptr_user - sizeof(void *);
		const uintptr_t _Ptr_container =
			*reinterpret_cast<uintptr_t *>(_Ptr_ptr);

 







		
		{ if (!(_Ptr_container < _Ptr_user)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };

 




		{ if (!(sizeof(void *) <= _Ptr_user - _Ptr_container)) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
#line 123 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
 #line 124 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		{ if (!(_Ptr_user - _Ptr_container <= (sizeof(void *) + 32 - 1))) { ((void)0); ::_invalid_parameter_noinfo_noreturn(); } ; };
#line 127 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		_Ptr = reinterpret_cast<void *>(_Ptr_container);
		}
 #line 131 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

	::operator delete(_Ptr);
	}

		
template<class _Ty1,
	class _Ty2> inline
	void _Construct(_Ty1 *_Ptr, _Ty2&& _Val)
	{	
	void *_Vptr = _Ptr;
	::new (_Vptr) _Ty1(::std:: forward<_Ty2>(_Val));
	}

template<class _Ty1> inline
	void _Construct(_Ty1 *_Ptr)
	{	
	void *_Vptr = _Ptr;

	::new (_Vptr) _Ty1();
	}

		
template<class _Alty>
	struct _Is_simple_alloc
		: _Cat_base<is_same<typename _Alty::size_type, size_t>::value
		&& is_same<typename _Alty::difference_type, ptrdiff_t>::value
		&& is_same<typename _Alty::pointer,
			typename _Alty::value_type *>::value
		&& is_same<typename _Alty::const_pointer,
			const typename _Alty::value_type *>::value
		&& is_same<typename _Alty::reference,
			typename _Alty::value_type&>::value
		&& is_same<typename _Alty::const_reference,
			const typename _Alty::value_type&>::value>
	{	
	};

		
template<class _Value_type>
	struct _Simple_types
	{	
	typedef _Value_type value_type;
	typedef size_t size_type;
	typedef ptrdiff_t difference_type;
	typedef value_type *pointer;
	typedef const value_type *const_pointer;
	typedef value_type& reference;
	typedef const value_type& const_reference;
	};

		
template<class _Alty,
	class _Pointer>
	struct _Get_voidptr
	{	
	typedef typename _Alty::template rebind<void>::other _Alvoid;
	typedef typename _Alvoid::pointer type;
	};

template<class _Alty,
	class _Ty>
	struct _Get_voidptr<_Alty, _Ty *>
	{	
	typedef void *type;
	};

		
template<class _Ty>
	struct _Get_first_parameter;

template<template<class, class...> class _Ty,
	class _First,
	class... _Rest>
	struct _Get_first_parameter<_Ty<_First, _Rest...> >
	{	
	typedef _First type;
	};

		
template<class _Newfirst,
	class _Ty>
	struct _Replace_first_parameter;

template<class _Newfirst,
	template<class, class...> class _Ty,
	class _First,
	class... _Rest>
	struct _Replace_first_parameter<_Newfirst, _Ty<_First, _Rest...> >
	{	
	typedef _Ty<_Newfirst, _Rest...> type;
	};

		
template<class _Ty>
	struct _Get_element_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::element_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_first_parameter<_Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_ptr_difference_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<ptrdiff_t>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 234 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty,
	class _Other>
	struct _Get_rebind_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::template rebind<_Other>::other>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Replace_first_parameter<_Other , _Uty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 241 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct pointer_traits
	{	
	typedef typename _Get_element_type<_Ty>::type element_type;
	typedef _Ty pointer;
	typedef typename _Get_ptr_difference_type<_Ty>::type difference_type;

	template<class _Other>
		using rebind = typename _Get_rebind_type<_Ty, _Other>::type;

	typedef typename _If<is_void<element_type>::value,
		char&,
		typename add_lvalue_reference<element_type>::type>::type _Reftype;

	static pointer pointer_to(_Reftype _Val)
		{	
		return (_Ty::pointer_to(_Val));
		}
	};

		
template<class _Ty>
	struct pointer_traits<_Ty *>
	{	
	typedef _Ty element_type;
	typedef _Ty *pointer;
	typedef ptrdiff_t difference_type;

	template<class _Other>
		using rebind = _Other *;

	typedef typename _If<is_void<_Ty>::value,
		char&,
		typename add_lvalue_reference<_Ty>::type>::type _Reftype;

	static pointer pointer_to(_Reftype _Val)
		{	
		return (::std:: addressof(_Val));
		}
	};


		
template<class _Ptrty> inline
	void _Destroy(_Ptrty _Ptr)
	{	
	typedef typename pointer_traits<_Ptrty>::element_type _Ty;
	_Ptr->~_Ty();
	}

		
template<class _Ptrty> inline
	auto _Const_cast(_Ptrty _Ptr)
	{	
	using _Elem = typename pointer_traits<_Ptrty>::element_type;
	using _Modifiable = remove_const_t<_Elem>;
	using _Dest = typename pointer_traits<_Ptrty>::template rebind<_Modifiable>;

	return (pointer_traits<_Dest>::pointer_to(const_cast<_Modifiable&>(*_Ptr)));
	}

template<class _Ty> inline
	auto _Const_cast(_Ty * _Ptr)
	{	
	return (const_cast<remove_const_t<_Ty> *>(_Ptr));
	}


		
template<class _Ty>
	struct _Get_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Ty::value_type *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 316 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_const_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const typename _Ty::value_type>>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 323 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_void_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<void>>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 330 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_const_void_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::const_void_pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename pointer_traits<typename _Get_pointer_type<_Ty>::type> ::template rebind<const void>>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 337 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_difference_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::difference_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename _Get_ptr_difference_type< typename _Get_pointer_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 344 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_size_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::size_type>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename make_unsigned< typename _Get_difference_type<_Ty>::type>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 351 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_propagate_on_container_copy
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_copy_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 357 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_propagate_on_container_move
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_move_assignment>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 363 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_propagate_on_container_swap
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::propagate_on_container_swap>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<false_type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 369 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	struct _Get_is_always_equal
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::is_always_equal>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<typename is_empty<_Ty>::type>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 375 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

		
template<class _Ty>
	class allocator;
template<class _Alloc>
	struct _Wrap_alloc;

template<class _Alloc>
	struct _Unwrap_alloc
	{	
	typedef _Alloc type;
	};

template<class _Alloc>
	struct _Unwrap_alloc<_Wrap_alloc<_Alloc>>
	{	
	typedef _Alloc type;
	};


		
template<class _Alloc>
	using _Unwrap_alloc_t = typename _Unwrap_alloc<_Alloc>::type;


		
template<class _Alloc,
	class = void>
	struct _Is_default_allocator
		: false_type
	{	
	};

template<class _Ty>
	struct _Is_default_allocator<allocator<_Ty>, typename allocator<_Ty>::_Not_user_specialized>
		: true_type
	{	
	};

		
struct _Alloc_allocate
	{	
		

	template<class _Alloc,
		class _Size_type,
		class _Const_void_pointer>
		static auto _Fn(int, _Alloc& _Al,
			_Size_type _Count,
			_Const_void_pointer _Hint)
			-> decltype(_Al.allocate(_Count, _Hint))
		{	
		return (_Al.allocate(_Count, _Hint));
		}

	template<class _Alloc,
		class _Size_type,
		class _Const_void_pointer>
		static auto _Fn(_Wrap_int, _Alloc& _Al,
			_Size_type _Count,
			_Const_void_pointer)
			-> decltype(_Al.allocate(_Count))
		{	
		return (_Al.allocate(_Count));
		}
	};

		
struct _Has_no_alloc_construct_tag
	{	
	};

template<class _Void,
	class... _Types>
	struct _Has_no_alloc_construct
		: true_type
	{	
	};

template<class _Alloc,
	class _Ptr,
	class... _Args>
	struct _Has_no_alloc_construct<
		void_t<
			_Has_no_alloc_construct_tag,	
			decltype(::std:: declval<_Alloc&>().construct(::std:: declval<_Ptr>(), ::std:: declval<_Args>()...))>,
		_Alloc, _Ptr, _Args...>
		: false_type
	{	
	};

template<class _Alloc,
	class _Ptr,
	class... _Args>
	using _Uses_default_construct = disjunction<
		_Is_default_allocator<_Alloc>,
		_Has_no_alloc_construct<void, _Alloc, _Ptr, _Args...>>;

template<class _Alloc,
	class _Ptr,
	class... _Args>
	using _Uses_default_construct_t = typename _Uses_default_construct<_Alloc, _Ptr, _Args...>::type;


		
struct _Has_no_alloc_destroy_tag
	{	
	};

template<class _Alloc,
	class _Ptr,
	class = void>
	struct _Has_no_alloc_destroy
		: true_type
	{	
	};

template<class _Alloc,
	class _Ptr>
	struct _Has_no_alloc_destroy<_Alloc, _Ptr, void_t<
			_Has_no_alloc_destroy_tag,	
			decltype(::std:: declval<_Alloc&>().destroy(::std:: declval<_Ptr>()))>>
		: false_type
	{	
	};

template<class _Alloc,
	class _Ptr>
	using _Uses_default_destroy = disjunction<
		_Is_default_allocator<_Alloc>,
		_Has_no_alloc_destroy<_Alloc, _Ptr>>;

template<class _Alloc,
	class _Ptr>
	using _Uses_default_destroy_t = typename _Uses_default_destroy<_Alloc, _Ptr>::type;


		
struct _Alloc_max_size
	{	
	template<class _Ty>
		static auto _Fn(int, const _Ty& _Al) noexcept
			-> decltype(_Al.max_size())
		{	
		return (_Al.max_size());
		}

	template<class _Ty>
		static auto _Fn(_Wrap_int, const _Ty&) noexcept
			-> typename _Get_size_type<_Ty>::type
		{	
		return ((numeric_limits<typename _Get_size_type<_Ty>::type>::max)()
			/ sizeof(typename _Ty::value_type));
		}
	};

		
struct _Alloc_select
	{	
		

	template<class _Ty>
		static auto _Fn(int, const _Ty& _Al)
			-> decltype((_Ty)_Al.select_on_container_copy_construction())
		{	
		return (_Al.select_on_container_copy_construction());
		}

	template<class _Ty>
		static auto _Fn(_Wrap_int, const _Ty& _Al)
			-> _Ty
		{	
		return (_Al);
		}
	};

		
template<class _Alloc>
	struct allocator_traits
	{	
	typedef _Alloc allocator_type;
	typedef typename _Alloc::value_type value_type;

	typedef typename _Get_pointer_type<_Alloc>::type
		pointer;
	typedef typename _Get_const_pointer_type<_Alloc>::type
		const_pointer;
	typedef typename _Get_void_pointer_type<_Alloc>::type
		void_pointer;
	typedef typename _Get_const_void_pointer_type<_Alloc>::type
		const_void_pointer;

	typedef typename _Get_size_type<_Alloc>::type size_type;
	typedef typename _Get_difference_type<_Alloc>::type difference_type;

	typedef typename _Get_propagate_on_container_copy<_Alloc>::type
		propagate_on_container_copy_assignment;
	typedef typename _Get_propagate_on_container_move<_Alloc>::type
		propagate_on_container_move_assignment;
	typedef typename _Get_propagate_on_container_swap<_Alloc>::type
		propagate_on_container_swap;
	typedef typename _Get_is_always_equal<_Alloc>::type
		is_always_equal;

	template<class _Other>
		using rebind_alloc = typename _Get_rebind_type<_Alloc, _Other>::type;

	template<class _Other>
		using rebind_traits = allocator_traits<rebind_alloc<_Other> >;

	static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count)
		{	
		return (_Al.allocate(_Count));
		}

	static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count,
		const_void_pointer _Hint)
		{	
		return (_Alloc_allocate::_Fn(0, _Al, _Count, _Hint));
		}

	static void deallocate(_Alloc& _Al,
		pointer _Ptr, size_type _Count)
		{	
		_Al.deallocate(_Ptr, _Count);
		}

	template<class _Ty,
		class... _Types>
		static void _Construct1(true_type, _Alloc&, _Ty *_Ptr,
			_Types&&... _Args)
		{	
		::new (static_cast<void *>(_Ptr))
			_Ty(::std:: forward<_Types>(_Args)...);
		}

	template<class _Ty,
		class... _Types>
		static void _Construct1(false_type, _Alloc& _Al, _Ty *_Ptr,
			_Types&&... _Args)
		{	
		_Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
		}

	template<class _Ty,
		class... _Types>
		static void construct(_Alloc& _Al, _Ty *_Ptr,
			_Types&&... _Args)
		{	
		_Construct1(_Uses_default_construct_t<_Unwrap_alloc_t<_Alloc>, _Ty *, _Types...>(),
			_Al, _Ptr, ::std:: forward<_Types>(_Args)...);
		}

	template<class _Ty>
		static void _Destroy1(_Alloc&, _Ty *_Ptr, true_type)
		{	
		_Ptr->~_Ty();
		}

	template<class _Ty>
		static void _Destroy1(_Alloc& _Al, _Ty *_Ptr, false_type)
		{	
		_Al.destroy(_Ptr);
		}

	template<class _Ty>
		static void destroy(_Alloc& _Al, _Ty *_Ptr)
		{	
		_Destroy1(_Al, _Ptr, _Uses_default_destroy_t<_Unwrap_alloc_t<_Alloc>, _Ty *>());
		}

	static size_type max_size(const _Alloc& _Al) noexcept
		{	
		return (_Alloc_max_size::_Fn(0, _Al));
		}

	static _Alloc select_on_container_copy_construction(
		const _Alloc& _Al)
		{	
		return (_Alloc_select::_Fn(0, _Al));
		}
	};

		
template<class _Ty>
	class allocator
	{	
public:
	static_assert(!is_const<_Ty>::value,
		"The C++ Standard forbids containers of const elements "
		"because allocator<const T> is ill-formed.");

	typedef void _Not_user_specialized;

	typedef _Ty value_type;

	typedef value_type *pointer;
	typedef const value_type *const_pointer;

	typedef value_type& reference;
	typedef const value_type& const_reference;

	typedef size_t size_type;
	typedef ptrdiff_t difference_type;

	typedef true_type propagate_on_container_move_assignment;
	typedef true_type is_always_equal;

	template<class _Other>
		struct rebind
		{	
		typedef allocator<_Other> other;
		};

	pointer address(reference _Val) const noexcept
		{	
		return (::std:: addressof(_Val));
		}

	const_pointer address(const_reference _Val) const noexcept
		{	
		return (::std:: addressof(_Val));
		}

	allocator() noexcept
		{	
		}

	allocator(const allocator<_Ty>&) noexcept
		{	
		}

	template<class _Other>
		allocator(const allocator<_Other>&) noexcept
		{	
		}

	template<class _Other>
		allocator<_Ty>& operator=(const allocator<_Other>&)
		{	
		return (*this);
		}

	void deallocate(pointer _Ptr, size_type _Count)
		{	
		_Deallocate(_Ptr, _Count, sizeof (_Ty));
		}

	__declspec(allocator) pointer allocate(size_type _Count)
		{	
		return (static_cast<pointer>(_Allocate(_Count, sizeof (_Ty))));
		}

	__declspec(allocator) pointer allocate(size_type _Count, const void *)
		{	
		return (allocate(_Count));
		}

	template<class _Objty,
		class... _Types>
		void construct(_Objty *_Ptr, _Types&&... _Args)
		{	
		::new ((void *)_Ptr) _Objty(::std:: forward<_Types>(_Args)...);
		}


	template<class _Uty>
		void destroy(_Uty *_Ptr)
		{	
		_Ptr->~_Uty();
		}

	size_t max_size() const noexcept
		{	
		return ((size_t)(-1) / sizeof (_Ty));
		}
	};

		
template<>
	class allocator<void>
	{	
public:
	typedef void _Not_user_specialized;

	typedef void value_type;

	typedef void *pointer;
	typedef const void *const_pointer;

	template<class _Other>
		struct rebind
		{	
		typedef allocator<_Other> other;
		};

	allocator() noexcept
		{	
		}

	allocator(const allocator<void>&) noexcept
		{	
		}

	template<class _Other>
		allocator(const allocator<_Other>&) noexcept
		{	
		}

	template<class _Other>
		allocator<void>& operator=(const allocator<_Other>&)
		{	
		return (*this);
		}
	};

template<class _Ty,
	class _Other> inline
	bool operator==(const allocator<_Ty>&,
		const allocator<_Other>&) noexcept
	{	
	return (true);
	}

template<class _Ty,
	class _Other> inline
	bool operator!=(const allocator<_Ty>& _Left,
		const allocator<_Other>& _Right) noexcept
	{	
	return (false);
	}

		
template<class _Ty>
	struct allocator_traits<allocator<_Ty> >
	{	
	typedef allocator<_Ty> _Alloc;

	typedef _Alloc allocator_type;
	typedef _Ty value_type;

	typedef value_type *pointer;
	typedef const value_type *const_pointer;
	typedef void *void_pointer;
	typedef const void *const_void_pointer;

	typedef size_t size_type;
	typedef ptrdiff_t difference_type;

	typedef false_type propagate_on_container_copy_assignment;
	typedef true_type propagate_on_container_move_assignment;
	typedef false_type propagate_on_container_swap;
	typedef true_type is_always_equal;

	template<class _Other>
		using rebind_alloc = allocator<_Other>;

	template<class _Other>
		using rebind_traits = allocator_traits<allocator<_Other> >;

	static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count)
		{	
		return (_Al.allocate(_Count));
		}

	static __declspec(allocator) pointer allocate(_Alloc& _Al, size_type _Count,
		const_void_pointer _Hint)
		{	
		return (_Al.allocate(_Count, _Hint));
		}

	static void deallocate(_Alloc& _Al,
		pointer _Ptr, size_type _Count)
		{	
		_Al.deallocate(_Ptr, _Count);
		}

	template<class _Objty,
		class... _Types>
		static void construct(_Alloc& _Al, _Objty *_Ptr,
			_Types&&... _Args)
		{	
		_Al.construct(_Ptr, ::std:: forward<_Types>(_Args)...);
		}


	template<class _Uty>
		static void destroy(_Alloc& _Al, _Uty *_Ptr)
		{	
		_Al.destroy(_Ptr);
		}

	static size_type max_size(const _Alloc& _Al) noexcept
		{	
		return (_Al.max_size());
		}

	static _Alloc select_on_container_copy_construction(
		const _Alloc& _Al)
		{	
		return (_Al);
		}
	};

		
template<class _Alloc>
	struct _Wrap_alloc
		: public _Alloc
	{	
	typedef _Alloc _Mybase;
	typedef allocator_traits<_Alloc> _Mytraits;

	typedef typename _Mytraits::value_type value_type;

	typedef typename _Mytraits::pointer pointer;
	typedef typename _Mytraits::const_pointer const_pointer;
	typedef typename _Mytraits::void_pointer void_pointer;
	typedef typename _Mytraits::const_void_pointer const_void_pointer;

	typedef typename _If<is_void<value_type>::value,
		int, value_type>::type& reference;
	typedef typename _If<is_void<const value_type>::value,
		const int, const value_type>::type& const_reference;

	typedef typename _Mytraits::size_type size_type;
	typedef typename _Mytraits::difference_type difference_type;

	typedef typename _Mytraits::propagate_on_container_copy_assignment
		propagate_on_container_copy_assignment;
	typedef typename _Mytraits::propagate_on_container_move_assignment
		propagate_on_container_move_assignment;
	typedef typename _Mytraits::propagate_on_container_swap
		propagate_on_container_swap;
	typedef typename _Mytraits::is_always_equal
		is_always_equal;

	_Wrap_alloc select_on_container_copy_construction(_Nil = _Nil()) const
		{	
		return (_Mytraits::select_on_container_copy_construction(*this));
		}

	template<class _Other>
		struct rebind
		{	
		typedef typename _Mytraits::template rebind_alloc<_Other>
			_Other_alloc;
		typedef _Wrap_alloc<_Other_alloc> other;
		};

	pointer address(reference _Val) const
		{	
		return (pointer_traits<pointer>::pointer_to(_Val));
		}

	const_pointer address(const_reference _Val) const
		{	
		return (pointer_traits<const_pointer>::pointer_to(_Val));
		}

	_Wrap_alloc() noexcept(is_nothrow_default_constructible<_Alloc>::value)
		: _Mybase()
		{	
		}

	_Wrap_alloc(const _Wrap_alloc& _Right) noexcept
		: _Mybase(_Right)
		{	
		}

	_Wrap_alloc(_Wrap_alloc&& _Right) noexcept
		: _Mybase(::std:: move(_Right))
		{	
		}

	template<class _Other>
		_Wrap_alloc(_Other&& _Right) noexcept
		: _Mybase(::std:: forward<_Other>(_Right))
		{	
		}

	_Wrap_alloc& operator=(const _Wrap_alloc& _Right)
		{	
		_Mybase::operator=(_Right);
		return (*this);
		}

	_Wrap_alloc& operator=(_Wrap_alloc&& _Right)
		{	
		_Mybase::operator=(::std:: move(_Right));
		return (*this);
		}

	template<class _Other>
		_Wrap_alloc& operator=(_Other&& _Right)
		{	
		_Mybase::operator=(::std:: forward<_Other>(_Right));
		return (*this);
		}

	__declspec(allocator) pointer allocate(size_type _Count)
		{	
		return (_Mybase::allocate(_Count));
		}

	__declspec(allocator) pointer allocate(size_type _Count,
		const_void_pointer _Hint, _Nil = _Nil())
		{	
		return (_Mytraits::allocate(*this, _Count, _Hint));
		}

	void deallocate(pointer _Ptr, size_type _Count)
		{	
		_Mybase::deallocate(_Ptr, _Count);
		}

	template<class _Ty,
		class... _Types>
		void construct(_Ty *_Ptr,
			_Types&&... _Args)
		{	
		_Mytraits::construct(*this, _Ptr,
			::std:: forward<_Types>(_Args)...);
		}


	template<class _Ty>
		void destroy(_Ty *_Ptr)
		{	
		_Mytraits::destroy(*this, _Ptr);
		}

	size_type max_size(_Nil = _Nil()) const noexcept
		{	
		return (_Mytraits::max_size(*this));
		}
	};

template<class _Ty,
	class _Other> inline
	bool operator==(const _Wrap_alloc<_Ty>& _Left,
		const _Wrap_alloc<_Other>& _Right) noexcept
	{	
	return (static_cast<const _Ty&>(_Left)
		== static_cast<const _Other&>(_Right));
	}

template<class _Ty,
	class _Other> inline
	bool operator!=(const _Wrap_alloc<_Ty>& _Left,
		const _Wrap_alloc<_Other>& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

		
template<class _Alty> inline
	void _Pocca(_Alty& _Left, const _Alty& _Right, true_type) noexcept
	{	
	_Left = _Right;
	}

template<class _Alty> inline
	void _Pocca(_Alty&, const _Alty&, false_type) noexcept
	{	
	}

template<class _Alty> inline
	void _Pocca(_Alty& _Left, const _Alty& _Right) noexcept
	{	
	typename _Alty::propagate_on_container_copy_assignment _Tag;
	_Pocca(_Left, _Right, _Tag);
	}

		
template<class _Alty> inline
	void _Pocma(_Alty& _Left, _Alty& _Right, true_type) noexcept
	{	
	_Left = ::std:: move(_Right);
	}

template<class _Alty> inline
	void _Pocma(_Alty&, _Alty&, false_type) noexcept
	{	
	}

template<class _Alty> inline
	void _Pocma(_Alty& _Left, _Alty& _Right) noexcept
	{	
	typename _Alty::propagate_on_container_move_assignment _Tag;
	_Pocma(_Left, _Right, _Tag);
	}

		
template<class _Alty> inline
	void _Pocs(_Alty& _Left, _Alty& _Right, true_type) noexcept
	{	
	_Swap_adl(_Left, _Right);
	}

template<class _Alty> inline
	void _Pocs(_Alty& _Left, _Alty& _Right, false_type) noexcept
	{	
	if (_Left != _Right)
		{	
 

#line 1082 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
		::std:: terminate();
 #line 1084 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
		}
	}

template<class _Alty> inline
	void _Pocs(_Alty& _Left, _Alty& _Right) noexcept
	{	
	typename _Alty::propagate_on_container_swap _Tag;
	_Pocs(_Left, _Right, _Tag);
	}


		
template<class _Alloc,
	class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
	void _Destroy_range1(_Ptr _First, _Ptr _Last, _Wrap_alloc<_Alloc>& _Al, false_type)
	{	
	for (; _First != _Last; ++_First)
		_Al.destroy(_Unfancy(_First));
	}

template<class _Alloc,
	class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
	void _Destroy_range1(_Ptr, _Ptr, _Wrap_alloc<_Alloc>&, true_type)
	{	
		
	}

template<class _Alloc,
	class _Ptr = typename _Wrap_alloc<_Alloc>::pointer> inline
	void _Destroy_range(_Ptr _First, _Ptr _Last, _Wrap_alloc<_Alloc>& _Al)
	{	
		
		
	typedef typename _Alloc::value_type _Val;
	_Destroy_range1(_First, _Last, _Al, typename conjunction<
		is_trivially_destructible<_Val>,
		_Uses_default_destroy<_Alloc, _Val *>>::type());
	}


		
template<class _FwdIt> inline
	void _Destroy_range1(_FwdIt _First, _FwdIt _Last, false_type)
	{	
	for (; _First != _Last; ++_First)
		_Destroy(_First);
	}

template<class _FwdIt> inline
	void _Destroy_range1(_FwdIt, _FwdIt, true_type)
	{	
		
	}

template<class _FwdIt> inline
	void _Destroy_range(_FwdIt _First, _FwdIt _Last)
	{	
		
		
	_Destroy_range1(_First, _Last, is_trivially_destructible<_Iter_value_t<_FwdIt>>());
	}
}

		
  

  
   

   

   


  






#line 1166 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1171 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"
#line 1172 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory0"






#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory"

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 4700)

namespace std {
		
template<class _Ty> inline
	pair<_Ty *, ptrdiff_t>
		get_temporary_buffer(ptrdiff_t _Count) noexcept
	{	
	_Ty *_Pbuf;

	if (_Count < 0)
		_Count = 0;
	else if (((size_t)(-1) / sizeof (_Ty) < _Count))
		_Xbad_alloc();	
	for (_Pbuf = 0; 0 < _Count; _Count /= 2)
		if ((_Pbuf = (_Ty *)operator new(
			(size_t)_Count * sizeof (_Ty), nothrow)) != 0)
			break;

	return (pair<_Ty *, ptrdiff_t>(_Pbuf, _Count));
	}

		
template<class _Ty> inline
	void return_temporary_buffer(_Ty *_Pbuf)
	{	
	operator delete(_Pbuf);
	}

		
template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_unchecked1(_InIt _First, _InIt _Last,
		_FwdIt _Dest, _General_ptr_iterator_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	for (; _First != _Last; ++_Dest, (void)++_First)
		_Construct(_Unfancy(_Dest), *_First);
	} catch (...) {
	_Destroy_range(_Next, _Dest);
	throw;
	}

	return (_Dest);
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_unchecked1(_InIt _First, _InIt _Last,
		_FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_unchecked(_InIt _First, _InIt _Last,
		_FwdIt _Dest)
	{	
	return (_Uninitialized_copy_unchecked1(_First, _Last,
		_Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy1(_InIt _First, _InIt _Last,
		_FwdIt _Dest, input_iterator_tag, forward_iterator_tag)
	{	
	return (_Rechecked(_Dest,
		_Uninitialized_copy_unchecked(_First, _Last, _Unchecked_idl0(_Dest))));
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy1(_InIt _First, _InIt _Last,
		_FwdIt _Dest, random_access_iterator_tag, random_access_iterator_tag)
	{	
	;
	return (_Rechecked(_Dest,
		_Uninitialized_copy_unchecked(_First, _Last, _Unchecked(_Dest))));
	}

template<class _InIt,
	class _FwdIt> inline
	_FwdIt uninitialized_copy(_InIt _First, _InIt _Last,
		_FwdIt _Dest)
	{	
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	;
	return (_Uninitialized_copy1(_Unchecked(_First), _Unchecked(_Last),
		_Dest, _Iter_cat_t<_InIt>(), _Iter_cat_t<_FwdIt>()));
	}

 










#line 120 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory"

		
template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n_unchecked1(_InIt _First, _Diff _Count,
		_FwdIt _Dest, _General_ptr_iterator_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	for (; 0 < _Count; --_Count, (void)++_Dest, ++_First)
		_Construct(_Unfancy(_Dest), *_First);
	} catch (...) {
	_Destroy_range(_Next, _Dest);
	throw;
	}

	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n_unchecked1(_InIt _First, _Diff _Count,
		_FwdIt _Dest, _Really_trivial_ptr_iterator_tag)
	{	
	if (0 < _Count)
		return (_Copy_memmove(_First, _First + _Count, _Dest));
	return (_Dest);
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt _Uninitialized_copy_n_unchecked(_InIt _First, _Diff _Count,
		_FwdIt _Dest)
	{	
	return (_Uninitialized_copy_n_unchecked1(_First, _Count,
		_Dest, _Ptr_copy_cat(_First, _Dest)));
	}

template<class _InIt,
	class _Diff,
	class _FwdIt> inline
	_FwdIt uninitialized_copy_n(_InIt _First, _Diff _Count,
		_FwdIt _Dest)
	{	
		
	struct _Unchecked_iterators { static void  _Deprecate(false_type) { } static void _Deprecate(true_type) { } }; (_Unchecked_iterators::_Deprecate(_Is_checked(_Dest)));
	return (_Rechecked(_Dest,
		_Uninitialized_copy_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Unchecked_n(_Dest, _Count))));
	}

 





































#line 213 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory"

		
template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_copy_al_unchecked1(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Wrap_alloc<_Alloc>& _Al, _General_ptr_iterator_tag, _Any_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	for (; _First != _Last; ++_Dest, (void)++_First)
		_Al.construct(_Unfancy(_Dest), *_First);
	} catch (...) {
	_Destroy_range(_Next, _Dest, _Al);
	throw;
	}

	return (_Dest);
	}

template<class _Ty1,
	class _Ty2,
	class _Alloc> inline
	_Ty2 *_Uninitialized_copy_al_unchecked1(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
		_Wrap_alloc<_Alloc>&, _Really_trivial_ptr_iterator_tag, true_type)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_copy_al_unchecked(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Wrap_alloc<_Alloc>& _Al)
	{	
	return (_Uninitialized_copy_al_unchecked1(_First, _Last, _Dest, _Al,
		_Ptr_copy_cat(_First, _Dest),
		_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), decltype(*_First)>()));
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_copy(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Wrap_alloc<_Alloc>& _Al)
	{	
		
		
	return (_Rechecked(_Dest,
		_Uninitialized_copy_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest), _Al)));
	}

		
template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_move_al_unchecked1(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Wrap_alloc<_Alloc>& _Al, _General_ptr_iterator_tag, _Any_tag)
	{	
	_FwdIt _Next = _Dest;

	try {
	for (; _First != _Last; ++_Dest, (void)++_First)
		_Al.construct(_Unfancy(_Dest), ::std:: move(*_First));
	} catch (...) {
	_Destroy_range(_Next, _Dest, _Al);
	throw;
	}

	return (_Dest);
	}

template<class _Ty1,
	class _Ty2,
	class _Alloc> inline
	_Ty2 *_Uninitialized_move_al_unchecked1(_Ty1 *_First, _Ty1 *_Last, _Ty2 *_Dest,
		_Wrap_alloc<_Alloc>&, _Really_trivial_ptr_iterator_tag, true_type)
	{	
	return (_Copy_memmove(_First, _Last, _Dest));
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_move_al_unchecked(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Wrap_alloc<_Alloc>& _Al)
	{	
	typedef decltype(::std:: move(*_First)) _Src_type; 
	return (_Uninitialized_move_al_unchecked1(_First, _Last, _Dest, _Al,
		_Ptr_move_cat(_First, _Dest),
		_Uses_default_construct_t<_Alloc, decltype(_Unfancy(_Dest)), _Src_type>()));
	}

template<class _InIt,
	class _FwdIt,
	class _Alloc> inline
	_FwdIt _Uninitialized_move(_InIt _First, _InIt _Last, _FwdIt _Dest,
		_Wrap_alloc<_Alloc>& _Al)
	{	
		
		
	return (_Rechecked(_Dest,
		_Uninitialized_move_al_unchecked(_Unchecked(_First), _Unchecked(_Last),
			_Unchecked(_Dest), _Al)));
	}

		
template<class _FwdIt,
	class _Tval> inline
	void _Uninitialized_fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Tval& _Val, false_type)
	{	
	_FwdIt _Next = _First;

	try {
	for (; _First != _Last; ++_First)
		_Construct(_Unfancy(_First), _Val);
	} catch (...) {
	_Destroy_range(_Next, _First);
	throw;
	}
	}

template<class _FwdIt,
	class _Tval> inline
	void _Uninitialized_fill_unchecked1(_FwdIt _First, _FwdIt _Last, const _Tval& _Val, true_type)
	{	
	:: memset(_First, _Val, _Last - _First);
	}

template<class _FwdIt,
	class _Tval> inline
	void _Uninitialized_fill_unchecked(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
	{	
	_Uninitialized_fill_unchecked1(_First, _Last, _Val, _Fill_memset_is_safe(_First, _Val));
	}

template<class _FwdIt,
	class _Tval> inline
	void uninitialized_fill(_FwdIt _First, _FwdIt _Last, const _Tval& _Val)
	{	
	;
	_Uninitialized_fill_unchecked(_Unchecked(_First), _Unchecked(_Last), _Val);
	}

		
template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	_FwdIt _Uninitialized_fill_n_unchecked1(_FwdIt _First, _Diff _Count, const _Tval& _Val, false_type)
	{	
	_FwdIt _Next = _First;

	try {
	for (; 0 < _Count; --_Count, (void)++_First)
		_Construct(_Unfancy(_First), _Val);
	} catch (...) {
	_Destroy_range(_Next, _First);
	throw;
	}

	return (_First);
	}

template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	_FwdIt _Uninitialized_fill_n_unchecked1(_FwdIt _First, _Diff _Count, const _Tval& _Val, true_type)
	{	
	if (0 < _Count)
		{
		:: memset(_First, _Val, _Count);
		return (_First + _Count);
		}

	return (_First);
	}

template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	_FwdIt _Uninitialized_fill_n_unchecked(_FwdIt _First, _Diff _Count, const _Tval& _Val)
	{	
	return (_Uninitialized_fill_n_unchecked1(_First, _Count, _Val, _Fill_memset_is_safe(_First, _Val)));
	}

template<class _FwdIt,
	class _Diff,
	class _Tval> inline
	_FwdIt uninitialized_fill_n(_FwdIt _First, _Diff _Count,
		const _Tval& _Val)
	{	
	return (_Rechecked(_First,
		_Uninitialized_fill_n_unchecked(_Unchecked_n(_First, _Count), _Count, _Val)));
	}

		
template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	void _Uninit_alloc_fill_n1(_FwdIt _First, _Diff _Count, const _Iter_value_t<_FwdIt> * _Pval,
		_Wrap_alloc<_Alloc>& _Al, false_type)
	{	
	_FwdIt _Next = _First;

	try {
	for (; 0 < _Count; --_Count, (void)++_First)
		_Al.construct(_Unfancy(_First), *_Pval);
	} catch (...) {
	_Destroy_range(_Next, _First, _Al);
	throw;
	}
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	void _Uninit_alloc_fill_n1(_FwdIt _First, _Diff _Count, const _Iter_value_t<_FwdIt> * _Pval,
		_Wrap_alloc<_Alloc>&, true_type)
	{	
	:: memset(_First, *_Pval, _Count);
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	void _Uninitialized_fill_n(_FwdIt _First, _Diff _Count,
		const _Iter_value_t<_FwdIt> * _Pval, _Wrap_alloc<_Alloc>& _Al)
	{	
	_Uninit_alloc_fill_n1(_First, _Count, _Pval, _Al,
		typename conjunction<decltype(_Fill_memset_is_safe(_First, *_Pval)),
			_Uses_default_construct<_Alloc, decltype(_Unfancy(_First)), decltype(*_Pval)>>::type());
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	void _Uninitialized_default_fill_n1(_FwdIt _First, _Diff _Count,
		_Wrap_alloc<_Alloc>& _Al, false_type)
	{	
	_FwdIt _Next = _First;

	try {
	for (; 0 < _Count; --_Count, (void)++_First)
		_Al.construct(_Unfancy(_First));
	} catch (...) {
	_Destroy_range(_Next, _First, _Al);
	throw;
	}
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	void _Uninitialized_default_fill_n1(_FwdIt _First, _Diff _Count,
		_Wrap_alloc<_Alloc>&, true_type)
	{	
	:: memset(_First, 0, _Count * sizeof(_Iter_value_t<_FwdIt>));
	}

template<class _FwdIt,
	class _Diff,
	class _Alloc> inline
	void _Uninitialized_default_fill_n(_FwdIt _First, _Diff _Count,
		_Wrap_alloc<_Alloc>& _Al)
	{	
	typedef _Iter_value_t<_FwdIt> _Ty;
	_Uninitialized_default_fill_n1(_First, _Count, _Al,
		typename conjunction<
			is_pointer<_FwdIt>,
			is_scalar<_Ty>,
			negation<is_volatile<_Ty>>,
			negation<is_member_pointer<_Ty>>,
			_Uses_default_construct<_Alloc, decltype(_Unfancy(_First))>>::type());
	}

		
template<class _OutIt,
	class _Ty>
	class raw_storage_iterator
		: public _Outit
	{	
public:
	explicit raw_storage_iterator(_OutIt _First)
		: _Next(_First)
		{	
		}

	raw_storage_iterator& operator*()
		{	
		return (*this);
		}

	raw_storage_iterator& operator=(const _Ty& _Val)
		{	
		_Construct(_Unfancy(_Next), _Val);
		return (*this);
		}

	raw_storage_iterator& operator=(_Ty&& _Val)
		{	
		_Construct(_Unfancy(_Next), ::std:: move(_Val));
		return (*this);
		}

	raw_storage_iterator& operator++()
		{	
		++_Next;
		return (*this);
		}

	raw_storage_iterator operator++(int)
		{	
		raw_storage_iterator _Ans = *this;
		++_Next;
		return (_Ans);
		}

	_OutIt base() const
		{	
		return (_Next);
		}

private:
	_OutIt _Next;	
	};

		
template<class _Ty>
	class _Temp_iterator
		: public _Outit
	{	
public:
	typedef _Ty *_Pty;

	_Temp_iterator(ptrdiff_t _Count = 0)
		{	
		_Buf._Begin = 0;
		_Buf._Current = 0;
		_Buf._Hiwater = 0;
		_Buf._Size = _Count;	
		_Pbuf = &_Buf;
		}

	_Temp_iterator(const _Temp_iterator& _Right)
		{	
		_Buf._Begin = 0;	
		_Buf._Current = 0;
		_Buf._Hiwater = 0;
		_Buf._Size = 0;
		*this = _Right;
		}

	~_Temp_iterator() noexcept
		{	
		if (_Buf._Begin != 0)
			{	
			for (_Pty _Next = _Buf._Begin;
				_Next != _Buf._Hiwater; ++_Next)
				_Destroy(_Next);
			::std:: return_temporary_buffer(_Buf._Begin);
			}
		}

	_Temp_iterator& operator=(const _Temp_iterator& _Right)
		{	
		_Pbuf = _Right._Pbuf;
		return (*this);
		}

	_Temp_iterator& operator=(const _Ty& _Val)
		{	
		if (_Pbuf->_Current < _Pbuf->_Hiwater)
			*_Pbuf->_Current++ = _Val;	
		else
			{	
			_Pty _Ptr = _Pbuf->_Current;
			_Construct(_Ptr, _Val);
			_Pbuf->_Hiwater = ++_Pbuf->_Current;
			}

		return (*this);
		}

	_Temp_iterator& operator=(_Ty&& _Val)
		{	
		if (_Pbuf->_Current < _Pbuf->_Hiwater)
			*_Pbuf->_Current++ =
				::std:: forward<_Ty>(_Val);	
		else
			{	
			_Pty _Ptr = _Pbuf->_Current;
			_Construct(_Ptr, ::std:: forward<_Ty>(_Val));
			_Pbuf->_Hiwater = ++_Pbuf->_Current;
			}

		return (*this);
		}

	_Temp_iterator& operator*()
		{	
		return (*this);
		}

	_Temp_iterator& operator++()
		{	
		return (*this);
		}

	_Temp_iterator& operator++(int)
		{	
		return (*this);
		}

	_Temp_iterator& _Init()
		{	
		_Pbuf->_Current = _Pbuf->_Begin;
		return (*this);
		}

	_Pty _First() const
		{	
		return (_Pbuf->_Begin);
		}

	_Pty _Last() const
		{	
		return (_Pbuf->_Current);
		}

	ptrdiff_t _Maxlen()
		{	
		if (_Pbuf->_Begin == 0 && 0 < _Pbuf->_Size)
			{	
			pair<_Pty, ptrdiff_t> _Pair =

				::std:: get_temporary_buffer<_Ty>(_Pbuf->_Size);

			_Pbuf->_Begin = _Pair.first;
			_Pbuf->_Current = _Pair.first;
			_Pbuf->_Hiwater = _Pair.first;
			_Pbuf->_Size = _Pair.second;
			}

		return (_Pbuf->_Size);
		}

private:
	struct _Bufpar
		{	
		_Pty _Begin;	
		_Pty _Current;	
		_Pty _Hiwater;	
		ptrdiff_t _Size;	
		};
	_Bufpar _Buf;	
	_Bufpar *_Pbuf;	
	};

 
		
template<class _Ty>
	class auto_ptr;

template<class _Ty>
	struct auto_ptr_ref
		{	
	explicit auto_ptr_ref(_Ty *_Right)
		: _Ref(_Right)
		{	
		}

	_Ty *_Ref;	
	};

template<class _Ty>
	class auto_ptr
		{	
public:
	typedef auto_ptr<_Ty> _Myt;
	typedef _Ty element_type;

	explicit auto_ptr(_Ty *_Ptr = 0) noexcept
		: _Myptr(_Ptr)
		{	
		}

	auto_ptr(_Myt& _Right) noexcept
		: _Myptr(_Right.release())
		{	
		}

	auto_ptr(auto_ptr_ref<_Ty> _Right) noexcept
		{	
		_Ty *_Ptr = _Right._Ref;
		_Right._Ref = 0;	
		_Myptr = _Ptr;	
		}

	template<class _Other>
		operator auto_ptr<_Other>() noexcept
		{	
		return (auto_ptr<_Other>(*this));
		}

	template<class _Other>
		operator auto_ptr_ref<_Other>() noexcept
		{	
		_Other *_Cvtptr = _Myptr;	
		auto_ptr_ref<_Other> _Ans(_Cvtptr);
		_Myptr = 0;	
		return (_Ans);
		}

	template<class _Other>
		_Myt& operator=(auto_ptr<_Other>& _Right) noexcept
		{	
		reset(_Right.release());
		return (*this);
		}

	template<class _Other>
		auto_ptr(auto_ptr<_Other>& _Right) noexcept
		: _Myptr(_Right.release())
		{	
		}

	_Myt& operator=(_Myt& _Right) noexcept
		{	
		reset(_Right.release());
		return (*this);
		}

	_Myt& operator=(auto_ptr_ref<_Ty> _Right) noexcept
		{	
		_Ty *_Ptr = _Right._Ref;
		_Right._Ref = 0;	
		reset(_Ptr);	
		return (*this);
		}

	~auto_ptr() noexcept
		{	
		delete _Myptr;
		}

	_Ty& operator*() const noexcept
		{	
 


#line 766 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory"

		return (*get());
		}

	_Ty *operator->() const noexcept
		{	
 


#line 776 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory"

		return (get());
		}

	_Ty *get() const noexcept
		{	
		return (_Myptr);
		}

	_Ty *release() noexcept
		{	
		_Ty *_Tmp = _Myptr;
		_Myptr = 0;
		return (_Tmp);
		}

	void reset(_Ty *_Ptr = 0)
		{	
		if (_Ptr != _Myptr)
			delete _Myptr;
		_Myptr = _Ptr;
		}

private:
	_Ty *_Myptr;	
	};
 #line 803 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory"
}

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 809 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory"
#line 810 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\xmemory"





#line 7 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\memory"

 
  
 #line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\memory"

 
 #line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"














#pragma once







#pragma pack(push,8)
#pragma warning(push,3)


#pragma warning(disable: 4275)

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"







#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 11 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"


#pragma pack(push, 8)






#line 21 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
    struct __type_info_node;
#line 23 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"




    extern __type_info_node __type_info_root_node;
#line 29 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"



__pragma(pack(push, 8)) extern "C" {


#pragma warning(push)
#pragma warning(disable: 4510 4512 4610) 
struct __std_type_info_data
{
    char const* _UndecoratedName;
    char const  _DecoratedName[1];
};
#pragma warning(pop)

__declspec(dllimport) int __cdecl __std_type_info_compare(
      __std_type_info_data const* _Lhs,
      __std_type_info_data const* _Rhs
    );

__declspec(dllimport) size_t __cdecl __std_type_info_hash(
      __std_type_info_data const* _Data
    );

__declspec(dllimport) char const* __cdecl __std_type_info_name(
      __std_type_info_data* _Data,
      __type_info_node*     _RootNode
    );

} __pragma(pack(pop))



class type_info
{
public:

    type_info(type_info const&) = delete;
    type_info& operator=(type_info const&) = delete;

    size_t hash_code() const throw()
    {
        return __std_type_info_hash(&_Data);
    }

    bool operator==(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) == 0;
    }

    bool operator!=(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) != 0;
    }

    bool before(type_info const& _Other) const throw()
    {
        return __std_type_info_compare(&_Data, &_Other._Data) < 0;
    }

    char const* name() const throw()
    {
        


        return __std_type_info_name(&_Data, &__type_info_root_node);
        #line 96 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
    }

    char const* raw_name() const throw()
    {
        return _Data._DecoratedName;
    }

    virtual ~type_info() throw();

private:

    mutable __std_type_info_data _Data;
};

namespace std {
	using ::type_info;
}



namespace std {

class bad_cast
    : public exception
{
public:

    bad_cast() throw()
        : exception("bad cast", 1)
    {
    }

    static bad_cast __construct_from_string_literal(char const* const _Message) throw()
    {
        return bad_cast(_Message, 1);
    }

private:

    bad_cast(char const* const _Message, int) throw()
        : exception(_Message, 1)
    {
    }
};

class bad_typeid
    : public exception
{
public:

    bad_typeid() throw()
        : exception("bad typeid", 1)
    {
    }

    static bad_typeid __construct_from_string_literal(char const* const _Message) throw()
    {
        return bad_typeid(_Message, 1);
    }

private:

    friend class __non_rtti_object;

    bad_typeid(char const* const _Message, int) throw()
        : exception(_Message, 1)
    {
    }
};

class __non_rtti_object
    : public bad_typeid
{
public:

    static __non_rtti_object __construct_from_string_literal(char const* const _Message) throw()
    {
        return __non_rtti_object(_Message, 1);
    }

private:

    __non_rtti_object(char const* const _Message, int) throw()
        : bad_typeid(_Message, 1)
    {
    }
};

} 

#line 187 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
#line 188 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime_typeinfo.h"
#pragma pack(pop)
#line 30 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"

 























































#line 88 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"


#pragma pack(pop)
#pragma warning(pop)
#line 93 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"
#line 94 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\typeinfo"







#line 14 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\memory"
 

 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

 #pragma warning(disable: 28197)

namespace std {
template<class _Ty>
	struct default_delete;

template<class _Ty,
	class _Dx = default_delete<_Ty> >
	class unique_ptr;

	
class bad_weak_ptr
	: public ::std:: exception
	{	
public:
	bad_weak_ptr() noexcept
		{	
		}

	virtual const char * what() const throw()
		{	
		return ("bad_weak_ptr");
		}
	};

	
class _Ref_count_base
	{	
private:
	virtual void _Destroy() noexcept = 0;
	virtual void _Delete_this() noexcept = 0;

private:
	_Atomic_counter_t _Uses;
	_Atomic_counter_t _Weaks;

protected:
	_Ref_count_base()
		{	
		_Init_atomic_counter(_Uses, 1);
		_Init_atomic_counter(_Weaks, 1);
		}

public:
	virtual ~_Ref_count_base() noexcept
		{	
		}

	bool _Incref_nz()
		{	
		for (; ; )
			{	
 
			_Atomic_integral_t _Count =
				static_cast<volatile _Atomic_counter_t&>(_Uses);

			if (_Count == 0)
				return (false);

			if (static_cast<_Atomic_integral_t>(_InterlockedCompareExchange(
					reinterpret_cast<volatile long *>(&_Uses),
					_Count + 1, _Count)) == _Count)
				return (true);

 








#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\memory"
			}
		}

	void _Incref()
		{	
		_InterlockedIncrement(reinterpret_cast<volatile long *>(&_Uses));
		}

	void _Incwref()
		{	
		_InterlockedIncrement(reinterpret_cast<volatile long *>(&_Weaks));
		}

	void _Decref()
		{	
		if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Uses)) == 0)
			{	
			_Destroy();
			_Decwref();
			}
		}

	void _Decwref()
		{	
		if (_InterlockedDecrement(reinterpret_cast<volatile long *>(&_Weaks)) == 0)
			_Delete_this();
		}

	long _Use_count() const noexcept
		{	
		return (_Get_atomic_count(_Uses));
		}

	bool _Expired() const noexcept
		{	
		return (_Use_count() == 0);
		}

	virtual void *_Get_deleter(const  type_info&) const noexcept
		{	
		return (0);
		}
	};

	
template<class _Ty>
	class _Ref_count
	: public _Ref_count_base
	{	
public:
	_Ref_count(_Ty *_Px)
		: _Ref_count_base(), _Ptr(_Px)
		{	
		}

private:
	virtual void _Destroy() noexcept
		{	
		delete _Ptr;
		}

	virtual void _Delete_this() noexcept
		{	
		delete this;
		}

	_Ty * _Ptr;
	};

	
template<class _Ty,
	class _Dx>
	class _Ref_count_del
	: public _Ref_count_base
	{	
public:
	_Ref_count_del(_Ty *_Px, _Dx _Dt)
		: _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), _Dt, _Px)
		{	
		}

	virtual void *_Get_deleter(
		const  type_info& _Typeid) const noexcept
		{	
		return ((void *)(_Typeid == typeid(_Dx)
			? ::std:: addressof(_Mypair._Get_first()) : 0));
		}

private:
	virtual void _Destroy() noexcept
		{	
		_Mypair._Get_first()(_Mypair._Get_second());
		}

	virtual void _Delete_this() noexcept
		{	
		delete this;
		}

	_Compressed_pair<_Dx, _Ty *> _Mypair;
	};

	
template<class _Ty,
	class _Dx,
	class _Alloc>
	class _Ref_count_del_alloc
	: public _Ref_count_base
	{	
public:
	typedef _Ref_count_del_alloc<_Ty, _Dx, _Alloc> _Myt;
	typedef _Wrap_alloc<_Alloc> _Myalty0;
	typedef typename _Myalty0::template rebind<_Myt>::other _Myalty;

	_Ref_count_del_alloc(_Ty *_Px, _Dx _Dt, const _Alloc& _Ax)
		: _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), _Dt,
			_One_then_variadic_args_t(), _Ax, _Px)
		{	
		}

	virtual void *_Get_deleter(
		const  type_info& _Typeid) const noexcept
		{	
		return ((void *)(_Typeid == typeid(_Dx)
			? ::std:: addressof(_Mypair._Get_first()) : 0));
		}

private:
	virtual void _Destroy() noexcept
		{	
		_Mypair._Get_first()(_Mypair._Get_second()._Get_second());
		}

	virtual void _Delete_this() noexcept
		{	
		_Myalty _Al = _Mypair._Get_second()._Get_first();
		_Al.destroy(this);
		_Al.deallocate(this, 1);
		}

	_Compressed_pair<_Dx, _Compressed_pair<_Myalty, _Ty *> > _Mypair;
	};

	
template<class _Ty>
	class weak_ptr;
template<class _Ty>
	class shared_ptr;
template<class _Ty>
	class enable_shared_from_this;

template<class _Ty1,
	class _Ty2>
	void _Do_enable(_Ty1 *, enable_shared_from_this<_Ty2> *,
		_Ref_count_base *);

template<class _Ty>
	inline void _Enable_shared(_Ty *_Ptr, _Ref_count_base *_Refptr,
		typename _Ty::_EStype * = 0)
	{	
	if (_Ptr)
		_Do_enable(_Ptr,
			(enable_shared_from_this<typename _Ty::_EStype>*)_Ptr, _Refptr);
	}

inline void _Enable_shared(const volatile void *, const volatile void *)
	{	
	}

	
template<class _Ty>
	class _Ptr_base
	{	
public:
	typedef _Ptr_base<_Ty> _Myt;
	typedef _Ty element_type;

	constexpr _Ptr_base() noexcept
		: _Ptr(0), _Rep(0)
		{	
		}

	_Ptr_base(_Myt&& _Right)
		: _Ptr(_Right._Ptr), _Rep(_Right._Rep)
		{	
		_Right._Ptr = 0;
		_Right._Rep = 0;
		}

	template<class _Ty2>
		_Ptr_base(_Ptr_base<_Ty2>&& _Right)
		: _Ptr(_Right._Ptr), _Rep(_Right._Rep)
		{	
		_Right._Ptr = 0;
		_Right._Rep = 0;
		}

	_Myt& operator=(_Myt&& _Right)
		{	
		_Assign_rv(::std:: move(_Right));
		return (*this);
		}

	void _Assign_rv(_Myt&& _Right)
		{	
		_Swap(_Right);
		}

	long use_count() const noexcept
		{	
		return (_Rep ? _Rep->_Use_count() : 0);
		}

	void _Swap(_Ptr_base& _Right) noexcept
		{	
		::std:: swap(_Rep, _Right._Rep);
		::std:: swap(_Ptr, _Right._Ptr);
		}

	template<class _Ty2>
		bool owner_before(const _Ptr_base<_Ty2>& _Right) const
		{	
		return (_Rep < _Right._Rep);
		}

	void *_Get_deleter(const  type_info& _Typeid) const noexcept
		{	
		return (_Rep ? _Rep->_Get_deleter(_Typeid) : 0);
		}

	_Ty *_Get() const noexcept
		{	
		return (_Ptr);
		}

	bool _Expired() const noexcept
		{	
		return (!_Rep || _Rep->_Expired());
		}

	void _Decref()
		{	
		if (_Rep != 0)
			_Rep->_Decref();
		}

	void _Reset()
		{	
		_Reset(0, 0);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other)
		{	
		_Reset(_Other._Ptr, _Other._Rep);
		}

	template<class _Ty2>
		void _Reset(const _Ptr_base<_Ty2>& _Other, bool _Throw)
		{	
		_Reset(_Other._Ptr, _Other._Rep, _Throw);
		}

 
	template<class _Ty2>
		void _Reset(auto_ptr<_Ty2>&& _Other)
		{	
		_Ty2 *_Px = _Other.get();
		_Reset0(_Px, new _Ref_count<_Ty>(_Px));
		_Other.release();
		_Enable_shared(_Px, _Rep);
		}
 #line 368 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\memory"

	template<class _Ty2>
		void _Reset(_Ty *_Other_ptr, const _Ptr_base<_Ty2>& _Other)
		{	
		_Reset(_Other_ptr, _Other._Rep);
		}

	void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
		{	
		if (_Other_rep)
			_Other_rep->_Incref();
		_Reset0(_Other_ptr, _Other_rep);
		}

	void _Reset(_Ty *_Other_ptr, _Ref_count_base *_Other_rep, bool _Throw)
		{	
			
			
		if (_Other_rep && _Other_rep->_Incref_nz())
			_Reset0(_Other_ptr, _Other_rep);
		else if (_Throw)
			throw bad_weak_ptr();
		}

	void _Reset0(_Ty *_Other_ptr, _Ref_count_base *_Other_rep)
		{	
		if (_Rep != 0)
			_Rep->_Decref();
		_Rep = _Other_rep;
		_Ptr = _Other_ptr;
		}

	void _Decwref()
		{	
		if (_Rep != 0)
			_Rep->_Decwref();
		}

	void _Resetw()
		{	
		_Resetw((_Ty *)0, 0);
		}

	template<class _Ty2>
		void _Resetw(const _Ptr_base<_Ty2>& _Other)
		{	
		_Resetw(_Other._Ptr, _Other._Rep);
		}

	template<class _Ty2>
		void _Resetw(_Ty2 *_Other_ptr, _Ref_count_base *_Other_rep)
		{	
		if (_Other_rep)
			_Other_rep->_Incwref();
		if (_Rep != 0)
			_Rep->_Decwref();
		_Rep = _Other_rep;
		_Ptr = const_cast<remove_cv_t<_Ty2> *>(_Other_ptr);
		}

private:
	_Ty *_Ptr;
	_Ref_count_base *_Rep;
	template<class _Ty0>
		friend class _Ptr_base;
	};

	
template<class _Ty>
	class shared_ptr
		: public _Ptr_base<_Ty>
	{	
public:
	typedef shared_ptr<_Ty> _Myt;
	typedef _Ptr_base<_Ty> _Mybase;

	constexpr shared_ptr() noexcept
		{	
		}

	template<class _Ux>
		explicit shared_ptr(_Ux *_Px)
		{	
		_Resetp(_Px);
		}

	template<class _Ux,
		class _Dx>
		shared_ptr(_Ux *_Px, _Dx _Dt)
		{	
		_Resetp(_Px, _Dt);
		}

	constexpr shared_ptr(nullptr_t) noexcept
		{	
		}

	template<class _Dx>
		shared_ptr(nullptr_t, _Dx _Dt)
		{	
		_Resetp((_Ty *)0, _Dt);
		}

	template<class _Dx,
		class _Alloc>
		shared_ptr(nullptr_t, _Dx _Dt, _Alloc _Ax)
		{	
		_Resetp((_Ty *)0, _Dt, _Ax);
		}

	template<class _Ux,
		class _Dx,
		class _Alloc>
		shared_ptr(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
		{	
		_Resetp(_Px, _Dt, _Ax);
		}

	template<class _Ty2>
		shared_ptr(const shared_ptr<_Ty2>& _Right, _Ty *_Px) noexcept
		{	
		this->_Reset(_Px, _Right);
		}

	shared_ptr(const _Myt& _Other) noexcept
		{	
		this->_Reset(_Other);
		}

	template<class _Ty2,
		class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
			void>::type>
		shared_ptr(const shared_ptr<_Ty2>& _Other) noexcept
		{	
		this->_Reset(_Other);
		}

	template<class _Ty2>
		explicit shared_ptr(const weak_ptr<_Ty2>& _Other,
			bool _Throw = true)
		{	
		this->_Reset(_Other, _Throw);
		}

 
	template<class _Ty2>
		shared_ptr(auto_ptr<_Ty2>&& _Other)
		{	
		this->_Reset(::std:: move(_Other));
		}
 #line 519 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\memory"

	shared_ptr(_Myt&& _Right) noexcept
		: _Mybase(::std:: move(_Right))
		{	
		}

	template<class _Ty2,
		class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
			void>::type>
		shared_ptr(shared_ptr<_Ty2>&& _Right) noexcept
		: _Mybase(::std:: move(_Right))
		{	
		}


	template<class _Ux,
		class _Dx,
		class = typename enable_if<is_convertible<
			typename unique_ptr<_Ux, _Dx>::pointer, _Ty *>::value,
			void>::type>
		shared_ptr(unique_ptr<_Ux, _Dx>&& _Right)
		{	
		_Resetp(_Right.release(), _Right.get_deleter());
		}

	template<class _Ux,
		class _Dx>
		_Myt& operator=(unique_ptr<_Ux, _Dx>&& _Right)
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	_Myt& operator=(_Myt&& _Right) noexcept
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		_Myt& operator=(shared_ptr<_Ty2>&& _Right) noexcept
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	~shared_ptr() noexcept
		{	
		this->_Decref();
		}

	_Myt& operator=(const _Myt& _Right) noexcept
		{	
		shared_ptr(_Right).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		_Myt& operator=(const shared_ptr<_Ty2>& _Right) noexcept
		{	
		shared_ptr(_Right).swap(*this);
		return (*this);
		}

 
	template<class _Ty2>
		_Myt& operator=(auto_ptr<_Ty2>&& _Right)
		{	
		shared_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}
 #line 591 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\memory"

	void reset() noexcept
		{	
		shared_ptr().swap(*this);
		}

	template<class _Ux>
		void reset(_Ux *_Px)
		{	
		shared_ptr(_Px).swap(*this);
		}

	template<class _Ux,
		class _Dx>
		void reset(_Ux *_Px, _Dx _Dt)
		{	
		shared_ptr(_Px, _Dt).swap(*this);
		}

	template<class _Ux,
		class _Dx,
		class _Alloc>
		void reset(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
		{	
		shared_ptr(_Px, _Dt, _Ax).swap(*this);
		}

	void swap(_Myt& _Other) noexcept
		{	
		this->_Swap(_Other);
		}

	_Ty *get() const noexcept
		{	
		return (this->_Get());
		}

	typename add_lvalue_reference<_Ty>::type operator*() const noexcept
		{	
		return (*this->_Get());
		}

	_Ty *operator->() const noexcept
		{	
		return (this->_Get());
		}

	bool unique() const noexcept
		{	
		return (this->use_count() == 1);
		}

	explicit operator bool() const noexcept
		{	
		return (this->_Get() != 0);
		}

private:
	template<class _Ux>
		void _Resetp(_Ux *_Px)
		{	
		try {	
		_Resetp0(_Px, new _Ref_count<_Ux>(_Px));
		} catch (...) {	
		delete _Px;
		throw;
		}
		}

	template<class _Ux,
		class _Dx>
		void _Resetp(_Ux *_Px, _Dx _Dt)
		{	
		try {	
		_Resetp0(_Px, new _Ref_count_del<_Ux, _Dx>(_Px, _Dt));
		} catch (...) {	
		_Dt(_Px);
		throw;
		}
		}

	template<class _Ux,
		class _Dx,
		class _Alloc>
		void _Resetp(_Ux *_Px, _Dx _Dt, _Alloc _Ax)
		{	
		typedef _Ref_count_del_alloc<_Ux, _Dx, _Alloc> _Refd;
		typedef _Wrap_alloc<_Alloc> _Alref0;
		typename _Alref0::template rebind<_Refd>::other _Alref(_Ax);

		try {	
		_Refd *_Pref = _Alref.allocate(1);
		_Alref.construct(_Pref, _Px, _Dt, _Ax);
		_Resetp0(_Px, _Pref);
		} catch (...) {	
		_Dt(_Px);
		throw;
		}
		}

public:
	template<class _Ux>
		void _Resetp0(_Ux *_Px, _Ref_count_base *_Rx)
		{	
		this->_Reset0(_Px, _Rx);
		_Enable_shared(_Px, _Rx);
		}
	};

template<class _Ty1,
	class _Ty2>
	bool operator==(const shared_ptr<_Ty1>& _Left,
		const shared_ptr<_Ty2>& _Right) noexcept
	{	
	return (_Left.get() == _Right.get());
	}

template<class _Ty1,
	class _Ty2>
	bool operator!=(const shared_ptr<_Ty1>& _Left,
		const shared_ptr<_Ty2>& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Ty2>
	bool operator<(const shared_ptr<_Ty1>& _Left,
		const shared_ptr<_Ty2>& _Right) noexcept
	{	
	return (less<decltype(_Always_false<_Ty1>::value
		? _Left.get() : _Right.get())>()(
			_Left.get(), _Right.get()));
	}

template<class _Ty1,
	class _Ty2>
	bool operator>=(const shared_ptr<_Ty1>& _Left,
		const shared_ptr<_Ty2>& _Right) noexcept
	{	
	return (!(_Left < _Right));
	}

template<class _Ty1,
	class _Ty2>
	bool operator>(const shared_ptr<_Ty1>& _Left,
		const shared_ptr<_Ty2>& _Right) noexcept
	{	
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Ty2>
	bool operator<=(const shared_ptr<_Ty1>& _Left,
		const shared_ptr<_Ty2>& _Right) noexcept
	{	
	return (!(_Right < _Left));
	}

template<class _Ty>
	bool operator==(const shared_ptr<_Ty>& _Left,
		nullptr_t) noexcept
	{	
	return (_Left.get() == (_Ty *)0);
	}

template<class _Ty>
	bool operator==(nullptr_t,
		const shared_ptr<_Ty>& _Right) noexcept
	{	
	return ((_Ty *)0 == _Right.get());
	}

template<class _Ty>
	bool operator!=(const shared_ptr<_Ty>& _Left,
		nullptr_t _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

template<class _Ty>
	bool operator!=(nullptr_t _Left,
		const shared_ptr<_Ty>& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

template<class _Ty>
	bool operator<(const shared_ptr<_Ty>& _Left,
		nullptr_t _Right) noexcept
	{	
	return (less<_Ty *>()(_Left.get(), (_Ty *)0));
	}

template<class _Ty>
	bool operator<(nullptr_t _Left,
		const shared_ptr<_Ty>& _Right) noexcept
	{	
	return (less<_Ty *>()((_Ty *)0, _Right.get()));
	}

template<class _Ty>
	bool operator>=(const shared_ptr<_Ty>& _Left,
		nullptr_t _Right) noexcept
	{	
	return (!(_Left < _Right));
	}

template<class _Ty>
	bool operator>=(nullptr_t _Left,
		const shared_ptr<_Ty>& _Right) noexcept
	{	
	return (!(_Left < _Right));
	}

template<class _Ty>
	bool operator>(const shared_ptr<_Ty>& _Left,
		nullptr_t _Right) noexcept
	{	
	return (_Right < _Left);
	}

template<class _Ty>
	bool operator>(nullptr_t _Left,
		const shared_ptr<_Ty>& _Right) noexcept
	{	
	return (_Right < _Left);
	}

template<class _Ty>
	bool operator<=(const shared_ptr<_Ty>& _Left,
		nullptr_t _Right) noexcept
	{	
	return (!(_Right < _Left));
	}

template<class _Ty>
	bool operator<=(nullptr_t _Left,
		const shared_ptr<_Ty>& _Right) noexcept
	{	
	return (!(_Right < _Left));
	}

template<class _Elem,
	class _Traits,
	class _Ty>
	basic_ostream<_Elem, _Traits>&
	operator<<(basic_ostream<_Elem, _Traits>& _Out,
		const shared_ptr<_Ty>& _Px)
	{	
	return (_Out << _Px.get());
	}

template<class _Ty>
	void swap(shared_ptr<_Ty>& _Left,
		shared_ptr<_Ty>& _Right) noexcept
	{	
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Ty2>
	shared_ptr<_Ty1>
		static_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
	{	
	typedef typename shared_ptr<_Ty1>::element_type _Elem1;
	_Elem1 *_Ptr = static_cast<_Elem1 *>(_Other.get());
	return (shared_ptr<_Ty1>(_Other, _Ptr));
	}

template<class _Ty1,
	class _Ty2>
	shared_ptr<_Ty1>
		const_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
	{	
	typedef typename shared_ptr<_Ty1>::element_type _Elem1;
	_Elem1 *_Ptr = const_cast<_Elem1 *>(_Other.get());
	return (shared_ptr<_Ty1>(_Other, _Ptr));
	}

template<class _Ty1,
	class _Ty2>
	shared_ptr<_Ty1>
		dynamic_pointer_cast(const shared_ptr<_Ty2>& _Other) noexcept
	{	
	typedef typename shared_ptr<_Ty1>::element_type _Elem1;
	_Elem1 *_Ptr = dynamic_cast<_Elem1 *>(_Other.get());
	if (_Ptr)
		return (shared_ptr<_Ty1>(_Other, _Ptr));
	else
		return (shared_ptr<_Ty1>());
	}

template<class _Dx,
	class _Ty>
	_Dx *get_deleter(const shared_ptr<_Ty>& _Sx) noexcept
	{	
	return ((_Dx *)_Sx._Get_deleter(typeid(_Dx)));
	}

	
template<class _Ty>
	class _Ref_count_obj
	: public _Ref_count_base
	{	
public:
	template<class... _Types>
		_Ref_count_obj(_Types&&... _Args)
		: _Ref_count_base()
		{	
		::new ((void *)&_Storage) _Ty(::std:: forward<_Types>(_Args)...);
		}


	_Ty *_Getptr() const
		{	
		return ((_Ty *)&_Storage);
		}

private:
	virtual void _Destroy() noexcept
		{	
		_Getptr()->~_Ty();
		}

	virtual void _Delete_this() noexcept
		{	
		delete this;
		}

	typename aligned_union<1, _Ty>::type _Storage;
	};

	
template<class _Ty,
	class _Alloc>
	class _Ref_count_obj_alloc
	: public _Ref_count_base
	{	
public:
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Myt;
	typedef _Wrap_alloc<_Alloc> _Myalty0;
	typedef typename _Myalty0::template rebind<_Myt>::other _Myalty;
	typedef typename aligned_union<1, _Ty>::type _Mystoragety;

	template<class... _Types>
		_Ref_count_obj_alloc(const _Alloc& _Al_arg, _Types&&... _Args)
		: _Ref_count_base(), _Mypair(_One_then_variadic_args_t(), _Al_arg)
		{	
		::new ((void *)_Getptr()) _Ty(::std:: forward<_Types>(_Args)...);
		}


	_Ty *_Getptr() const
		{	
		return ((_Ty *)&_Mypair._Get_second());
		}

private:
	virtual void _Destroy() noexcept
		{	
		_Getptr()->~_Ty();
		}

	virtual void _Delete_this() noexcept
		{	
		_Myalty _Al = _Mypair._Get_first();
		_Al.destroy(this);
		_Al.deallocate(this, 1);
		}

	_Compressed_pair<_Myalty, _Mystoragety> _Mypair;
	};

	
template<class _Ty,
	class... _Types> inline
		shared_ptr<_Ty> make_shared(_Types&&... _Args)
	{	
	_Ref_count_obj<_Ty> *_Rx =
		new _Ref_count_obj<_Ty>(::std:: forward<_Types>(_Args)...);

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}

	
template<class _Ty,
	class _Alloc,
	class... _Types> inline
	shared_ptr<_Ty> allocate_shared(
		const _Alloc& _Al_arg, _Types&&... _Args)
	{	
	typedef _Ref_count_obj_alloc<_Ty, _Alloc> _Refoa;
	typedef _Wrap_alloc<_Alloc> _Alref0;
	typename _Alref0::template rebind<_Refoa>::other _Alref(_Al_arg);

	_Refoa *_Rx = _Alref.allocate(1);

	try {
		_Alref.construct(_Rx, _Al_arg, ::std:: forward<_Types>(_Args)...);
	} catch (...) {
		_Alref.deallocate(_Rx, 1);
	throw;
	}

	shared_ptr<_Ty> _Ret;
	_Ret._Resetp0(_Rx->_Getptr(), _Rx);
	return (_Ret);
	}


	
template<class _Ty>
	class weak_ptr
		: public _Ptr_base<_Ty>
	{	
public:
	typedef weak_ptr<_Ty> _Myt;
	typedef _Ptr_base<_Ty> _Mybase;

	constexpr weak_ptr() noexcept
		{	
		}

	weak_ptr(const weak_ptr& _Other) noexcept
		{	
		this->_Resetw(_Other);
		}

	template<class _Ty2,
		class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
			void>::type>
		weak_ptr(const shared_ptr<_Ty2>& _Other) noexcept
		{	
		this->_Resetw(_Other);
		}

	template<class _Ty2,
		class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
			void>::type>
		weak_ptr(const weak_ptr<_Ty2>& _Other) noexcept
		{	
		this->_Resetw(_Other.lock());
		}

	weak_ptr(_Myt&& _Other) noexcept
		: _Mybase(::std:: move(_Other))
		{	
		}

	template<class _Ty2,
		class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
			void>::type>
		weak_ptr(weak_ptr<_Ty2>&& _Other) noexcept
		{	
		this->_Resetw(_Other.lock());
		_Other.reset();
		}

	~weak_ptr() noexcept
		{	
		this->_Decwref();
		}

	weak_ptr& operator=(const weak_ptr& _Right) noexcept
		{	
		this->_Resetw(_Right);
		return (*this);
		}

	template<class _Ty2>
		weak_ptr& operator=(const weak_ptr<_Ty2>& _Right) noexcept
		{	
		this->_Resetw(_Right.lock());
		return (*this);
		}

	_Myt& operator=(_Myt&& _Right) noexcept
		{	
		weak_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		_Myt& operator=(weak_ptr<_Ty2>&& _Right) noexcept
		{	
		weak_ptr(::std:: move(_Right)).swap(*this);
		return (*this);
		}

	template<class _Ty2>
		weak_ptr& operator=(const shared_ptr<_Ty2>& _Right) noexcept
		{	
		this->_Resetw(_Right);
		return (*this);
		}

	void reset() noexcept
		{	
		this->_Resetw();
		}

	void swap(weak_ptr& _Other) noexcept
		{	
		this->_Swap(_Other);
		}

	bool expired() const noexcept
		{	
		return (this->_Expired());
		}

	shared_ptr<_Ty> lock() const noexcept
		{	
		return (shared_ptr<_Ty>(*this, false));
		}
	};

template<class _Ty>
	void swap(weak_ptr<_Ty>& _W1, weak_ptr<_Ty>& _W2) noexcept
	{	
	_W1.swap(_W2);
	}

	
template<class _Ty>
	class enable_shared_from_this
	{	
public:
	typedef _Ty _EStype;

	shared_ptr<_Ty> shared_from_this()
		{	
		return (shared_ptr<_Ty>(_Wptr));
		}

	shared_ptr<const _Ty> shared_from_this() const
		{	
		return (shared_ptr<const _Ty>(_Wptr));
		}

protected:
	constexpr enable_shared_from_this() noexcept
		{	
		}

	enable_shared_from_this(const enable_shared_from_this&) noexcept
		{	
		}

	enable_shared_from_this&
		operator=(const enable_shared_from_this&) noexcept
		{	
		return (*this);
		}

	~enable_shared_from_this() noexcept
		{	
		}

private:
	template<class _Ty1,
		class _Ty2>
		friend void _Do_enable(
			_Ty1 *,
			enable_shared_from_this<_Ty2>*,
			_Ref_count_base *);

	weak_ptr<_Ty> _Wptr;
	};

template<class _Ty1,
	class _Ty2>
	inline void _Do_enable(
		_Ty1 *_Ptr,
		enable_shared_from_this<_Ty2> *_Es,
		_Ref_count_base *_Refptr)
	{	
	_Es->_Wptr._Resetw(_Ptr, _Refptr);
	}
}

namespace std {
	

	
template<class _Ty>
	struct default_delete
	{	
	constexpr default_delete() noexcept = default;

	template<class _Ty2,
		class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value,
			void>::type>
		default_delete(const default_delete<_Ty2>&) noexcept
		{	
		}

	void operator()(_Ty *_Ptr) const noexcept
		{	
		static_assert(0 < sizeof (_Ty),
			"can't delete an incomplete type");
		delete _Ptr;
		}
	};

template<class _Ty>
	struct default_delete<_Ty[]>
	{	
	constexpr default_delete() noexcept = default;

	template<class _Uty,
		class = typename enable_if<is_convertible<_Uty(*)[], _Ty(*)[]>::value,
			void>::type>
		default_delete(const default_delete<_Uty[]>&) noexcept
		{	
		}

	template<class _Uty,
		class = typename enable_if<is_convertible<_Uty(*)[], _Ty(*)[]>::value,
			void>::type>
		void operator()(_Uty *_Ptr) const noexcept
		{	
		static_assert(0 < sizeof (_Uty),
			"can't delete an incomplete type");
		delete[] _Ptr;
		}
	};

		
template<class _Val,
	class _Ty>
	struct _Get_deleter_pointer_type
	{ template<class _Uty> static auto _Fn(int) -> _Identity<typename _Uty::pointer>; template<class _Uty> static auto _Fn(_Wrap_int) -> _Identity<_Val *>; typedef decltype(_Fn<_Ty>(0)) _Decltype; typedef typename _Decltype::type type; };
#line 1228 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\memory"

	
template<class _Ty,
	class _Dx>
	class _Unique_ptr_base
	{	
public:
	typedef typename remove_reference<_Dx>::type _Dx_noref;
	typedef typename _Get_deleter_pointer_type<_Ty, _Dx_noref>::type pointer;

	template<class _Ptr2,
		class _Dx2>
		_Unique_ptr_base(_Ptr2 _Ptr, _Dx2&& _Dt)
		: _Mypair(_One_then_variadic_args_t(), ::std:: forward<_Dx2>(_Dt), _Ptr)
		{	
		}

	template<class _Ptr2>
		constexpr _Unique_ptr_base(_Ptr2 _Ptr)
		: _Mypair(_Zero_then_variadic_args_t(), _Ptr)
		{	
		}

	_Dx& get_deleter() noexcept
		{	
		return (_Mypair._Get_first());
		}

	const _Dx& get_deleter() const noexcept
		{	
		return (_Mypair._Get_first());
		}

	pointer& _Myptr() noexcept
		{	
		return (_Mypair._Get_second());
		}

	const pointer& _Myptr() const noexcept
		{	
		return (_Mypair._Get_second());
		}

	_Compressed_pair<_Dx, pointer> _Mypair;
	};

	
template<class _Ty,
	class _Dx>	
	class unique_ptr
		: public _Unique_ptr_base<_Ty, _Dx>
	{	
public:
	typedef unique_ptr<_Ty, _Dx> _Myt;
	typedef _Unique_ptr_base<_Ty, _Dx> _Mybase;
	typedef typename _Mybase::pointer pointer;
	typedef _Ty element_type;
	typedef _Dx deleter_type;

	using _Mybase::get_deleter;

	constexpr unique_ptr() noexcept
		: _Mybase(pointer())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	constexpr unique_ptr(nullptr_t) noexcept
		: _Mybase(pointer())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	_Myt& operator=(nullptr_t) noexcept
		{	
		reset();
		return (*this);
		}

	explicit unique_ptr(pointer _Ptr) noexcept
		: _Mybase(_Ptr)
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	unique_ptr(pointer _Ptr,
		typename _If<is_reference<_Dx>::value, _Dx,
			const typename remove_reference<_Dx>::type&>::type _Dt) noexcept
		: _Mybase(_Ptr, _Dt)
		{	
		}

	unique_ptr(pointer _Ptr,
		typename remove_reference<_Dx>::type&& _Dt) noexcept
		: _Mybase(_Ptr, ::std:: move(_Dt))
		{	
		static_assert(!is_reference<_Dx>::value,
			"unique_ptr constructed with reference to rvalue deleter");
		}

	unique_ptr(unique_ptr&& _Right) noexcept
		: _Mybase(_Right.release(),
			::std:: forward<_Dx>(_Right.get_deleter()))
		{	
		}

	template<class _Ty2,
		class _Dx2,
		class = typename enable_if<!is_array<_Ty2>::value
			&& is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer,
				pointer>::value
			&& (is_reference<_Dx>::value
				? is_same<_Dx2, _Dx>::value
				: is_convertible<_Dx2, _Dx>::value),
			void>::type>
		unique_ptr(unique_ptr<_Ty2, _Dx2>&& _Right) noexcept
			: _Mybase(_Right.release(),
				::std:: forward<_Dx2>(_Right.get_deleter()))
		{	
		}

 
	template<class _Ty2,
		class = typename enable_if<is_convertible<_Ty2 *, _Ty *>::value
			&& is_same<_Dx, default_delete<_Ty> >::value,
			void>::type>
		unique_ptr(auto_ptr<_Ty2>&& _Right) noexcept
			: _Mybase(_Right.release())
		{	
		}
 #line 1362 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\memory"

	template<class _Ty2,
		class _Dx2>
		typename enable_if<!is_array<_Ty2>::value
			&& is_assignable<_Dx&, _Dx2&&>::value
			&& is_convertible<typename unique_ptr<_Ty2, _Dx2>::pointer,
				pointer>::value,
			_Myt&>::type
		operator=(unique_ptr<_Ty2, _Dx2>&& _Right) noexcept
		{	
		reset(_Right.release());
		this->get_deleter() = ::std:: forward<_Dx2>(_Right.get_deleter());
		return (*this);
		}

	_Myt& operator=(_Myt&& _Right) noexcept
		{	
		if (this != &_Right)
			{	
			reset(_Right.release());
			this->get_deleter() = ::std:: forward<_Dx>(_Right.get_deleter());
			}
		return (*this);
		}

	void swap(_Myt& _Right) noexcept
		{	
		_Swap_adl(this->_Myptr(), _Right._Myptr());
		_Swap_adl(this->get_deleter(),
			_Right.get_deleter());
		}

	~unique_ptr() noexcept
		{	
		if (get() != pointer())
			this->get_deleter()(get());
		}

	typename add_lvalue_reference<_Ty>::type operator*() const
		{	
		return (*get());
		}

	pointer operator->() const noexcept
		{	
		return (pointer_traits<pointer>::pointer_to(**this));
		}

	pointer get() const noexcept
		{	
		return (this->_Myptr());
		}

	explicit operator bool() const noexcept
		{	
		return (get() != pointer());
		}

	pointer release() noexcept
		{	
		pointer _Ans = get();
		this->_Myptr() = pointer();
		return (_Ans);
		}

	void reset(pointer _Ptr = pointer()) noexcept
		{	
		pointer _Old = get();
		this->_Myptr() = _Ptr;
		if (_Old != pointer())
			this->get_deleter()(_Old);
		}

	unique_ptr(const _Myt&) = delete;
	_Myt& operator=(const _Myt&) = delete;
	};

	
template<class _Ty,
	class _Dx>
	class unique_ptr<_Ty[], _Dx>
		: public _Unique_ptr_base<_Ty, _Dx>
	{	
public:
	typedef unique_ptr<_Ty[], _Dx> _Myt;
	typedef _Unique_ptr_base<_Ty, _Dx> _Mybase;
	typedef typename _Mybase::pointer pointer;
	typedef _Ty element_type;
	typedef _Dx deleter_type;

	using _Mybase::get_deleter;

	constexpr unique_ptr() noexcept
		: _Mybase(pointer())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	template<class _Uty>
		using _Enable_ctor_reset = enable_if_t<
			is_same<_Uty, pointer>::value
			|| (is_same<pointer, element_type *>::value
			&& is_pointer<_Uty>::value
			&& is_convertible<
				remove_pointer_t<_Uty>(*)[],
				element_type(*)[]
			>::value)>;

	template<class _Uty,
		class = _Enable_ctor_reset<_Uty> >
	explicit unique_ptr(_Uty _Ptr) noexcept
		: _Mybase(_Ptr)
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	template<class _Uty,
		class = _Enable_ctor_reset<_Uty> >
	unique_ptr(_Uty _Ptr,
		typename _If<is_reference<_Dx>::value, _Dx,
			const typename remove_reference<_Dx>::type&>::type _Dt) noexcept
		: _Mybase(_Ptr, _Dt)
		{	
		}

	template<class _Uty,
		class = _Enable_ctor_reset<_Uty> >
	unique_ptr(_Uty _Ptr,
		typename remove_reference<_Dx>::type&& _Dt) noexcept
		: _Mybase(_Ptr, ::std:: move(_Dt))
		{	
		static_assert(!is_reference<_Dx>::value,
			"unique_ptr constructed with reference to rvalue deleter");
		}

	unique_ptr(unique_ptr&& _Right) noexcept
		: _Mybase(_Right.release(),
			::std:: forward<_Dx>(_Right.get_deleter()))
		{	
		}

	_Myt& operator=(_Myt&& _Right) noexcept
		{	
		if (this != &_Right)
			{	
			reset(_Right.release());
			this->get_deleter() = ::std:: move(_Right.get_deleter());
			}
		return (*this);
		}

	template<class _Uty,
		class _Ex,
		bool _More,
		class _UP_pointer = typename unique_ptr<_Uty, _Ex>::pointer,
		class _UP_element_type = typename unique_ptr<_Uty, _Ex>::element_type>
		using _Enable_conversion = enable_if_t<
			is_array<_Uty>::value
			&& is_same<pointer, element_type *>::value
			&& is_same<_UP_pointer, _UP_element_type *>::value
			&& is_convertible<_UP_element_type(*)[], element_type(*)[]>::value
			&& _More>;

	template<class _Uty,
		class _Ex,
		class = _Enable_conversion<_Uty, _Ex,
			is_reference<_Dx>::value
			? is_same<_Ex, _Dx>::value
			: is_convertible<_Ex, _Dx>::value> >
		unique_ptr(unique_ptr<_Uty, _Ex>&& _Right) noexcept
			: _Mybase(_Right.release(),
				::std:: forward<_Ex>(_Right.get_deleter()))
		{	
		}

	template<class _Uty,
		class _Ex,
		class = _Enable_conversion<_Uty, _Ex,
			is_assignable<_Dx&, _Ex&&>::value> >
		_Myt& operator=(unique_ptr<_Uty, _Ex>&& _Right) noexcept
		{	
		reset(_Right.release());
		this->get_deleter() = ::std:: forward<_Ex>(_Right.get_deleter());
		return (*this);
		}

	constexpr unique_ptr(nullptr_t) noexcept
		: _Mybase(pointer())
		{	
		static_assert(!is_pointer<_Dx>::value,
			"unique_ptr constructed with null deleter pointer");
		}

	_Myt& operator=(nullptr_t) noexcept
		{	
		reset();
		return (*this);
		}

	void reset(nullptr_t = nullptr_t{}) noexcept
		{	
		reset(pointer());
		}

	void swap(_Myt& _Right) noexcept
		{	
		_Swap_adl(this->_Myptr(), _Right._Myptr());
		_Swap_adl(this->get_deleter(), _Right.get_deleter());
		}

	~unique_ptr() noexcept
		{	
		_Delete();
		}

	_Ty& operator[](size_t _Idx) const
		{	
		return (get()[_Idx]);
		}

	pointer get() const noexcept
		{	
		return (this->_Myptr());
		}

	explicit operator bool() const noexcept
		{	
		return (get() != pointer());
		}

	pointer release() noexcept
		{	
		pointer _Ans = get();
		this->_Myptr() = pointer();
		return (_Ans);
		}

	template<class _Uty,
		class = _Enable_ctor_reset<_Uty> >
	void reset(_Uty _Ptr) noexcept
		{	
		pointer _Old = get();
		this->_Myptr() = _Ptr;
		if (_Old != pointer())
			this->get_deleter()(_Old);
		}

	unique_ptr(const _Myt&) = delete;

	_Myt& operator=(const _Myt&) = delete;

private:
	void _Delete()
		{	
		if (get() != pointer())
			this->get_deleter()(get());
		}
	};


	
template<class _Ty,
	class... _Types> inline
	typename enable_if<!is_array<_Ty>::value,
		unique_ptr<_Ty> >::type make_unique(_Types&&... _Args)
	{	
	return (unique_ptr<_Ty>(new _Ty(::std:: forward<_Types>(_Args)...)));
	}

template<class _Ty> inline
	typename enable_if<is_array<_Ty>::value && extent<_Ty>::value == 0,
		unique_ptr<_Ty> >::type make_unique(size_t _Size)
	{	
	typedef typename remove_extent<_Ty>::type _Elem;
	return (unique_ptr<_Ty>(new _Elem[_Size]()));
	}

template<class _Ty,
	class... _Types>
	typename enable_if<extent<_Ty>::value != 0,
		void>::type make_unique(_Types&&...) = delete;


template<class _Ty,
	class _Dx,
	class = enable_if_t<_Is_swappable<_Dx>::value>>
	void swap(unique_ptr<_Ty, _Dx>& _Left,
		unique_ptr<_Ty, _Dx>& _Right) noexcept
	{	
	_Left.swap(_Right);
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator==(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (_Left.get() == _Right.get());
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator!=(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator<(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	typedef typename unique_ptr<_Ty1, _Dx1>::pointer _Ptr1;
	typedef typename unique_ptr<_Ty2, _Dx2>::pointer _Ptr2;
	typedef typename common_type<_Ptr1, _Ptr2>::type _Common;
	return (less<_Common>()(_Left.get(), _Right.get()));

	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator>=(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator>(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty1,
	class _Dx1,
	class _Ty2,
	class _Dx2>
	bool operator<=(const unique_ptr<_Ty1, _Dx1>& _Left,
		const unique_ptr<_Ty2, _Dx2>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Dx>
	bool operator==(const unique_ptr<_Ty, _Dx>& _Left,
		nullptr_t) noexcept
	{	
	return (!_Left);
	}

template<class _Ty,
	class _Dx>
	bool operator==(nullptr_t,
		const unique_ptr<_Ty, _Dx>& _Right) noexcept
	{	
	return (!_Right);
	}

template<class _Ty,
	class _Dx>
	bool operator!=(const unique_ptr<_Ty, _Dx>& _Left,
		nullptr_t _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Dx>
	bool operator!=(nullptr_t _Left,
		const unique_ptr<_Ty, _Dx>& _Right) noexcept
	{	
	return (!(_Left == _Right));
	}

template<class _Ty,
	class _Dx>
	bool operator<(const unique_ptr<_Ty, _Dx>& _Left,
		nullptr_t _Right)
	{	
	typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
	return (less<_Ptr>()(_Left.get(), _Right));
	}

template<class _Ty,
	class _Dx>
	bool operator<(nullptr_t _Left,
		const unique_ptr<_Ty, _Dx>& _Right)
	{	
	typedef typename unique_ptr<_Ty, _Dx>::pointer _Ptr;
	return (less<_Ptr>()(_Left, _Right.get()));
	}

template<class _Ty,
	class _Dx>
	bool operator>=(const unique_ptr<_Ty, _Dx>& _Left,
		nullptr_t _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Ty,
	class _Dx>
	bool operator>=(nullptr_t _Left,
		const unique_ptr<_Ty, _Dx>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class _Ty,
	class _Dx>
	bool operator>(const unique_ptr<_Ty, _Dx>& _Left,
		nullptr_t _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty,
	class _Dx>
	bool operator>(nullptr_t _Left,
		const unique_ptr<_Ty, _Dx>& _Right)
	{	
	return (_Right < _Left);
	}

template<class _Ty,
	class _Dx>
	bool operator<=(const unique_ptr<_Ty, _Dx>& _Left,
		nullptr_t _Right)
	{	
	return (!(_Right < _Left));
	}

template<class _Ty,
	class _Dx>
	bool operator<=(nullptr_t _Left,
		const unique_ptr<_Ty, _Dx>& _Right)
	{	
	return (!(_Right < _Left));
	}

		

enum class pointer_safety {	
	relaxed,
	preferred,
	strict
	};

typedef pointer_safety _Pointer_safety;

inline void declare_reachable(void *)
	{	
	}

template<class _Ty> inline
	_Ty *undeclare_reachable(_Ty *_Ptr)
	{	
	return (_Ptr);
	}

inline void declare_no_pointers(char *, size_t)
	{	
	}

inline void undeclare_no_pointers(char *, size_t)
	{	
	}

inline _Pointer_safety get_pointer_safety() noexcept
	{	
	return (pointer_safety::relaxed);
	}


namespace tr1 {	
using ::std:: allocate_shared;
using ::std:: bad_weak_ptr;
using ::std:: const_pointer_cast;
using ::std:: dynamic_pointer_cast;
using ::std:: enable_shared_from_this;
using ::std:: get_deleter;
using ::std:: make_shared;
using ::std:: shared_ptr;
using ::std:: static_pointer_cast;
using ::std:: swap;
using ::std:: weak_ptr;
}	
#line 1866 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\memory"

		
template<class _Ty = void>
	struct owner_less;	

template<class _Ty>
	struct owner_less<shared_ptr<_Ty> >
	{	
	typedef shared_ptr<_Ty> first_argument_type;
	typedef shared_ptr<_Ty> second_argument_type;
	typedef bool result_type;

	bool operator()(const shared_ptr<_Ty>& _Left,
		const shared_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	bool operator()(const shared_ptr<_Ty>& _Left,
		const weak_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	bool operator()(const weak_ptr<_Ty>& _Left,
		const shared_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}
	};

template<class _Ty>
	struct owner_less<weak_ptr<_Ty> >
	{	
	typedef weak_ptr<_Ty> first_argument_type;
	typedef weak_ptr<_Ty> second_argument_type;
	typedef bool result_type;

	bool operator()(const weak_ptr<_Ty>& _Left,
		const weak_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	bool operator()(const weak_ptr<_Ty>& _Left,
		const shared_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	bool operator()(const shared_ptr<_Ty>& _Left,
		const weak_ptr<_Ty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}
	};

template<>
	struct owner_less<void>
	{	
	typedef int is_transparent;

	template<class _Ty,
		class _Uty>
		bool operator()(const shared_ptr<_Ty>& _Left, const shared_ptr<_Uty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	template<class _Ty,
		class _Uty>
		bool operator()(const shared_ptr<_Ty>& _Left, const weak_ptr<_Uty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	template<class _Ty,
		class _Uty>
		bool operator()(const weak_ptr<_Ty>& _Left, const shared_ptr<_Uty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}

	template<class _Ty,
		class _Uty>
		bool operator()(const weak_ptr<_Ty>& _Left, const weak_ptr<_Uty>& _Right) const
		{	
		return (_Left.owner_before(_Right));
		}
	};

	
template<class _Ty,
	class _Dx>
	struct hash<unique_ptr<_Ty, _Dx> >
	{	
	typedef unique_ptr<_Ty, _Dx> argument_type;
	typedef size_t result_type;

	size_t operator()(const argument_type& _Keyval) const
		{	
		typedef typename argument_type::pointer _Ptrtype;
		return (hash<_Ptrtype>()(_Keyval.get()));
		}
	};

template<class _Ty>
	struct hash<shared_ptr<_Ty> >
	{	
	typedef shared_ptr<_Ty> argument_type;
	typedef size_t result_type;

	size_t operator()(const argument_type& _Keyval) const
		{	
		return (hash<_Ty *>()(_Keyval.get()));
		}
	};

		
inline void *align(size_t _Bound, size_t _Size,
	void *& _Ptr, size_t& _Space) noexcept
	{	
	size_t _Off = (size_t)((uintptr_t)_Ptr & (_Bound - 1));
	if (0 < _Off)
		_Off = _Bound - _Off;	
	if (_Space < _Off || _Space - _Off < _Size)
		return (0);
	else
		{	
		_Ptr = (char *)_Ptr + _Off;
		_Space -= _Off;
		return (_Ptr);
		}
	}

		
struct _Shared_ptr_spin_lock
	{	
	_Shared_ptr_spin_lock()
		{	
		_Lock_shared_ptr_spin_lock();
		}

	~_Shared_ptr_spin_lock() noexcept
		{	
		_Unlock_shared_ptr_spin_lock();
		}
	};

template<class _Ty> inline
	bool atomic_is_lock_free(const shared_ptr<_Ty> *)
	{	
	return (false);
	}

template<class _Ty> inline
	shared_ptr<_Ty> atomic_load_explicit(const shared_ptr<_Ty> *_Ptr,
		memory_order)
	{	
	_Shared_ptr_spin_lock _Lock;
	shared_ptr<_Ty> _Result = *_Ptr;
	return (_Result);
	}

template<class _Ty> inline
	shared_ptr<_Ty> atomic_load(const shared_ptr<_Ty> *_Ptr)
	{	
	return (::std:: atomic_load_explicit(_Ptr, memory_order_seq_cst));
	}

template<class _Ty> inline
	void atomic_store_explicit(shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other,
		memory_order)
	{	
	_Shared_ptr_spin_lock _Lock;
	_Ptr->swap(_Other);
	}

template<class _Ty> inline
	void atomic_store(shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other)
	{	
	::std:: atomic_store_explicit(_Ptr, ::std:: move(_Other), memory_order_seq_cst);
	}

template<class _Ty> inline
	shared_ptr<_Ty> atomic_exchange_explicit(
		shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other,
		memory_order)
	{	
	_Shared_ptr_spin_lock _Lock;
	_Ptr->swap(_Other);
	return (_Other);
	}

template<class _Ty> inline
	shared_ptr<_Ty> atomic_exchange(
		shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> _Other)
	{	
	return (::std:: atomic_exchange_explicit(_Ptr, ::std:: move(_Other), memory_order_seq_cst));
	}

template<class _Ty> inline
	bool atomic_compare_exchange_weak_explicit(
		shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp, shared_ptr<_Ty> _Value,
		memory_order, memory_order)
	{	
	shared_ptr<_Ty> _Old_exp;	
	_Shared_ptr_spin_lock _Lock;
	bool _Success = _Ptr->get() == _Exp->get()
		&& !_Ptr->owner_before(*_Exp)
		&& !_Exp->owner_before(*_Ptr);
	if (_Success)
		_Ptr->swap(_Value);
	else
		{	
		_Exp->swap(_Old_exp);
		*_Exp = *_Ptr;
		}
	return (_Success);
	}

template<class _Ty> inline
	bool atomic_compare_exchange_weak(
		shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp,
			shared_ptr<_Ty> _Value)
	{	
	return (::std:: atomic_compare_exchange_weak_explicit(_Ptr, _Exp, ::std:: move(_Value),
		memory_order_seq_cst, memory_order_seq_cst));
	}

template<class _Ty> inline
	bool atomic_compare_exchange_strong_explicit(
		shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp, shared_ptr<_Ty> _Value,
		memory_order, memory_order)
	{	
	return (::std:: atomic_compare_exchange_weak_explicit(_Ptr, _Exp, ::std:: move(_Value),
		memory_order_seq_cst, memory_order_seq_cst));
	}

template<class _Ty> inline
	bool atomic_compare_exchange_strong(
	shared_ptr<_Ty> *_Ptr, shared_ptr<_Ty> *_Exp,
		shared_ptr<_Ty> _Value)
	{	
	return (::std:: atomic_compare_exchange_strong_explicit(_Ptr, _Exp, ::std:: move(_Value),
		memory_order_seq_cst, memory_order_seq_cst));
	}
}
 
 #pragma warning(pop)
 #pragma pack(pop)
#line 2118 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\memory"
#line 2119 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\memory"






#line 25 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concurrent_queue.h"


#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"
















#pragma once

#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"








#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\vcruntime.h"































































































































































































































































































































#line 10 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\crtdefs.h"
























































#line 20 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"



#line 24 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"



#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"



#line 32 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"











#line 1 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"




















#line 22 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"
typedef struct _GUID {
    unsigned long  Data1;
    unsigned short Data2;
    unsigned short Data3;
    unsigned char  Data4[ 8 ];
} GUID;
#line 29 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"
#line 30 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"






#line 37 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"
#line 38 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"






#line 45 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"
#line 46 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"






#line 53 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"
#line 54 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"












#line 67 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"








typedef GUID *LPGUID;
#line 77 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"



typedef const GUID *LPCGUID;
#line 82 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"




typedef GUID IID;
typedef IID *LPIID;


typedef GUID CLSID;
typedef CLSID *LPCLSID;


typedef GUID FMTID;
typedef FMTID *LPFMTID;







#line 104 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"







#line 112 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"
#line 113 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"







#line 121 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"
#line 122 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"







#line 130 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"
#line 131 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"







#line 139 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"
#line 140 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"

#line 142 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"








__inline int InlineIsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
   return (
      ((unsigned long *) &rguid1)[0] == ((unsigned long *) &rguid2)[0] &&
      ((unsigned long *) &rguid1)[1] == ((unsigned long *) &rguid2)[1] &&
      ((unsigned long *) &rguid1)[2] == ((unsigned long *) &rguid2)[2] &&
      ((unsigned long *) &rguid1)[3] == ((unsigned long *) &rguid2)[3]);
}

__inline int IsEqualGUID(const GUID & rguid1, const GUID & rguid2)
{
    return !memcmp(&rguid1, &rguid2, sizeof(GUID));
}











#line 175 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"

















__inline bool operator==(const GUID & guidOne, const GUID & guidOther)
{
    return !!IsEqualGUID(guidOne,guidOther);
}

__inline bool operator!=(const GUID & guidOne, const GUID & guidOther)
{
    return !(guidOne == guidOther);
}
#line 202 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"
#line 203 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"
#line 204 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"
#line 205 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"
#line 206 "C:\\Program Files (x86)\\Windows Kits\\10\\Include\\10.0.10586.0\\shared\\guiddef.h"
#line 44 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"



#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pplinterface.h"















#pragma once







namespace Concurrency
{






typedef void (__cdecl * TaskProc_t)(void *);




struct __declspec(novtable) scheduler_interface
{
    virtual void schedule( TaskProc_t, void* ) = 0;
};






struct scheduler_ptr
{
    
    
    
    explicit scheduler_ptr(std::shared_ptr<scheduler_interface> _Scheduler) : _M_sharedScheduler(std::move(_Scheduler))
    {
        _M_scheduler = _M_sharedScheduler.get();
    }

    
    
    
    explicit scheduler_ptr(  scheduler_interface * _PScheduler) : _M_scheduler(_PScheduler)
    {
    }

    
    
    
    scheduler_interface *operator->() const
    {
        return get();
    }

    
    
    
    scheduler_interface * get() const
    {
        return _M_scheduler;
    }

    
    
    
    operator bool() const { return get() != nullptr; }

private:

    std::shared_ptr<scheduler_interface> _M_sharedScheduler;
    scheduler_interface * _M_scheduler;
};












enum task_group_status
{
    
    
    
    
    
    not_complete,

    
    
    
    
    completed,

    
    
    
    
    canceled
};









class invalid_operation : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit invalid_operation(  const char* _Message) noexcept
        : exception(_Message)
    { }

    
    
    
    
    invalid_operation() noexcept
        : exception()
    {}
};









class task_canceled : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit task_canceled(  const char * _Message) noexcept
        : exception(_Message)
    {}

    
    
    
    
    task_canceled() noexcept
        : exception()
    {}
};

namespace details
{






class _Interruption_exception : public std::exception
{
public:
    explicit _Interruption_exception(const char * _Message) noexcept
        : exception(_Message)
    {}

    _Interruption_exception() noexcept
        : exception()
    {}
};
















enum _TaskInliningMode
{
    
    _NoInline = 0,
    
    _DefaultAutoInline = 16,
    
    _ForceInline = -1,
};




typedef std::atomic<long> atomic_long;
typedef std::atomic<size_t> atomic_size_t;

template<typename _T>
_T atomic_compare_exchange(std::atomic<_T>& _Target, _T _Exchange, _T _Comparand)
{
    _T _Result = _Comparand;
    _Target.compare_exchange_strong(_Result, _Exchange);
    return _Result;
}

template<typename _T>
_T atomic_exchange(std::atomic<_T>& _Target, _T _Value)
{
    return _Target.exchange(_Value);
}

template<typename _T>
_T atomic_increment(std::atomic<_T>& _Target)
{
    return _Target.fetch_add(1) + 1;
}

template<typename _T>
_T atomic_decrement(std::atomic<_T>& _Target)
{
    return _Target.fetch_sub(1) - 1;
}

template<typename _T>
_T atomic_add(std::atomic<_T>& _Target, _T _Value)
{
    return _Target.fetch_add(_Value) + _Value;
}

}} 

#line 272 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\pplinterface.h"
#line 48 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"

#pragma pack(push,8)





struct _SECURITY_ATTRIBUTES;
typedef _SECURITY_ATTRIBUTES* LPSECURITY_ATTRIBUTES;

struct _GROUP_AFFINITY;
typedef _GROUP_AFFINITY* PGROUP_AFFINITY;



typedef unsigned long DWORD;





typedef   long HRESULT;
#line 71 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"
#line 72 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"
typedef void * HANDLE;








#line 82 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"












#line 95 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"








typedef unsigned __int64 DWORD_PTR, *PDWORD_PTR;

#line 106 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"


















#line 125 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"




typedef void * _CONCRT_BUFFER;








namespace Concurrency
{














__declspec(dllimport) void __cdecl wait(unsigned int _Milliseconds);
















__declspec(dllimport) void * __cdecl Alloc(size_t _NumBytes);














__declspec(dllimport) void __cdecl Free(    void * _PAllocation);































__declspec(dllimport) void __cdecl set_task_execution_resources(DWORD_PTR _ProcessAffinityMask);























__declspec(dllimport) void __cdecl set_task_execution_resources(unsigned short _Count, PGROUP_AFFINITY _PGroupAffinity);

#line 245 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"






typedef void (__cdecl * TaskProc)(void *);




class Scheduler;
class ScheduleGroup;
class Context;

namespace details
{
    
    
    
    class ContextBase;
    class _TaskCollectionBase;

    
    
    
    template<class _Ty>
    void _InternalDeleteHelper(_Ty * _PObject)
    {
        delete _PObject;
    }

    
    
    struct _AllocBase
    {
        
        void * operator new(size_t _Size)
        {
            return ::Concurrency::Alloc(_Size);
        }

        
        void operator delete(void * _Ptr) throw()
        {
            ::Concurrency::Free(_Ptr);
        }

        
        void * operator new(size_t _Size, const std::nothrow_t&) throw()
        {
            void * _Ptr;

            try
            {
                _Ptr = ::Concurrency::Alloc(_Size);
            }
            catch(...)
            {
                _Ptr = 0;
            }

            return (_Ptr);
        }

        
        void operator delete(void * _Ptr, const std::nothrow_t&) throw()
        {
            operator delete(_Ptr);
        }

        
        void * operator new[](size_t _Size)
        {
            return operator new(_Size);
        }

        
        void operator delete[](void * _Ptr) throw()
        {
            operator delete(_Ptr);
        }

        
        void * operator new[](size_t _Size, const std::nothrow_t& _No_throw) throw ()
        {
            return operator new(_Size, _No_throw);
        }

        
        void operator delete[](void * _Ptr, const std::nothrow_t& _No_throw) throw()
        {
            operator delete(_Ptr, _No_throw);
        }

        
        void * operator new(size_t, void * _Location) throw()
        {
            return _Location;
        }

        
        void operator delete(void *, void *) throw()
        {
        }

        
        void * __cdecl operator new[](size_t, void * _Location) throw()
        {
            return _Location;
        }

        
        void __cdecl operator delete[](void *, void *) throw()
        {
        }
    };

    
    class _Context
    {
    public:
        __declspec(dllimport) _Context(::Concurrency::Context * _PContext = 0) : _M_pContext(_PContext) {}
        __declspec(dllimport) static _Context __cdecl _CurrentContext();
        __declspec(dllimport) static void __cdecl _Yield();
        __declspec(dllimport) static void __cdecl _Oversubscribe(bool _BeginOversubscription);
        __declspec(dllimport) bool _IsSynchronouslyBlocked() const;
    private:
        ::Concurrency::Context * _M_pContext;
    };

    class _Scheduler
    {
    public:
        __declspec(dllimport) _Scheduler(::Concurrency::Scheduler * _PScheduler = 0) : _M_pScheduler(_PScheduler) {}
        __declspec(dllimport) unsigned int _Reference();
        __declspec(dllimport) unsigned int _Release();
        __declspec(dllimport) ::Concurrency::Scheduler * _GetScheduler() { return _M_pScheduler; }

    private:
        ::Concurrency::Scheduler * _M_pScheduler;
    };

    class _CurrentScheduler
    {
    public:
        __declspec(dllimport) static void __cdecl _ScheduleTask(TaskProc _Proc, void * _Data);
        __declspec(dllimport) static unsigned int __cdecl _Id();
        __declspec(dllimport) static unsigned int __cdecl _GetNumberOfVirtualProcessors();
        __declspec(dllimport) static _Scheduler __cdecl _Get();
    };

    
    
    
    template <size_t _Size>
    struct _Subatomic_impl { };

    template<>
    struct _Subatomic_impl<4> {
        template <typename _Ty>
        static void _StoreWithRelease(volatile _Ty& _Location, _Ty _Rhs) {
            
            
            _Location = _Rhs;
        }

        template <typename _Ty>
        static _Ty _LoadWithAquire(volatile _Ty& _Location) {
            
            
            return _Location;
        }

        template <typename _Ty>
        static _Ty _CompareAndSwap(volatile _Ty& _Location, _Ty _NewValue, _Ty _Comperand) {
            return (_Ty)_InterlockedCompareExchange((volatile long*)&_Location, (long)_NewValue, (long)_Comperand);
        }

        template <typename _Ty>
        static _Ty _FetchAndAdd(volatile _Ty& _Location, _Ty _Addend) {
            return (_Ty)_InterlockedExchangeAdd((volatile long*)&_Location, (long)_Addend);
        }

        template <typename _Ty>
        static _Ty _Increment(volatile _Ty& _Location) {
            return (_Ty)_InterlockedIncrement((volatile long*)&_Location);
        }

        template <typename _Ty>
        static _Ty _Decrement(volatile _Ty& _Location) {
            return (_Ty)_InterlockedDecrement((volatile long*)&_Location);
        }
    };


    template<>
    struct _Subatomic_impl<8> {
        template <typename _Ty>
        static void _StoreWithRelease(volatile _Ty& _Location, _Ty _Rhs) {
            
            _Location = _Rhs;
        }

        template <typename _Ty>
        static _Ty _LoadWithAquire(volatile _Ty& _Location) {
            
            return _Location;
        }

        template <typename _Ty>
        static _Ty _CompareAndSwap(volatile _Ty& _Location, _Ty _NewValue, _Ty _Comperand) {
            return (_Ty)_InterlockedCompareExchange64((volatile __int64*)&_Location, (__int64)_NewValue, (__int64)_Comperand);
        }

        template <typename _Ty>
        static _Ty _FetchAndAdd(volatile _Ty& _Location, _Ty _Addend) {
            return (_Ty)_InterlockedExchangeAdd64((volatile __int64*)&_Location, (__int64)_Addend);
        }

        template <typename _Ty>
        static _Ty _Increment(volatile _Ty& _Location) {
            return (_Ty)_InterlockedIncrement64((volatile __int64*)&_Location);
        }

        template <typename _Ty>
        static _Ty _Decrement(volatile _Ty& _Location) {
            return (_Ty)_InterlockedDecrement64((volatile __int64*)&_Location);
        }
    };
#line 476 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"


    
    
    
    
    template <typename _Ty>
    class _Subatomic {
    private:
        volatile _Ty _M_value;

    public:
        operator _Ty() const volatile {
            return _Subatomic_impl<sizeof(_Ty)>::_LoadWithAquire(_M_value);
        }

        _Ty operator=(_Ty _Rhs) {
            _Subatomic_impl<sizeof(_Ty)>::_StoreWithRelease(_M_value, _Rhs);
            return _Rhs;
        }

        _Ty _CompareAndSwap(_Ty _NewValue, _Ty _Comperand) {
            return _Subatomic_impl<sizeof(_Ty)>::_CompareAndSwap(_M_value, _NewValue, _Comperand);
        }

        _Ty _FetchAndAdd(_Ty _Addend) {
            return _Subatomic_impl<sizeof(_Ty)>::_FetchAndAdd(_M_value, _Addend);
        }

        _Ty operator++() {
            return _Subatomic_impl<sizeof(_Ty)>::_Increment(_M_value);
        }

        _Ty operator++(int) {
            return _Subatomic_impl<sizeof(_Ty)>::_Increment(_M_value) - 1;
        }

        _Ty operator--() {
            return _Subatomic_impl<sizeof(_Ty)>::_Decrement(_M_value);
        }

        _Ty operator--(int) {
            return _Subatomic_impl<sizeof(_Ty)>::_Decrement(_M_value) + 1;
        }

        _Ty operator+=(_Ty _Addend) {
            return _FetchAndAdd(_Addend) + _Addend;
        }
    };

    
    
    
    class _SpinLock
    {
    private:
        volatile long& _M_flag;

    public:
        __declspec(dllimport) _SpinLock(volatile long& _Flag);
        __declspec(dllimport) ~_SpinLock();

    private:
        _SpinLock(const _SpinLock&);
        void operator=(const _SpinLock&);
    };

    
    
    
    
    struct _SpinCount
    {
        
        
        static void __cdecl _Initialize();

        
        __declspec(dllimport) static unsigned int __cdecl _Value();

        
        static unsigned int _S_spinCount;
    };

    
    
    
    
    void __declspec(dllimport) __cdecl _UnderlyingYield();

    
    
    
    
    
    unsigned int __declspec(dllimport) __cdecl _GetConcurrency();

    
    
    
    
    template<unsigned int _YieldCount = 1>
    class __declspec(dllimport) _SpinWait
    {
    public:

        typedef void (__cdecl *_YieldFunction)();

        
        
        
        
        _SpinWait(_YieldFunction _YieldMethod = _UnderlyingYield)
            : _M_yieldFunction(_YieldMethod), _M_state(_StateInitial)
        {
            
        }

        
        
        
        
        void _SetSpinCount(unsigned int _Count)
        {
            __assume(_M_state == _StateInitial);
            if (_Count == 0)
            {
                
                _M_state = _StateSingle;
            }
            else
            {
                _M_currentSpin = _Count;
                _M_currentYield = _YieldCount;
                _M_state = _StateSpin;
            }
        }

        
        
        
        
        
        
        
        
        
        
        
        
        bool _SpinOnce()
        {
            switch (_M_state)
            {
            case _StateSpin:
            {
                unsigned long _Count = _NumberOfSpins();

                for (unsigned long _I = 0; _I < _Count; _I++)
                {
                    _mm_pause();
                }

                if (!_ShouldSpinAgain())
                {
                    _M_state = (_M_currentYield == 0) ? _StateBlock : _StateYield;
                }

                return true;
            }

            case _StateYield:
                __assume(_M_currentYield > 0);
                if (--_M_currentYield == 0)
                {
                    _M_state = _StateBlock;
                }

                
                _DoYield();
                return true;

            case _StateBlock:
                
                _Reset();
                return false;

            case _StateSingle:
                
                _DoYield();
                return false;

            case _StateInitial:
                
                _Reset();
                return _SpinOnce();
            default:
                
                return false;
            };
        }

    protected:

        
        
        
        
        enum _SpinState
        {
            _StateInitial,
            _StateSpin,
            _StateYield,
            _StateBlock,
            _StateSingle
        };

        
        
        
        
        void _DoYield()
        {
#pragma warning ( push )
#pragma warning ( disable : 6326 )  
            bool _ShouldYield = (_YieldCount != 0);
#pragma warning ( pop )
            if (_ShouldYield)
            {
                __assume(_M_yieldFunction != 0);
                _M_yieldFunction();
            }
            else
            {
                _mm_pause();
            }
        }

        
        
        
        
        void _Reset()
        {
            _M_state = _StateInitial;

            
            
            _SetSpinCount(_SpinCount::_Value());

            __assume(_M_state != _StateInitial);
        }

        
        
        
        
        
        
        
        unsigned long _NumberOfSpins()
        {
            return 1;
        }

        
        
        
        
        
        
        
        bool _ShouldSpinAgain()
        {
            return (--_M_currentSpin > 0);
        }

        unsigned long  _M_currentSpin;
        unsigned long  _M_currentYield;
        _SpinState     _M_state;
        _YieldFunction _M_yieldFunction;
    };

    typedef _SpinWait<>   _SpinWaitBackoffNone;
    typedef _SpinWait<0>  _SpinWaitNoYield;

    
    
    
    
    
    class _ReentrantBlockingLock
    {
    public:
        
        __declspec(dllimport) _ReentrantBlockingLock();

        
        __declspec(dllimport) ~_ReentrantBlockingLock();

        
        __declspec(dllimport) void _Acquire();

        
        
        __declspec(dllimport) bool _TryAcquire();

        
        __declspec(dllimport) void _Release();


        
        class _Scoped_lock
        {
        public:
            
            explicit _Scoped_lock(_ReentrantBlockingLock& _Lock) : _M_lock(_Lock)
            {
                _M_lock._Acquire();
            }

            
            ~_Scoped_lock()
            {
                _M_lock._Release();
            }
        private:
            _ReentrantBlockingLock& _M_lock;

            _Scoped_lock(const _Scoped_lock&);                    
            _Scoped_lock const & operator=(const _Scoped_lock&);  
        };

    private:
        
        
        _CONCRT_BUFFER _M_criticalSection[(4 * sizeof(void *) + 2 * sizeof(long) + sizeof(_CONCRT_BUFFER) - 1) / sizeof(_CONCRT_BUFFER)];
    };

    
    
    
    
    
    class _ReentrantLock
    {
    public:
        
        __declspec(dllimport) _ReentrantLock();

        
        __declspec(dllimport) void _Acquire();

        
        
        __declspec(dllimport) bool _TryAcquire();

        
        __declspec(dllimport) void _Release();

        
        class _Scoped_lock
        {
        public:
            
            explicit _Scoped_lock(_ReentrantLock& _Lock) : _M_lock(_Lock)
            {
                _M_lock._Acquire();
            }

            
            ~_Scoped_lock()
            {
                _M_lock._Release();
            }
        private:
            _ReentrantLock& _M_lock;

            _Scoped_lock(const _Scoped_lock&);                    
            _Scoped_lock const & operator=(const _Scoped_lock&);  
        };

    private:
        long _M_recursionCount;
        volatile long _M_owner;
    };

    
    
    
    
    
    class _NonReentrantBlockingLock
    {
    public:
        
        
        
        
        __declspec(dllimport) _NonReentrantBlockingLock();

        
        __declspec(dllimport) ~_NonReentrantBlockingLock();

        
        __declspec(dllimport) void _Acquire();

        
        
        __declspec(dllimport) bool _TryAcquire();

        
        __declspec(dllimport) void _Release();

        
        class _Scoped_lock
        {
        public:
            
            explicit _Scoped_lock(_NonReentrantBlockingLock& _Lock) : _M_lock(_Lock)
            {
                _M_lock._Acquire();
            }

            
            ~_Scoped_lock()
            {
                _M_lock._Release();
            }
        private:
            _NonReentrantBlockingLock& _M_lock;

            _Scoped_lock(const _Scoped_lock&);                    
            _Scoped_lock const & operator=(const _Scoped_lock&);  
        };

    private:
        
        
        _CONCRT_BUFFER _M_criticalSection[(4 * sizeof(void *) + 2 * sizeof(long) + sizeof(_CONCRT_BUFFER) - 1) / sizeof(_CONCRT_BUFFER)];
    };

    
    
    
    
    
    
    
    
    
    class _ReaderWriterLock
    {
    public:
        
        
        
        
        __declspec(dllimport) _ReaderWriterLock();

        
        
        __declspec(dllimport) void _AcquireRead();

        
        __declspec(dllimport) void _ReleaseRead();

        
        
        __declspec(dllimport) void _AcquireWrite();

        
        __declspec(dllimport) void _ReleaseWrite();

        
        
        __declspec(dllimport) bool _TryAcquireWrite();

        
        bool _HasWriteLock() const
        {
            return (_M_state == _Write);
        }

        
        void _FlushWriteOwners();

        
        class _Scoped_lock
        {
        public:
            
            explicit _Scoped_lock(_ReaderWriterLock& _Lock) : _M_lock(_Lock)
            {
                _M_lock._AcquireWrite();
            }

            
            ~_Scoped_lock()
            {
                _M_lock._ReleaseWrite();
            }

        private:

            _ReaderWriterLock& _M_lock;

            _Scoped_lock(const _Scoped_lock&);                    
            _Scoped_lock const & operator=(const _Scoped_lock&);  
        };

        
        class _Scoped_lock_read
        {
        public:
            
            explicit _Scoped_lock_read(_ReaderWriterLock& _Lock) : _M_lock(_Lock)
            {
                _M_lock._AcquireRead();
            }

            
            ~_Scoped_lock_read()
            {
                _M_lock._ReleaseRead();
            }

        private:

            _ReaderWriterLock& _M_lock;

            _Scoped_lock_read(const _Scoped_lock_read&);                    
            _Scoped_lock_read const & operator=(const _Scoped_lock_read&);  
        };

    private:
        
        
        
        
        enum _State
        {
          _Write = -1,
          _Free  = 0,
          _Read  = 1
        };

        
        
        volatile long _M_state;

        
        
        
        volatile long _M_numberOfWriters;

        
        static void __cdecl _WaitEquals(volatile const long& _Location, long _Value, long _Mask = 0xFFFFFFFF);
    };

    
    
    

    
    
    
    template<typename _ElemType>
    class _MallocaArrayHolder
    {
    public:

        _MallocaArrayHolder() : _M_ElemArray(0), _M_ElemsConstructed(0) {}

        
        void _Initialize(_ElemType * _Elem)
        {
            
            __assume(_M_ElemArray == 0 && _M_ElemsConstructed == 0);
            _M_ElemArray = _Elem;
            _M_ElemsConstructed = 0;
        }

        
        
        
        _ElemType * _InitOnRawMalloca(void * _MallocaRet)
        {
            if (_MallocaRet == nullptr)
                throw std::bad_alloc();
            _Initialize(static_cast<_ElemType *>(_MallocaRet));
            return static_cast<_ElemType *>(_MallocaRet);
        }

        
        
        void _IncrementConstructedElemsCount()
        {
            __assume(_M_ElemArray != 0); 
            _M_ElemsConstructed++;
        }

        virtual ~_MallocaArrayHolder()
        {
            for( size_t _I=0; _I < _M_ElemsConstructed; ++_I )
            {
                _M_ElemArray[_I].~_ElemType();
            }
            
            _freea(_M_ElemArray);
        }
    private:
        _ElemType * _M_ElemArray;
        size_t     _M_ElemsConstructed;

        
        _MallocaArrayHolder(const _MallocaArrayHolder & );
        _MallocaArrayHolder&  operator = (const _MallocaArrayHolder & );
    };

    
    
    
    template<typename _ElemType>
    class _MallocaListHolder
    {
    public:
        
        size_t _GetAllocationSize() const
        {
            return sizeof(_ElemNodeType);
        }

        _MallocaListHolder() : _M_FirstNode(0)
        {
        }

        
        void _AddNode(_ElemType * _Elem)
        {
            _ElemNodeType * _Node = reinterpret_cast<_ElemNodeType *>(_Elem);
            _Node->_M_Next = _M_FirstNode;
            _M_FirstNode = reinterpret_cast<_ElemNodeType *>(_Elem);
        }

        
        
        
        _ElemType * _AddRawMallocaNode(void * _MallocaRet)
        {
            if (_MallocaRet == nullptr)
                throw std::bad_alloc();
            _AddNode(static_cast<_ElemType *>(_MallocaRet));
            return static_cast<_ElemType *>(_MallocaRet);
        }

        
         virtual ~_MallocaListHolder()
        {
            for( _ElemNodeType * _Node = _M_FirstNode; _Node != 0; )
            {
                auto _M_Next = _Node->_M_Next;
                _Node->_M_Elem._ElemType::~_ElemType();
                 _freea(_Node);
                _Node = _M_Next;
            }
        }

    private:

        class _ElemNodeType
        {
            friend class _MallocaListHolder;
            _ElemType _M_Elem;
            _ElemNodeType * _M_Next;
            
            _ElemNodeType();
            ~_ElemNodeType();
            
            _ElemNodeType(const _ElemNodeType & );
            _ElemNodeType &  operator = (const _ElemNodeType & );
        };

        _ElemNodeType* _M_FirstNode;

        
        _MallocaListHolder(const _MallocaListHolder & );
        _MallocaListHolder &  operator = (const _MallocaListHolder & );
    };

    
    class _StructuredTaskCollection;
    class _TaskCollection;
    class _UnrealizedChore;
} 

















class scheduler_resource_allocation_error : public std::exception
{
public:
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) scheduler_resource_allocation_error(  const char * _Message, HRESULT _Hresult) throw();

    
    
    
    
    
    
    
    explicit __declspec(dllimport) scheduler_resource_allocation_error(HRESULT _Hresult) throw();

    
    
    
    
    
    
    
    __declspec(dllimport) HRESULT get_error_code() const throw();

private:
    HRESULT _Hresult;
};











class scheduler_worker_creation_error : public scheduler_resource_allocation_error
{
public:
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) scheduler_worker_creation_error(  const char * _Message, HRESULT _Hresult) throw();

    
    
    
    
    
    
    
    explicit __declspec(dllimport) scheduler_worker_creation_error(HRESULT _Hresult) throw();
};





class unsupported_os  : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) unsupported_os(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) unsupported_os() throw();
};








class scheduler_not_attached  : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) scheduler_not_attached(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) scheduler_not_attached() throw();
};








class improper_scheduler_attach : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) improper_scheduler_attach(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) improper_scheduler_attach() throw();
};









class improper_scheduler_detach : public std::exception
{
public:

    
    
    
    
    
    
    
    explicit __declspec(dllimport) improper_scheduler_detach(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) improper_scheduler_detach() throw();
};








class improper_scheduler_reference : public std::exception
{
public:

    
    
    
    
    
    
    
    explicit __declspec(dllimport) improper_scheduler_reference(  const char* _Message) throw();

    
    
    
    
    __declspec(dllimport) improper_scheduler_reference() throw();
};







class default_scheduler_exists : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) default_scheduler_exists(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) default_scheduler_exists() throw();
};















class context_unblock_unbalanced : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) context_unblock_unbalanced(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) context_unblock_unbalanced() throw();
};








class context_self_unblock : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) context_self_unblock(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) context_self_unblock() throw();
};


















class missing_wait : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) missing_wait(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) missing_wait() throw();
};











class bad_target : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) bad_target(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) bad_target() throw();
};






class message_not_found : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) message_not_found(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) message_not_found() throw();
};








class invalid_link_target : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) invalid_link_target(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) invalid_link_target() throw();
};











class invalid_scheduler_policy_key : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) invalid_scheduler_policy_key(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) invalid_scheduler_policy_key() throw();
};










class invalid_scheduler_policy_value : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) invalid_scheduler_policy_value(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) invalid_scheduler_policy_value() throw();
};










class invalid_scheduler_policy_thread_specification : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) invalid_scheduler_policy_thread_specification(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) invalid_scheduler_policy_thread_specification() throw();
};
















class nested_scheduler_missing_detach : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) nested_scheduler_missing_detach(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) nested_scheduler_missing_detach() throw();
};





class operation_timed_out : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) operation_timed_out(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) operation_timed_out() throw();
};
















class invalid_multiple_scheduling : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) invalid_multiple_scheduling(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) invalid_multiple_scheduling() throw();
};








class invalid_oversubscribe_operation : public std::exception
{
public:
    
    
    
    
    
    
    
    explicit __declspec(dllimport) invalid_oversubscribe_operation(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) invalid_oversubscribe_operation() throw();
};











class improper_lock : public std::exception
{
public:

    
    
    
    
    
    
    
    explicit __declspec(dllimport) improper_lock(  const char * _Message) throw();

    
    
    
    
    __declspec(dllimport) improper_lock() throw();
};





class location
{
public:

    
    
    
    
    
    
    
    location() :
        _M_type(_System),
        _M_reserved(0),
        _M_bindingId(0),
        _M_pBinding(0),
        _M_ptr(0)
    {
    }

    
    
    
    
    location(const location& _Src)
    {
        _Assign(_Src);
    }



    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static location __cdecl from_numa_node(unsigned short _NumaNodeNumber);

#line 1869 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"

    
    
    
    
    
    
    
    __declspec(dllimport) static location __cdecl current();

    
    
    
    
    
    
    
    location& operator=(const location& _Rhs)
    {
        _Assign(_Rhs);
        return *this;
    }

    
    
    
    
    ~location()
    {
    }

    
    
    
    
    
    
    
    bool operator==(const location& _Rhs) const
    {
        return (_M_type == _Rhs._M_type && _M_ptr == _Rhs._M_ptr);
    }

    
    
    
    
    
    
    
    bool operator!=(const location& _Rhs) const
    {
        return !operator==(_Rhs);
    }

    
    
    
    
    

    
    
    
    
    __declspec(dllimport) static location __cdecl _Current_node();

    
    
    
    
    enum _Type
    {
        
        
        
        _System, 

        
        
        
        _NumaNode, 

        
        
        
        _SchedulingNode, 

        
        
        
        _ExecutionResource, 
    };

    
    
    
    
    location(_Type _LocationType, unsigned int _Id, unsigned int _BindingId = 0,   void *_PBinding = 0);

    
    
    
    
    
    
    
    
    
    
    
    bool _FastVPIntersects(const location& _Rhs) const;

    
    
    
    
    
    
    
    
    
    
    
    bool _FastNodeIntersects(const location& _Rhs) const;

    
    
    
    
    void _Assign(const location& _Rhs)
    {
        _M_type = _Rhs._M_type;
        _M_reserved = _Rhs._M_reserved;

        _M_ptr = _Rhs._M_ptr;

        _M_bindingId = _Rhs._M_bindingId;
        _M_pBinding = _Rhs._M_pBinding;
    }

    
    
    
    
    bool _Is_system() const
    {
        return (_Type)_M_type == _System;
    }

    
    
    
    
    template<typename _Ty>
    _Ty* _As() const
    {
        return reinterpret_cast<_Ty *>(_M_pBinding);
    }

    
    
    
    
    unsigned int _GetId() const
    {
        return _M_id;
    }

    
    
    
    
    _Type _GetType() const
    {
        return (_Type)_M_type;
    }

    
    
    
    
    unsigned int _GetBindingId() const
    {
        return _M_bindingId;
    }

private:

    
    unsigned int _M_type : 28;

    
    unsigned int _M_reserved : 4;

    
    unsigned int _M_bindingId;

    
    union
    {
        
        unsigned int _M_id;

        
        void *_M_ptr;
    };

    
    
    void *_M_pBinding;
};












class ScheduleGroup
{
public:

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    virtual void ScheduleTask(TaskProc _Proc,   void * _Data) =0;

    
    
    
    
    
    
    
    virtual unsigned int Id() const =0;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    virtual unsigned int Reference() =0;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    virtual unsigned int Release() =0;

protected:

    
    
    
    template<class _Ty> friend void ::Concurrency::details::_InternalDeleteHelper(_Ty * _PObject);

    virtual ~ScheduleGroup() {};
};







const unsigned int MaxExecutionResources = 0xFFFFFFFF;







const unsigned int INHERIT_THREAD_PRIORITY = 0x0000F000;










enum PolicyElementKey
{
    
    
    
    
    
    
    
    SchedulerKind,

    
    
    
    
    
    
    
    
    
    
    MaxConcurrency,

    
    
    
    
    
    
    
    
    
    
    
    MinConcurrency,

    
    
    
    
    
    
    
    TargetOversubscriptionFactor,

    
    
    
    
    
    
    
    
    
    LocalContextCacheSize,

    
    
    
    
    
    
    ContextStackSize,

    
    
    
    
    
    
    
    
    ContextPriority,

    
    
    
    
    
    
    
    SchedulingProtocol,

    
    
    
    
    
    
    
    
    
    DynamicProgressFeedback,

    
    
    
    
    
    
    
    
    WinRTInitialization,

    
    
    
    
    MaxPolicyElementKey
};








enum SchedulerType
{
    
    
    
    
    ThreadScheduler,

    
    
    
    
    
    
    UmsThreadDefault = ThreadScheduler
};

#pragma deprecated(UmsThreadDefault)








enum SchedulingProtocolType
{
    
    
    
    
    
    
    EnhanceScheduleGroupLocality,

    
    
    
    
    
    EnhanceForwardProgress
};









enum DynamicProgressFeedbackType
{
    
    
    
    
    
    
    
    ProgressFeedbackDisabled,

    
    
    
    
    
    
    
    ProgressFeedbackEnabled
};








enum WinRTInitializationType
{
    
    
    
    
    
    InitializeWinRTAsMTA,

    
    
    
    
    
    DoNotInitializeWinRT
};














class SchedulerPolicy
{
public:

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) SchedulerPolicy();

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) SchedulerPolicy(size_t _PolicyKeyCount, ...);

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) SchedulerPolicy(const SchedulerPolicy& _SrcPolicy);

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) SchedulerPolicy& operator=(const SchedulerPolicy& _RhsPolicy);

    
    
    
    
    __declspec(dllimport) ~SchedulerPolicy();

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) unsigned int GetPolicyValue(PolicyElementKey _Key) const;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) unsigned int SetPolicyValue(PolicyElementKey _Key, unsigned int _Value);

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) void SetConcurrencyLimits(unsigned int _MinConcurrency, unsigned int _MaxConcurrency = MaxExecutionResources);

    
    
    
    
    
    
    
    
    
    void _ValidateConcRTPolicy() const;

private:

    struct _PolicyBag
    {
        union
        {
            unsigned int _M_pPolicyBag[MaxPolicyElementKey];
            struct
            {
                SchedulerType _M_schedulerKind;
                unsigned int _M_maxConcurrency;
                unsigned int _M_minConcurrency;
                unsigned int _M_targetOversubscriptionFactor;
                unsigned int _M_localContextCacheSize;
                unsigned int _M_contextStackSize;
                unsigned int _M_contextPriority;
                SchedulingProtocolType _M_schedulingProtocol;
                DynamicProgressFeedbackType _M_dynamicProgressFeedback;
                WinRTInitializationType _M_WinRTInitialization;
            } _M_specificValues;
        } _M_values;
    } *_M_pPolicyBag;

    
    
    
    
    void _Initialize(size_t _PolicyKeyCount, va_list * _PArgs);

    
    
    
    
    void _Assign(const SchedulerPolicy& _SrcPolicy);

    
    
    
    
    static bool __cdecl _ValidPolicyKey(PolicyElementKey _Key);

    
    
    
    
    static bool __cdecl _ValidPolicyValue(PolicyElementKey _Key, unsigned int _Value);

    
    
    
    
    static bool __cdecl _AreConcurrencyLimitsValid(unsigned int _MinConcurrency, unsigned int _MaxConcurrency);
    bool _AreConcurrencyLimitsValid() const;

    
    
    
    
    bool _ArePolicyCombinationsValid() const;

    
    
    
    
    void _ResolvePolicyValues();

    
    
    
    
    static char * __cdecl _StringFromPolicyKey(unsigned int _Index);
};













class CurrentScheduler
{
private:
    CurrentScheduler() {}

public:
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static unsigned int __cdecl Id();

    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static SchedulerPolicy __cdecl GetPolicy();

    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static Scheduler * __cdecl Get();

    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static unsigned int __cdecl GetNumberOfVirtualProcessors();

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static void __cdecl Create(const SchedulerPolicy& _Policy);

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static void __cdecl Detach();

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static void __cdecl RegisterShutdownEvent(HANDLE _ShutdownEvent);

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static ScheduleGroup * __cdecl CreateScheduleGroup();

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static ScheduleGroup * __cdecl CreateScheduleGroup(location& _Placement);

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static void __cdecl ScheduleTask(TaskProc _Proc,   void * _Data);

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static void __cdecl ScheduleTask(TaskProc _Proc,   void * _Data, location& _Placement);

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static bool __cdecl IsAvailableLocation(const location& _Placement);
};
















class Scheduler
{
protected:
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    Scheduler() {}

    
    
    
    
    virtual ~Scheduler() {}

public:

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static Scheduler * __cdecl Create(const SchedulerPolicy& _Policy);

    
    
    
    
    
    
    
    virtual unsigned int Id() const =0;

    
    
    
    
    
    
    
    
    
    virtual unsigned int GetNumberOfVirtualProcessors() const =0;


    
    
    
    
    
    
    
    
    
    
    virtual SchedulerPolicy GetPolicy() const =0;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    virtual unsigned int Reference() =0 ;

    
    
    
    
    
    
    
    
    
    
    
    
    
    virtual unsigned int Release() =0;

    
    
    
    
    
    
    
    
    
    virtual void RegisterShutdownEvent(HANDLE _Event) =0;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    virtual void Attach() =0;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static void __cdecl SetDefaultSchedulerPolicy(const SchedulerPolicy& _Policy);

    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static void __cdecl ResetDefaultSchedulerPolicy();

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    virtual ScheduleGroup * CreateScheduleGroup() =0;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    virtual ScheduleGroup * CreateScheduleGroup(location& _Placement) =0;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    virtual void ScheduleTask(TaskProc _Proc,   void * _Data) =0;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    virtual void ScheduleTask(TaskProc _Proc,   void * _Data, location& _Placement) =0;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    virtual bool IsAvailableLocation(const location& _Placement) const =0;
};


















class Context
{
public:
    
    
    
    
    
    
    
    virtual unsigned int GetId() const =0;

    
    
    
    
    
    
    
    
    
    
    
    
    
    virtual unsigned int GetVirtualProcessorId() const =0;

    
    
    
    
    
    
    
    
    
    
    
    
    
    virtual unsigned int GetScheduleGroupId() const =0;

    
    
    
    
    
    
    
    
    __declspec(dllimport) static unsigned int __cdecl Id();

    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static unsigned int __cdecl VirtualProcessorId();

    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static unsigned int __cdecl ScheduleGroupId();

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static void __cdecl Block();

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    virtual void Unblock() =0;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    virtual bool IsSynchronouslyBlocked() const =0;

    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static void __cdecl _SpinYield();

    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static void (__cdecl Yield)();

    
    
    
    
    
    
    
    
    
    
    
    static inline void __cdecl YieldExecution()
    {
        (Yield)();
    }

    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static bool __cdecl IsCurrentTaskCollectionCanceling();

    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static Context * __cdecl CurrentContext();

    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static void __cdecl Oversubscribe(bool _BeginOversubscription);

protected:

    
    
    
    template<class _Ty> friend void ::Concurrency::details::_InternalDeleteHelper(_Ty * _PObject);

    virtual ~Context() {};
};

#line 3461 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"








const size_t COOPERATIVE_WAIT_TIMEOUT = 0xffffffffffffffffui64;








const unsigned int COOPERATIVE_TIMEOUT_INFINITE = (unsigned int)-1;









class critical_section
{
public:

    
    
    
    
    __declspec(dllimport) critical_section();

    
    
    
    
    
    
    
    
    __declspec(dllimport) ~critical_section();

    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) void lock();

    
    
    
    
    
    
    
    
    __declspec(dllimport) bool try_lock();

    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) bool try_lock_for(unsigned int _Timeout);

    
    
    
    
    
    
    __declspec(dllimport) void unlock();

    
    
    
    
    typedef critical_section& native_handle_type;

    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) native_handle_type native_handle();

    
    
    
    
    
    
    
    
    void _Flush_current_owner();

    
    
    
    
    
    
    
    
    
    
    
    
    
    bool _Acquire_lock(void * _PLockingNode, bool _FHasExternalNode);

    
    
    
    
    class scoped_lock
    {
    public:

        
        
        
        
        
        
        
        
        
        explicit __declspec(dllimport) scoped_lock(critical_section& _Critical_section);

        
        
        
        
        
        __declspec(dllimport) ~scoped_lock();

    private:

        critical_section& _M_critical_section;
        _CONCRT_BUFFER _M_node[(4 * sizeof(void *) + 2 * sizeof(unsigned int) + sizeof(_CONCRT_BUFFER) - 1) / sizeof(_CONCRT_BUFFER)];

        scoped_lock(const scoped_lock&);                    
        scoped_lock const & operator=(const scoped_lock&);  
    };

private:
    
    
    
    
    
    
    
    
    
    void _Switch_to_active(void * _PLockingNode);

    _CONCRT_BUFFER  _M_activeNode[(4 * sizeof(void *) + 2 * sizeof(unsigned int) + sizeof(_CONCRT_BUFFER) - 1) / sizeof(_CONCRT_BUFFER)];
    void * volatile _M_pHead;
    void * volatile _M_pTail;

    
    
    
    
    critical_section(const critical_section&);

    
    
    
    
    critical_section& operator=(const critical_section&);
};










class reader_writer_lock
{
public:

    
    
    
    
    __declspec(dllimport) reader_writer_lock();

    
    
    
    
    
    
    
    
    __declspec(dllimport) ~reader_writer_lock();

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) void lock();

    
    
    
    
    
    
    
    
    __declspec(dllimport) bool try_lock();

    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) void lock_read();

    
    
    
    
    
    
    
    
    __declspec(dllimport) bool try_lock_read();

    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) void unlock();

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    void _Acquire_lock(void * _PLockingNode, bool _FHasExternalNode);

    
    
    
    
    class scoped_lock
    {
    public:
        
        
        
        
        
        
        
        
        explicit __declspec(dllimport) scoped_lock(reader_writer_lock& _Reader_writer_lock);

        
        
        
        
        __declspec(dllimport) ~scoped_lock();

    private:

        reader_writer_lock& _M_reader_writer_lock;
        _CONCRT_BUFFER _M_writerNode[(4 * sizeof(void *) + 2 * sizeof(unsigned int) + sizeof(_CONCRT_BUFFER) - 1) / sizeof(_CONCRT_BUFFER)];

        scoped_lock(const scoped_lock&);                    
        scoped_lock const & operator=(const scoped_lock&);  
    };

    
    
    
    
    class scoped_lock_read
    {
    public:
        
        
        
        
        
        
        
        
        
        explicit __declspec(dllimport) scoped_lock_read(reader_writer_lock& _Reader_writer_lock);

        
        
        
        
        __declspec(dllimport) ~scoped_lock_read();

    private:

        reader_writer_lock& _M_reader_writer_lock;

        scoped_lock_read(const scoped_lock_read&);                    
        scoped_lock_read const & operator=(const scoped_lock_read&);  
    };

private:

    
    
    
    
    
    
    
    
    bool _Set_next_writer(void * _PWriter);

    
    
    
    
    
    
    
    
    
    
    void * _Get_reader_convoy();

    
    
    
    
    
    
    void _Unlock_writer();

    
    
    
    
    
    void _Unlock_reader();

    
    
    
    
    
    
    
    
    
    
    void _Remove_last_writer(void * _PWriter);

    
    
    
    
    
    
    
    
    
    void _Switch_to_active(void * _PWriter);

    _CONCRT_BUFFER _M_activeWriter[(4 * sizeof(void *) + 2 * sizeof(unsigned int) + sizeof(_CONCRT_BUFFER) - 1) / sizeof(_CONCRT_BUFFER)];
    void *         _M_pReaderHead;
    void *         _M_pWriterHead;
    void *         _M_pWriterTail;
    volatile long  _M_lockState;

    
    
    
    
    reader_writer_lock (const reader_writer_lock& _Lock);

    
    
    
    
    reader_writer_lock& operator=(const reader_writer_lock& _Lock);
};








class event
{
public:

    
    
    
    
    __declspec(dllimport) event();

    
    
    
    
    
    
    
    
    __declspec(dllimport) ~event();

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) size_t wait(unsigned int _Timeout = COOPERATIVE_TIMEOUT_INFINITE);

    
    
    
    
    
    
    
    
    
    __declspec(dllimport) void set();

    
    
    
    
    
    
    __declspec(dllimport) void reset();

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    __declspec(dllimport) static size_t __cdecl wait_for_multiple(  event ** _PPEvents, size_t _Count, bool _FWaitAll, unsigned int _Timeout = COOPERATIVE_TIMEOUT_INFINITE);


    
    
    
    static const unsigned int timeout_infinite = COOPERATIVE_TIMEOUT_INFINITE;
private:

    
    event(const event& _Event);
    event& operator=(const event& _Event);

    void * volatile _M_pWaitChain;
    void * _M_pResetChain;
    ::Concurrency::critical_section _M_lock;
};

namespace details
{
    
    class _RefCounterBase
    {
    public:

        virtual ~_RefCounterBase()
        {
            __assume(_M_refCount == 0);
        }

        
        
        long _Reference()
        {
            long _Refcount = _InterlockedIncrement(&_M_refCount);

            
            __assume(_Refcount > 1);
            return _Refcount;
        }

        
        
        long _Release()
        {
            long _Refcount = _InterlockedDecrement(&_M_refCount);
            __assume(_Refcount >= 0);

            if (_Refcount == 0)
            {
                _Destroy();
            }

            return _Refcount;
        }

    protected:

        
        virtual void _Destroy()
        {
            delete this;
        }

        
        _RefCounterBase(long _InitialCount = 1) : _M_refCount(_InitialCount)
        {
            __assume(_M_refCount > 0);
        }

        
        volatile long _M_refCount;
    };

    class _CancellationTokenState;
    class _CancellationTokenRegistration;

    
    
    class _NonReentrantPPLLock
    {
    public:

        
        __declspec(dllimport) _NonReentrantPPLLock();
        _NonReentrantPPLLock(const _NonReentrantPPLLock&) = delete;

        _NonReentrantPPLLock& operator=(const _NonReentrantPPLLock&) = delete;
        
        __declspec(dllimport) void _Acquire(void * _Lock_node);

        
        __declspec(dllimport) void _Release();

        
        class _Scoped_lock
        {
        public:
            
            __declspec(dllimport) explicit _Scoped_lock(_NonReentrantPPLLock& _Lock);

            _Scoped_lock(const _Scoped_lock&) = delete;
            _Scoped_lock& operator=(const _Scoped_lock&) = delete;

            
            __declspec(dllimport) ~_Scoped_lock();

        private:
            _NonReentrantPPLLock& _M_lock;
            _CONCRT_BUFFER  _M_lockNode[(4 * sizeof(void *) + 2 * sizeof(unsigned int) + sizeof(_CONCRT_BUFFER) - 1) / sizeof(_CONCRT_BUFFER)];
        };

    private:
        
        ::Concurrency::critical_section _M_criticalSection;
    };

    
    class _ReentrantPPLLock
    {
    public:
        
        __declspec(dllimport) _ReentrantPPLLock();
        _ReentrantPPLLock(const _ReentrantPPLLock&) = delete;

        _ReentrantPPLLock& operator=(const _ReentrantPPLLock&) = delete;

        
        __declspec(dllimport) void _Acquire(void * _Lock_node);

        
        __declspec(dllimport) void _Release();

        
        class _Scoped_lock
        {
        public:
            
            __declspec(dllimport) explicit _Scoped_lock(_ReentrantPPLLock& _Lock);

            
            __declspec(dllimport) ~_Scoped_lock();

        private:
            _ReentrantPPLLock& _M_lock;
            _CONCRT_BUFFER  _M_lockNode[(4 * sizeof(void *) + 2 * sizeof(unsigned int) + sizeof(_CONCRT_BUFFER) - 1) / sizeof(_CONCRT_BUFFER)];

            _Scoped_lock(const _Scoped_lock&);                    
            _Scoped_lock const & operator=(const _Scoped_lock&);  
        };

    private:
        
        ::Concurrency::critical_section _M_criticalSection;

        
        long _M_recursionCount;

        
        volatile long _M_owner;
    };

    struct _Chore
    {
    protected:
        
        explicit _Chore(TaskProc _PFunction) : m_pFunction(_PFunction)
        {
        }

        _Chore()
        {
        }

        virtual ~_Chore()
        {
        }

    public:

        
        TaskProc m_pFunction;
    };

    
    
    
    class _UnrealizedChore : public _Chore, public _AllocBase
    {
    public:
        
        _UnrealizedChore() :
            _M_pTaskCollection(0)
        {
        }
        virtual ~_UnrealizedChore() {}


        
        void _Invoke()
        {
            _M_pChoreFunction(this);
        }

        
        void _SetDetached(bool _FDetached);

        
        ::Concurrency::details::_TaskCollectionBase* _OwningCollection() const
        {
            return _M_pTaskCollection;
        }

        
        
        void _SetRuntimeOwnsLifetime(bool _FValue)
        {
            _M_fRuntimeOwnsLifetime = _FValue;
        }

        
        
        bool _GetRuntimeOwnsLifetime() const
        {
            return _M_fRuntimeOwnsLifetime;
        }

        
        template <typename _ChoreType, typename _Function>
        static _ChoreType * _InternalAlloc(const _Function& _Func)
        {
            
            _ChoreType * _Chore = new _ChoreType(_Func);
            _Chore->_M_fRuntimeOwnsLifetime = true;
            return _Chore;
        }

        
        void _PrepareSteal(ContextBase *_PContext);

    protected:
        
        template <typename _ChoreType>
        static void __cdecl _InvokeBridge(void * _PContext)
        {
            auto _PChore = static_cast<_ChoreType *>(_PContext);
            (*_PChore)();
        }

        
        __declspec(dllimport) void _CheckTaskCollection();

    private:

        friend class _StructuredTaskCollection;
        friend class _TaskCollection;
        typedef void (__cdecl * CHOREFUNC)(_UnrealizedChore * _PChore);

        
        ::Concurrency::details::_TaskCollectionBase * _M_pTaskCollection;

        
        CHOREFUNC _M_pChoreFunction;

        
        
        bool _M_fRuntimeOwnsLifetime;

        
        bool _M_fDetached;

        
        void _PrepareStealStructured(ContextBase *_PContext);
        void _PrepareStealUnstructured(ContextBase *_PContext);

        
        __declspec(noinline)
        static void __cdecl _StructuredChoreWrapper(_UnrealizedChore * _PChore);

        
        __declspec(noinline)
        static void __cdecl _UnstructuredChoreWrapper(_UnrealizedChore * _PChore);

        
        static void _InternalFree(_UnrealizedChore * _PChore);

        
        static void __cdecl _CancelViaToken(::Concurrency::details::ContextBase *_PContext);
    };

    
    enum _TaskCollectionStatus
    {
        _NotComplete,
        _Completed,
        _Canceled
    };

    
    class _TaskCollectionBase
    {
    public:
        
        _TaskCollectionBase() :
            _M_pTokenState(0),
            _M_completedStolenChores(_CollectionNotInitialized),
            _M_unpoppedChores(0),
            _M_pException(0),
            _M_inliningDepth(_S_notInlined)
        {
        }
        _TaskCollectionBase(const _TaskCollectionBase&) = delete;

        
        _TaskCollectionBase(_CancellationTokenState *_PTokenState) :
            _M_pTokenState(_PTokenState),
            _M_completedStolenChores(_CollectionNotInitialized),
            _M_unpoppedChores(0),
            _M_pException(0),
            _M_inliningDepth(_S_notInlined)
        {
        }

        _TaskCollectionBase& operator=(const _TaskCollectionBase&) = delete;

        
        void * _OwningContext() const
        {
            return _M_pOwningContext;
        }

        
        int _InliningDepth() const
        {
            return _M_inliningDepth;
        }

        
        bool _IsCurrentlyInlined() const
        {
            return (_M_inliningDepth != _S_notInlined);
        }

        
        bool _IsStructured()
        {
            return (_M_inlineFlags & _S_structured) != 0;
        }

        
        _CancellationTokenState *_GetTokenState(_CancellationTokenRegistration **_PRegistration = 0);

    protected:

        friend class ::Concurrency::details::_UnrealizedChore;
        friend class ::Concurrency::details::ContextBase;

        enum _TaskCollectionBaseState
        {
            _CollectionNotInitialized = (-2147483647L - 1),
            _CollectionInitializationInProgress = (-2147483647L - 1)+1,
            _CollectionInitialized = 0
        };

        
        std::exception_ptr * _Exception() const
        {
            return (std::exception_ptr *) ((size_t)_M_pException & ~_S_cancelBitsMask);
        }

        
        bool _IsAbnormalExit() const
        {
            return _M_pException != 0;
        }

        
        size_t _CancelState() const
        {
            return (size_t) _M_pException & _S_cancelBitsMask;
        }

        
        bool _IsMarkedForCancellation() const
        {
            return (_CancelState() & _S_cancelBitsMask) != 0;
        }

        
        bool _PerformedInlineCancel() const
        {
            __assume(_CancelState() != _S_cancelStarted);
            return _CancelState() == _S_cancelShotdownOwner;
        }

        bool _PerformedPendingCancel() const
        {
            __assume(_CancelState() != _S_cancelStarted);
            return _CancelState() == _S_cancelDeferredShootdownOwner;
        }

        
        _TaskCollectionBase *_SafeGetParent()
        {
            return ((_M_inliningDepth != _S_notInlined) ? _M_pParent : 0);
        }

        
        bool _WillInterruptForPendingCancel();

        
        
        void _RaisedException();

        
        
        void _RethrowException();

        
        bool _MarkCancellation();

        
        
        void _FinishCancelState(size_t _NewCancelState);

        
        
        
        void _RaisedCancel();

        
        
        _TaskCollectionBase * _M_pParent;

        
        int _M_inliningDepth : 28;
        int _M_inlineFlags : 4;

        
        _CancellationTokenState *_M_pTokenState;

        
        void * _M_pOwningContext;

        
        
        long _M_unpoppedChores;

        
        volatile long _M_completedStolenChores;

        
        
        
        
        
        
        
        std::exception_ptr * _M_pException;

        
        static const size_t _S_cancelBitsMask = 0x3;
        static const size_t _S_cancelNone = 0x0;
        static const size_t _S_cancelStarted = 0x1;
        static const size_t _S_cancelDeferredShootdownOwner = 0x2;
        static const size_t _S_cancelShotdownOwner = 0x3;

        
        static const size_t _S_nonNull = 0x8;
        static const size_t _S_cancelException = 0xC;

        
        static const int _S_notInlined = -1;

        
        static const int _S_structured = 0x00000001;
        static const int _S_localCancel = 0x00000002;
        static const int _S_reserved = 0x0000000C;
    };

    
    
    
    
    
    class _StructuredTaskCollection : public _TaskCollectionBase
    {
    public:

        
        
        
        
        _StructuredTaskCollection()
        {
            _Construct();
            _M_pTokenState = 0;
        }

        _StructuredTaskCollection(const _StructuredTaskCollection&) = delete;
        _StructuredTaskCollection& operator=(const _StructuredTaskCollection&) = delete;
        
        
        
        
        
        
        
        __declspec(dllimport) _StructuredTaskCollection(_CancellationTokenState *_PTokenState);

        
        
        
        
        
        
        
        __declspec(dllimport) ~_StructuredTaskCollection();

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        __declspec(dllimport) void _Schedule(_UnrealizedChore * _PChore, location * _PLocation);

        
        
        
        
        
        
        
        
        
        
        
        __declspec(dllimport) void _Schedule(_UnrealizedChore * _PChore);

        
        
        
        
        __declspec(dllimport) void _Cancel();

        
        
        
        
        
        
        
        
        
        
        
        __declspec(dllimport) bool _IsCanceling();

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        __declspec(dllimport) _TaskCollectionStatus __stdcall _RunAndWait(_UnrealizedChore * _PChore = 0);

        
        
        
        
        
        
        
        
        
        
        _TaskCollectionStatus _Wait()
        {
            return _RunAndWait();
        }

        
        
        
        
        void _CancelStolenContexts();

    private:

        friend class _UnrealizedChore;

        void _Construct()
        {
            _M_pOwningContext = 0;
            _M_inlineFlags = _S_structured;
        }

        
        
        
        
        __declspec(dllimport) void _Abort();

        
        
        
        __declspec(dllimport) void _CleanupToken();

        
        
        
        
        bool _TaskCleanup()
        {
            
            
            
            
            
            if (_M_unpoppedChores > 0)
            {
                _Abort();

                if (!__uncaught_exception())
                {
                    return false;
                }
            }

            return true;
        }

        
        
        
        
        void _Initialize();

        
        
        
        
        
        
        
        void _WaitOnStolenChores(long _StolenChoreCount);

        
        
        
        
        void _CountUp();

        
        
        
        
        
        static void __cdecl _CancelViaToken(_StructuredTaskCollection *_PCollection);

        
        
        
        
        _CONCRT_BUFFER _M_event[(sizeof(void*) + sizeof(_CONCRT_BUFFER) - 1) / sizeof(_CONCRT_BUFFER)];
    };

    
    
    
    
    
    
    
    class _TaskCollection : public _TaskCollectionBase
    {
    public:

        
        
        
        
        __declspec(dllimport) _TaskCollection();
        _TaskCollection(const _TaskCollection&) = delete;

        _TaskCollection& operator=(const _TaskCollection&) = delete;
        
        
        
        
        
        
        
        __declspec(dllimport) _TaskCollection(_CancellationTokenState *_PTokenState);

        
        
        
        
        
        
        
        __declspec(dllimport) ~_TaskCollection();

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        __declspec(dllimport) void _Schedule(_UnrealizedChore * _PChore, location * _PLocation);

        
        
        
        
        
        
        
        
        
        
        
        __declspec(dllimport) void _Schedule(_UnrealizedChore * _PChore);

        
        
        
        
        __declspec(dllimport) void _Cancel();

        
        
        
        
        
        
        
        
        
        
        
        __declspec(dllimport) bool _IsCanceling();

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        __declspec(dllimport) _TaskCollectionStatus __stdcall _RunAndWait(_UnrealizedChore * _PChore = 0);

        
        
        
        
        
        
        
        
        
        
        
        _TaskCollectionStatus _Wait()
        {
            return _RunAndWait();
        }

        
        
        
        
        bool _IsMarkedForAbnormalExit() const;

        
        
        
        
        _TaskCollection * _OriginalCollection() const;

        
        
        
        
        bool _IsAlias() const;

        
        
        
        
        
        
        
        
        
        
        void _RegisterCompletionHandler(TaskProc _Func, void * _PCompletionContext);

    private:

        friend class _UnrealizedChore;
        friend class ::Concurrency::details::ContextBase;

        
        
        
        
        
        bool _IsStaleAlias() const;

        
        
        
        
        void _ReleaseAlias();

        
        
        
        
        
        
        
        
        
        
        _TaskCollection(_TaskCollection * _POriginCollection, bool _FDirectAlias);

        
        
        
        
        _TaskCollection * _Alias();

        
        
        
        
        
        
        
        void _Abort(bool _FLeaveCanceled = false);

        
        
        
        
        bool _IsIndirectAlias() const;

        
        
        
        
        bool _IsDirectAlias() const;

        
        
        
        
        bool _HasDirectAlias() const;

        
        
        
        
        
        
        
        
        
        
        
        void _Cancel(bool _InsideException, _TaskCollection * _PSnapPoint);

        
        
        
        
        void _NotifyNewChore();

        
        
        
        
        
        
        
        void _NotifyCompletedChoreAndFree(_UnrealizedChore * _PChore = 0);

        
        
        
        
        
        
        
        void _FullAliasWait(_TaskCollection * _PSnapPoint);

        
        
        
        
        
        
        
        void _Reset(_TaskCollection * _PSnapPoint);

        
        
        
        
        
        
        void _RaisedException();

        
        
        
        
        
        
        void _RaisedCancel();

        
        
        
        
        
        
        
        
        
        
        bool _SetCancelState(long _Status);

        
        
        
        
        
        
        
        
        void _CancelFromArbitraryThread(bool _InsideException);

        
        
        
        
        
        
        
        
        
        
        
        void _CancelDirectAliases(bool _InsideException, _TaskCollection * _PSnapPoint);

        
        
        
        
        
        
        
        
        
        
        
        
        
        void _CancelStolenContexts(bool _InsideException, bool _FInlineGated);

        
        
        
        
        void *_GetStealTrackingList() const;

        
        
        
        
        void _Initialize();

        
        
        
        
        
        
        
        void _AbortiveSweep(void *_PCtx);

        
        
        
        
        
        
        
        
        
        
        
        
        
        static bool __cdecl _CollectionMatchPredicate(_UnrealizedChore *_PChore, void *_PData);

        
        
        
        
        
        
        
        
        
        
        
        
        
        static bool __cdecl _SweepAbortedChore(_UnrealizedChore *_PChore, void *_PData);

        
        
        
        
        
        
        
        bool _TaskCleanup(bool _FExceptional);

        
        
        
        
        static void __cdecl _CancelViaToken(_TaskCollection *_PCollection);

        
        
        
        
        
        _CONCRT_BUFFER _M_stealTracker[((3 * sizeof(void *) + 2 * sizeof(long) + sizeof(_CONCRT_BUFFER) - 1) / sizeof(_CONCRT_BUFFER))];

        
        
        
        
        
        long _M_activeStealersForCancellation;

        
        
        
        
        
        volatile long _M_exitCode;

        
        
        
        
        volatile long _M_executionStatus;

        
        
        
        
        event _M_event;

        _TaskCollection * _M_pOriginalCollection;
        _TaskCollection * _M_pNextAlias;
        void * _M_pTaskExtension;

        int _M_taskCookies[2];

        volatile long _M_flags;
        volatile long _M_chaining;

        DWORD _M_boundQueueId;
        int _M_stackPos;

        TaskProc _M_completionHandler;
        void * _M_pCompletionContext;
    };

    
    
    
    
    class _StackGuard
    {
    public:
        _StackGuard() : _Depth(_GetCurrentInlineDepth())
        {
            
            ++_Depth;
        }
        _StackGuard(const _StackGuard&) = delete;

        _StackGuard& operator=(const _StackGuard&) = delete;

        ~_StackGuard()
        {
            
            --_Depth;
        }

        bool _ShouldInline(_TaskInliningMode _InliningMode) const
        {
            
            
            return _Depth <= static_cast<size_t>(_InliningMode);
        }
    private:
        size_t & _Depth;

        
        
        
        
        
        __declspec(dllimport) static size_t & __cdecl _GetCurrentInlineDepth();
    };

    
    
    
    
    
    class _AsyncTaskCollection : public _RefCounterBase
    {
    public:
        _AsyncTaskCollection(const _AsyncTaskCollection&) = delete;
        _AsyncTaskCollection& operator=(const _AsyncTaskCollection&) = delete;
        
        
        
        
        
        
        
        
        
        __declspec(dllimport) static _AsyncTaskCollection * __cdecl _NewCollection(_CancellationTokenState *_PTokenState);

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        _TaskCollectionStatus _ScheduleWithAutoInline(_UnrealizedChore * _PChore, _TaskInliningMode _InliningMode)
        {
            __assume(_PChore != nullptr);
            _Reference();

            if (_InliningMode == _NoInline)
            {
                _M_taskCollection._Schedule(_PChore);
                return _NotComplete;
            }
            else
            {
                _StackGuard _Guard;
                if (_Guard._ShouldInline(_InliningMode))
                {
                    return _M_taskCollection._RunAndWait(_PChore);
                }
                else
                {
                    _M_taskCollection._Schedule(_PChore);
                    return _NotComplete;
                }
            }
        }

        
        
        
        void _Cancel()
        {
            _M_taskCollection._Cancel();
        }

        
        
        
        
        
        
        
        
        
        
        
        
        
        _TaskCollectionStatus _RunAndWait()
        {
            
            _StackGuard _Guard;
            return _M_taskCollection._RunAndWait();
        }

    private:

        void _NotificationHandler();

        __declspec(dllimport) virtual void _Destroy();

        
        _AsyncTaskCollection(_CancellationTokenState *_PTokenState);

        __declspec(noinline)
        static void __cdecl _CompletionHandler(void * _PCompletionContext);

    private:

        
        _TaskCollection _M_taskCollection;
    };

    
    
    
    struct _Beacon_reference
    {
        volatile long _M_signals;
    };

    
    
    
    
    
    
    
    
    
    class _Cancellation_beacon
    {
    public:

        __declspec(dllimport) _Cancellation_beacon();

        __declspec(dllimport) ~_Cancellation_beacon();

        bool _Is_signaled() const
        {
            return (_M_pRef->_M_signals != 0);
        }

        
        
        __declspec(dllimport) bool _Confirm_cancel();

        void _Raise()
        {
            _InterlockedIncrement(&_M_pRef->_M_signals);
        }

        void _Lower()
        {
            _InterlockedDecrement(&_M_pRef->_M_signals);
        }

    private:

        _Beacon_reference *_M_pRef;

    };

    
    
    
    class _TimerStub;

    
    
    
    
    class _Timer
    {
    protected:
        
        
        
        
        __declspec(dllimport) _Timer(unsigned int _Ms, bool _FRepeating);

        
        __declspec(dllimport) virtual ~_Timer();

        
        __declspec(dllimport) void _Start();

        
        __declspec(dllimport) void _Stop();

    private:
        friend class _TimerStub;

        
        virtual void _Fire() =0;

        
        HANDLE _M_hTimer;

        
        unsigned int _M_ms;

        
        bool _M_fRepeating;
    };

    
    
    
    
    struct _CONCRT_TRACE_INFO
    {
        volatile unsigned long EnableFlags;    
        volatile unsigned char EnableLevel;    

        void _EnableTrace(unsigned char _Level, unsigned long _Flags)
        {
            EnableFlags = _Flags;
            EnableLevel = _Level;
        }
#pragma warning ( push )
#pragma warning ( disable : 5393 )  
        void _DisableTrace()
        {
            EnableLevel = 0;
            EnableFlags = 0;
        }
#pragma warning ( pop )

        bool _IsEnabled(unsigned char _Level, unsigned long _Flags) const
        {
            return ((_Level <= EnableLevel) &&  ((EnableFlags & _Flags) == _Flags));
        }
    };

    
    
    
    
    
    __declspec(dllimport) const _CONCRT_TRACE_INFO * _GetConcRTTraceInfo();

    
    
    
    
    void _RegisterConcRTEventTracing();

    
    
    
    
    void _UnregisterConcRTEventTracing();

} 









__declspec(deprecated("Concurrency::EnableTracing is a deprecated function.")) __declspec(dllimport) HRESULT __cdecl EnableTracing();









__declspec(deprecated("Concurrency::DisableTracing is a deprecated function.")) __declspec(dllimport) HRESULT __cdecl DisableTracing();





enum ConcRT_EventType
{
    
    
    
    
    CONCRT_EVENT_GENERIC    = 0,
    
    
    
    
    CONCRT_EVENT_START      = 1,
    
    
    
    
    CONCRT_EVENT_END        = 2,
    
    
    
    
    CONCRT_EVENT_BLOCK      = 3,
    
    
    
    
    CONCRT_EVENT_UNBLOCK    = 4,
    
    
    
    
    CONCRT_EVENT_YIELD      = 5,
    
    
    
    
    CONCRT_EVENT_IDLE       = 6,
    
    
    
    
    CONCRT_EVENT_ATTACH     = 7,
    
    
    
    
    CONCRT_EVENT_DETACH     = 8,
};















__declspec(dllimport) extern const GUID ConcRT_ProviderGuid;












__declspec(dllimport) extern const GUID ConcRTEventGuid;







__declspec(dllimport) extern const GUID SchedulerEventGuid;









__declspec(dllimport) extern const GUID ScheduleGroupEventGuid;






__declspec(dllimport) extern const GUID ContextEventGuid;










__declspec(dllimport) extern const GUID ChoreEventGuid;





__declspec(dllimport) extern const GUID VirtualProcessorEventGuid;










__declspec(dllimport) extern const GUID LockEventGuid;









__declspec(dllimport) extern const GUID ResourceManagerEventGuid;







__declspec(dllimport) extern const GUID PPLParallelInvokeEventGuid;







__declspec(dllimport) extern const GUID PPLParallelForEventGuid;







__declspec(dllimport) extern const GUID PPLParallelForeachEventGuid;





__declspec(dllimport) extern const GUID AgentEventGuid;


__declspec(dllimport) void __cdecl _Trace_ppl_function(const GUID& _Guid, unsigned char _Level, ConcRT_EventType _Type);





enum Concrt_TraceFlags
{
    SchedulerEventFlag              = 0x1,
    ContextEventFlag                = 0x2,
    VirtualProcessorEventFlag       = 0x4,
    ResourceManagerEventFlag        = 0x8,
    PPLEventFlag                    = 0x10,
    AgentEventFlag                  = 0x20,

    AllEventsFlag                   = 0xFFFFFFFF
};





enum Agents_EventType
{
    
    
    
    
    AGENTS_EVENT_CREATE   = 0,

    
    
    
    
    AGENTS_EVENT_START    = 1,

    
    
    
    
    AGENTS_EVENT_END      = 2,

    
    
    
    
    AGENTS_EVENT_DESTROY  = 3,

    
    
    
    
    AGENTS_EVENT_SCHEDULE = 4,

    
    
    
    
    AGENTS_EVENT_LINK     = 5,

    
    
    
    
    AGENTS_EVENT_UNLINK   = 6,

    
    
    
    
    AGENTS_EVENT_NAME     = 7

};





















__declspec(dllimport) void __cdecl _Trace_agents(Agents_EventType _Type, __int64 _AgentId, ...);
}












    
    
#line 5732 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"


    





#line 5741 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"


    
#line 5745 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"

#pragma comment(lib, "concrt" "" "")






#line 5754 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concrt.h"

namespace concurrency = ::Concurrency;



#pragma pack(pop)

#line 28 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concurrent_queue.h"






#line 35 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concurrent_queue.h"



#line 39 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\concurrent_queue.h"

#pragma pack(push,8)
#pragma warning(push)
#pragma warning (disable: 4510 4512 4610)  








namespace Concurrency
{

template<typename _Ty, class _Ax = std::allocator<_Ty> >
class concurrent_queue;

namespace details
{

    class _Concurrent_queue_rep;

    typedef size_t _Ticket;

    class _Concurrent_queue_iterator_rep;
    class _Concurrent_queue_iterator_base_v4;
    template<typename _Container, typename _Value> class _Concurrent_queue_iterator;

    
    class _Concurrent_queue_base_v4
    {
        
        _Concurrent_queue_rep* _My_rep;

        friend class _Concurrent_queue_rep;
        friend struct _Micro_queue;
        friend class _Micro_queue_pop_finalizer;
        friend class _Concurrent_queue_iterator_rep;
        friend class _Concurrent_queue_iterator_base_v4;
    protected:
        
        struct _Page
        {
            _Page* _Next;
            size_t _Mask;
        };

        
        size_t _Items_per_page;

        
        size_t _Item_size;

    private:
        virtual void _Move_item( _Page& _Dst, size_t _Index, void* _Src ) = 0;
        virtual void _Copy_item( _Page& _Dst, size_t _Index, const void* _Src ) = 0;
        virtual void _Assign_and_destroy_item( void* _Dst, _Page& _Src, size_t _Index ) = 0;
    protected:
        __declspec(dllimport) _Concurrent_queue_base_v4( size_t _Item_size );
        __declspec(dllimport) virtual ~_Concurrent_queue_base_v4();

        
        __declspec(dllimport) void _Internal_push( const void* _Src );

        
        __declspec(dllimport) void _Internal_move_push( void* _Src );

        
        __declspec(dllimport) void _Internal_swap( _Concurrent_queue_base_v4& other );

        
        
        __declspec(dllimport) bool _Internal_pop_if_present( void* _Dst );

        
        __declspec(dllimport) size_t _Internal_size() const;

        
        __declspec(dllimport) bool _Internal_empty() const;

        
        virtual _Page *_Allocate_page() = 0;

        
        virtual void _Deallocate_page( _Page *p ) = 0;

        
        __declspec(dllimport) void _Internal_finish_clear() ;

        
        __declspec(dllimport) void _Internal_throw_exception() const;

    private:
        
        _Concurrent_queue_base_v4( const _Concurrent_queue_base_v4& );

        
        void operator=( const _Concurrent_queue_base_v4& );
    };

    typedef _Concurrent_queue_base_v4 _Concurrent_queue_base ;


    
    

    struct _Micro_queue
    {
        class _Pop_finalizer;
        class _Push_finalizer;

        _Subatomic<_Concurrent_queue_base::_Page*> _Head_page;
        _Subatomic<_Ticket> _Head_counter;

        _Subatomic<_Concurrent_queue_base::_Page*> _Tail_page;
        _Subatomic<_Ticket> _Tail_counter;

        volatile long _Page_mutex_flag;

        void _Push( void* _Item, _Ticket _K, _Concurrent_queue_base& _Base, void (_Concurrent_queue_base::*moveOp)(_Concurrent_queue_base_v4::_Page&, size_t, void*));

        bool _Pop( void* _Dest, _Ticket _K, _Concurrent_queue_base& _Base );
    };

    
    
    #pragma warning(push)
    #pragma warning(disable: 4324)


    
    

    class _Concurrent_queue_rep
    {
    private:
        friend struct _Micro_queue;

        
        static const size_t _Phi = 3;

    public:
        
        static const size_t _N_queue = 8;

        
        static size_t _Index( _Ticket _K )
        {
            return _K*_Phi%_N_queue;
        }

        __declspec(align(64))
        _Subatomic<_Ticket> _Head_counter;

        __declspec(align(64))
        _Subatomic<_Ticket> _Tail_counter;

        __declspec(align(64))
        _Micro_queue _Array[_N_queue];

        _Micro_queue& _Choose( _Ticket _K )
        {
            
            return _Array[_Index(_K)];
        }
    };

    #pragma warning(pop)


    
    class _Concurrent_queue_iterator_base_v4 {
        
        
        _Concurrent_queue_iterator_rep* _My_rep;

        template<typename _C, typename _Ty, typename _U>
        friend bool operator==( const _Concurrent_queue_iterator<_C,_Ty>&, const _Concurrent_queue_iterator<_C,_U>& );

        template<typename _C, typename _Ty, typename _U>
        friend bool operator!=( const _Concurrent_queue_iterator<_C,_Ty>&, const _Concurrent_queue_iterator<_C,_U>& );
    protected:
        
        mutable void* _My_item;

        
        _Concurrent_queue_iterator_base_v4()
            : _My_rep(0), _My_item(0)
        {
        }

        
        _Concurrent_queue_iterator_base_v4( const _Concurrent_queue_iterator_base_v4& _I )
            : _My_rep(0), _My_item(0)
        {
            _Assign(_I);
        }

        
        __declspec(dllimport) _Concurrent_queue_iterator_base_v4( const _Concurrent_queue_base&  );

        
        __declspec(dllimport) void _Assign( const _Concurrent_queue_iterator_base_v4& );

        
        __declspec(dllimport) void _Advance();

        
        __declspec(dllimport) ~_Concurrent_queue_iterator_base_v4();
    };

    typedef _Concurrent_queue_iterator_base_v4 concurrent_queue_iterator_base;

    
    
    template<typename _Container, typename _Value>
    class _Concurrent_queue_iterator: public _Concurrent_queue_iterator_base_v4, public std::iterator<std::forward_iterator_tag, _Value>
    {
        template<typename _Ty, class _Ax> friend class ::Concurrency::concurrent_queue;

        
        _Concurrent_queue_iterator( const _Concurrent_queue_base& _Queue )
            : _Concurrent_queue_iterator_base_v4(_Queue)
        {
        }
    public:
        _Concurrent_queue_iterator()
        {
        }

        

        _Concurrent_queue_iterator( const _Concurrent_queue_iterator<_Container,typename _Container::value_type>& _Other )
            : _Concurrent_queue_iterator_base_v4(_Other)
        {
        }

        
        _Concurrent_queue_iterator& operator=( const _Concurrent_queue_iterator& _Other )
        {
            _Assign(_Other);
            return *this;
        }

        
        _Value& operator*() const
        {
            return *static_cast<_Value*>(_My_item);
        }

        _Value* operator->() const
        {
            return &operator*();
        }

        
        _Concurrent_queue_iterator& operator++()
        {
            _Advance();
            return *this;
        }

        
        _Concurrent_queue_iterator operator++(int)
        {
            _Concurrent_queue_iterator _Result = *this;
            _Advance();
            return _Result;
        }
    }; 

    template<typename _Container, typename _Value>
    struct std::_Is_checked_helper<_Concurrent_queue_iterator<_Container, _Value> >
        : public true_type
    {   
    };

    template<typename _C, typename _Ty, typename _U>
    bool operator==( const _Concurrent_queue_iterator<_C,_Ty>& _I, const _Concurrent_queue_iterator<_C,_U>& _J )
    {
        return _I._My_item==_J._My_item;
    }

    template<typename _C, typename _Ty, typename _U>
    bool operator!=( const _Concurrent_queue_iterator<_C,_Ty>& _I, const _Concurrent_queue_iterator<_C,_U>& _J )
    {
        return _I._My_item!=_J._My_item;
    }

} 



















template<typename _Ty, class _Ax>
class concurrent_queue: public ::Concurrency::details::_Concurrent_queue_base_v4
{
    template<typename _Container, typename _Value> friend class ::Concurrency::details::_Concurrent_queue_iterator;

    
    typedef typename _Ax::template rebind<char>::other _Page_allocator_type;
    _Page_allocator_type _My_allocator;

    
    class _Destroyer
    {
    private:
        _Ty& _My_value;

        void operator=(const _Destroyer&); 
    public:
        _Destroyer( _Ty& _Value )
            : _My_value(_Value)
        {
        }

        ~_Destroyer()
        {
            _My_value.~_Ty();
        }
    };

    _Ty& _Get_ref( _Page& _Pg, size_t _Index )
    {
        __assume(_Index<_Items_per_page);
        return static_cast<_Ty*>(static_cast<void*>(&_Pg+1))[_Index];
    }

     virtual void _Copy_item( _Page& _Dst, size_t _Index, const void* _Src )
    {
        new( &_Get_ref(_Dst,_Index) ) _Ty(*static_cast<const _Ty*>(_Src));
    }

     virtual void _Move_item( _Page& _Dst, size_t _Index, void* _Src )
    {
        new( &_Get_ref(_Dst,_Index) ) _Ty(std::move(*static_cast<_Ty*>(_Src)));
    }

     virtual void _Assign_and_destroy_item( void* _Dst, _Page& _Src, size_t _Index )
    {
        _Ty& _From = _Get_ref(_Src,_Index);
        _Destroyer _D(_From);
        if (_Dst != 0)
        {
            *static_cast<_Ty*>(_Dst) = std::move(_From);
        }
    }

     virtual _Page *_Allocate_page()
    {
        size_t _N = sizeof(_Page) + _Items_per_page*_Item_size;
        _Page *_Pg = reinterpret_cast<_Page*>(_My_allocator.allocate( _N ));
        if( !_Pg )
            _Internal_throw_exception();
        return _Pg;
    }

     virtual void _Deallocate_page( _Page *_Pg )
    {
        size_t _N = sizeof(_Page) + _Items_per_page*_Item_size;
        _My_allocator.deallocate( reinterpret_cast<char*>(_Pg), _N );
    }

public:
    
    
    
    
    typedef _Ty value_type;

    
    
    
    
    typedef _Ax allocator_type;

    
    
    
    
    typedef _Ty& reference;

    
    
    
    
    
    typedef const _Ty& const_reference;

    
    
    
    
    typedef std::size_t size_type;

    
    
    
    
    typedef std::ptrdiff_t difference_type;

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    explicit concurrent_queue(const allocator_type  &_Al = allocator_type())
        : _Concurrent_queue_base_v4( sizeof(_Ty) ), _My_allocator( _Al )
    {
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    concurrent_queue(const concurrent_queue& _OtherQ, const allocator_type &_Al = allocator_type());

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    concurrent_queue(concurrent_queue&& _OtherQ, const allocator_type &_Al = allocator_type());

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    template<typename _InputIterator>
    concurrent_queue(_InputIterator _Begin, _InputIterator _End)
        : _Concurrent_queue_base_v4( sizeof(_Ty) ), _My_allocator( allocator_type() )
    {
        while (_Begin != _End)
        {
            this->push(*_Begin);
            ++_Begin;
        }
    }

    
    
    
    
    ~concurrent_queue();

    
    
    
    
    
    
    
    
    
    
    void push( const _Ty& _Src )
    {
        _Internal_push( &_Src );
    }

    
    
    
    
    
    
    
    
    
    
    void push( _Ty&& _Src )
    {
        _Internal_move_push( &_Src );
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    bool try_pop( _Ty& _Dest )
    {
        return _Internal_pop_if_present( &_Dest );
    }

    
    
    
    
    
    
    
    
    
    
    
    size_type unsafe_size() const
    {
        return _Internal_size();
    }

    
    
    
    
    
    
    
    
    
    
    
    bool empty() const
    {
        return _Internal_empty();
    }

    
    
    
    
    
    
    
    allocator_type get_allocator() const
    {
        return this->_My_allocator;
    }

    
    
    
    
    void clear();

    
    
    
    
    typedef details::_Concurrent_queue_iterator<concurrent_queue,_Ty> iterator;

    
    
    
    
    typedef details::_Concurrent_queue_iterator<concurrent_queue,const _Ty> const_iterator;

    
    
    
    
    
    
    
    
    
    
    
    
    
    iterator unsafe_begin()
    {
        return iterator(*this);
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    iterator unsafe_end()
    {
        return iterator();
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    const_iterator unsafe_begin() const
    {
        return const_iterator(*this);
    }

    
    
    
    
    
    
    
    
    
    
    
    
    
    const_iterator unsafe_end() const
    {
        return const_iterator();
    }
};





















template<typename _Ty, class _Ax>
concurrent_queue<_Ty,_Ax>::concurrent_queue(const concurrent_queue& _Queue, const allocator_type& _Al = allocator_type())
    : _Concurrent_queue_base_v4( sizeof(_Ty) ), _My_allocator(_Al)
{
    concurrent_queue::const_iterator _QEnd = _Queue.unsafe_end();
    for (concurrent_queue::const_iterator _It = _Queue.unsafe_begin(); _It != _QEnd; ++_It)
        this->push(*_It);
}

















template<typename _Ty, class _Ax>
concurrent_queue<_Ty,_Ax>::concurrent_queue(concurrent_queue&& _Queue, const allocator_type& _Al = allocator_type())
    : _Concurrent_queue_base_v4( sizeof(_Ty) ), _My_allocator(_Al)
{
    _Internal_swap(_Queue);
}





template<typename _Ty, class _Ax>
concurrent_queue<_Ty,_Ax>::~concurrent_queue()
{
    clear();
    _Internal_finish_clear();
}





template<typename _Ty, class _Ax>
void concurrent_queue<_Ty,_Ax>::clear()
{
    while( !empty() )
    {
        if (!_Internal_pop_if_present(0))
        {
            __assume(empty());
            break;
        }
    }
}

} 

namespace concurrency = ::Concurrency;


#pragma warning(pop)
#pragma pack(pop)

#line 10 "d:\\git\\block_match\\block_match\\thread_pool.h"



#line 14 "d:\\git\\block_match\\block_match\\thread_pool.h"

typedef void* HANDLE;
class ThreadPool
{
public:
	enum class task_state
	{
		NEW,
		PROCESSING,
		DONE
	};
private:
	struct _task;
public:
	ThreadPool(unsigned int num);

	ThreadPool(const ThreadPool&) = delete;

	~ThreadPool();

	void shutdown();

	void* submit(unsigned int(*func)(void *), void* para);

	void join(void* task_handle) const;

	task_state query(void* task_handle) const;

	void release(void* task_handle) const;

	unsigned int get_rc(void* task_handle);
private:

	unsigned static int __stdcall start_routine(void* para);


#line 51 "d:\\git\\block_match\\block_match\\thread_pool.h"

	unsigned int new_tid();
	std::atomic<bool> m_exit_flag;

	Concurrency::concurrent_queue<_task*> m_task_queue;
	Concurrency::concurrent_queue<unsigned int> m_free_thread_queue;
	HANDLE *m_wait_event;
	HANDLE *m_hThreads;






#line 66 "d:\\git\\block_match\\block_match\\thread_pool.h"
	std::atomic<unsigned int> m_max_task_id;
	unsigned int m_size;
};#line 12 "d:\\git\\block_match\\block_match\\block_match_internal.h"

struct GlobalContext
{
	GlobalContext();

	unsigned numberOfThreads;
	ThreadPool pool;
	int numberOfGPUDeviceMultiProcessor;
	const int numberOfGPUProcessorThread;
	bool hasGPU;
};

extern GlobalContext globalContext;

struct Context
{
	int matA_M;
	int matA_N;
	int matB_M;
	int matB_N;
	int block_M;
	int block_N;

	int neighbour_M;
	int neighbour_N;
	
	int strideA_M;
	int strideA_N;
	int strideB_M;
	int strideB_N;

	int sequenceAPadding_M;
	int sequenceAPadding_N;
	int sequenceBPadding_M;
	int sequenceBPadding_N;
	
	float *buffer_A;
	float *buffer_B;
	float *result_buffer;
	float *device_buffer_A;
	float *device_buffer_B;
	float *device_result_buffer;

	int result_dims[4];

	cudaStream_t *stream;
};


namespace block_match_internal {
	template<typename R, template<typename...> class Params, typename... Args, std::size_t... I>
	unsigned __forceinline thread_pool_base_function_helper(R(*func)(Args...), Params<Args...> const&params, std::index_sequence<I...>)
	{
		return func(std::get<I>(params)...);
	}

	template<typename FunctionType, FunctionType function, template<typename...> class Params, typename... Args>
	unsigned thread_pool_base_function(void *arg) {
		Params<Args...> const &params = *static_cast<Params<Args...> *>(arg);
		return thread_pool_base_function_helper(function, params, std::index_sequence_for<Args...>{});
	}
	template <typename FunctionType, FunctionType function, template<typename...> class Params, typename... Args>
	void* thread_pool_launcher_helper(ThreadPool &pool, Params<Args...> & params)
	{
		return pool.submit(thread_pool_base_function< FunctionType, function, Params, Args... >, &params);
	}
}




void copyBlock(float *buf, float *src, int mat_M, int mat_N, int index_x, int index_y, int block_M, int block_N);
void copyBlockWithSymmetricPaddding(float *buf, float *src, int mat_M, int mat_N, int index_x, int index_y, int block_M, int block_N);

cudaError_t block_match_mse(float *blocks_A, float *blocks_B, size_t numBlocks_A, size_t numBlocks_B, size_t block_B_groupSize, size_t blockSize, float *result, int numProcessors, int numThreads, cudaStream_t stream);
cudaError_t block_match_mse(float *blocks_A, float *blocks_B, size_t numBlocks_A, size_t numBlocks_B, size_t block_B_groupSize, size_t blockSize, float *result, int numProcessors, int numThreads, size_t numTasks, cudaStream_t stream);
cudaError_t block_match_cc(float *blocks_A, float *blocks_B, size_t numBlocks_A, size_t numBlocks_B, size_t block_B_blockSize, size_t blockSize, float *result, int numProcessors, int numThreads, cudaStream_t stream);
cudaError_t block_match_cc(float *blocks_A, float *blocks_B, size_t numBlocks_A, size_t numBlocks_B, size_t block_B_groupSize, size_t blockSize, float *result, int numProcessors, int numThreads, size_t numTasks, cudaStream_t stream);#line 4 "block_match_process.cpp"
#line 1 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tuple"

#pragma once







 #pragma pack(push,8)
 #pragma warning(push,3)
 
 

namespace std {
	
template<bool _Same,
	class _Dest,
	class... _Srcs>
	struct _Tuple_implicit_val0
		: false_type
	{	
	};

template<class... _Dests,
	class... _Srcs>
	struct _Tuple_implicit_val0<true, tuple<_Dests...>, _Srcs...>
		: conjunction<
			is_constructible<_Dests, _Srcs>...,
			is_convertible<_Srcs, _Dests>...
		>::type
	{	
	};

template<class _Dest,
	class... _Srcs>
	struct _Tuple_implicit_val
		: _Tuple_implicit_val0<tuple_size<_Dest>::value == sizeof...(_Srcs), _Dest, _Srcs...>::type
	{	
	};

template<class _Dest,
	class... _Srcs>
	using _Tuple_implicit_t = enable_if_t<_Tuple_implicit_val<_Dest, _Srcs...>::value, int>;

	
template<bool _Same,
	class _Dest,
	class... _Srcs>
	struct _Tuple_explicit_val0
		: false_type
	{	
	};

template<class... _Dests,
	class... _Srcs>
	struct _Tuple_explicit_val0<true, tuple<_Dests...>, _Srcs...>
		: conjunction<
			is_constructible<_Dests, _Srcs>...,
			negation<conjunction<is_convertible<_Srcs, _Dests>...>>
		>::type
	{	
	};

template<class _Dest,
	class... _Srcs>
	struct _Tuple_explicit_val
		: _Tuple_explicit_val0<tuple_size<_Dest>::value == sizeof...(_Srcs), _Dest, _Srcs...>::type
	{	
	};

template<class _Dest,
	class... _Srcs>
	using _Tuple_explicit_t = enable_if_t<_Tuple_explicit_val<_Dest, _Srcs...>::value, int>;

	
template<class _Myt,
	class... _Other>
	struct _Tuple_convert_copy
	{	
	typedef int type;
	};

template<class _This,
	class _Uty>
	struct _Tuple_convert_copy<tuple<_This>, _Uty>
		: enable_if<!is_same<_This, _Uty>::value
			&& !is_constructible<_This, const tuple<_Uty>&>::value
			&& !is_convertible<const tuple<_Uty>&, _This>::value, int>
	{	
	};

template<class _Myt,
	class... _Other>
	using _Tuple_convert_copy_t = typename _Tuple_convert_copy<_Myt, _Other...>::type;

	
template<class _Myt,
	class... _Other>
	struct _Tuple_convert_move
	{	
	typedef int type;
	};

template<class _This,
	class _Uty>
	struct _Tuple_convert_move<tuple<_This>, _Uty>
		: enable_if<!is_same<_This, _Uty>::value
			&& !is_constructible<_This, tuple<_Uty> >::value
			&& !is_convertible<tuple<_Uty>, _This>::value, int>
	{	
	};

template<class _Myt,
	class... _Other>
	using _Tuple_convert_move_t = typename _Tuple_convert_move<_Myt, _Other...>::type;

	
template<class _Myt,
	class _This2,
	class... _Rest2>
	struct _Tuple_perfect_val
		: true_type
	{	
	};

template<class _Myt,
	class _This2>
	struct _Tuple_perfect_val<_Myt, _This2>
		: negation<is_same<_Myt, remove_const_t<remove_reference_t<_This2>>>>::type
	{	
	};

	
struct _Ignore
	{	
	template<class _Ty>
		void operator=(const _Ty&) const
		{	
		}
	};

constexpr _Ignore ignore{};

		
struct _Tuple_alloc_t
	{	
	};

constexpr _Tuple_alloc_t _Tuple_alloc{};

	
template<class _Ty>
	struct _Tuple_val
	{	
	constexpr _Tuple_val()
		: _Val()
		{	
		}

	template<class _Other>
		constexpr _Tuple_val(_Other&& _Arg)
		: _Val(::std:: forward<_Other>(_Arg))
		{	
		}

	template<class _Other>
		_Tuple_val& operator=(_Other&& _Right)
		{	
		_Val = ::std:: forward<_Other>(_Right);
		return (*this);
		}

	template<class _Alloc,
		class... _Other>
		_Tuple_val(const _Alloc&,
			typename enable_if<!uses_allocator<_Ty, _Alloc>::value,
				_Tuple_alloc_t>::type, _Other&&... _Arg)
		: _Val(::std:: forward<_Other>(_Arg)...)
		{	
		}

	template<class _Alloc,
		class... _Other>
		_Tuple_val(const _Alloc& _Al,
			typename enable_if<uses_allocator<_Ty, _Alloc>::value
				&& is_constructible<_Ty,
					allocator_arg_t, _Alloc>::value,
				_Tuple_alloc_t>::type, _Other&&... _Arg)
		: _Val(allocator_arg, _Al, ::std:: forward<_Other>(_Arg)...)
		{	
		}

	template<class _Alloc,
		class... _Other>
		_Tuple_val(const _Alloc& _Al,
			typename enable_if<uses_allocator<_Ty, _Alloc>::value
				&& !is_constructible<_Ty,
					allocator_arg_t, _Alloc>::value,
				_Tuple_alloc_t>::type, _Other&&... _Arg)
		: _Val(::std:: forward<_Other>(_Arg)..., _Al)
		{	
		}

	_Ty _Val;
	};

	
struct _Exact_args_t
	{	
	};

struct _Unpack_tuple_t
	{	
	};

struct _Alloc_exact_args_t
	{	
	};

struct _Alloc_unpack_tuple_t
	{	
	};

template<class... _Types>
	class tuple;

template<>
	class tuple<>
	{	
public:
	typedef tuple<> _Myt;

	constexpr tuple() noexcept
		{	
		}

	template<class _Alloc>
		tuple(allocator_arg_t, const _Alloc&) noexcept
		{	
		}

	constexpr tuple(const tuple&) noexcept
		{	
		}

	template<class _Alloc>
		tuple(allocator_arg_t, const _Alloc&, const _Myt&) noexcept
		{	
		}

	template<class _Tag,
		enable_if_t<is_same<_Tag, _Exact_args_t>::value, int> = 0>
		constexpr tuple(_Tag) noexcept
		{	
		}

	template<class _Tag,
		enable_if_t<is_same<_Tag, _Unpack_tuple_t>::value, int> = 0>
		constexpr tuple(_Tag, const _Myt&) noexcept
		{	
		}

	template<class _Tag,
		class _Alloc,
		enable_if_t<is_same<_Tag, _Alloc_exact_args_t>::value, int> = 0>
		tuple(_Tag, const _Alloc&) noexcept
		{	
		}

	void swap(_Myt&) noexcept
		{	
		}

	constexpr bool _Equals(const _Myt&) const noexcept
		{	
		return (true);
		}

	constexpr bool _Less(const _Myt&) const noexcept
		{	
		return (false);
		}
	};

template<class _This,
	class... _Rest>
	class tuple<_This, _Rest...>
		: private tuple<_Rest...>
	{	
public:
	typedef _This _This_type;
	typedef tuple<_This, _Rest...> _Myt;
	typedef tuple<_Rest...> _Mybase;
	static constexpr size_t _Mysize = 1 + sizeof...(_Rest);

	template<class _Tag,
		class _This2,
		class... _Rest2,
		enable_if_t<is_same<_Tag, _Exact_args_t>::value, int> = 0>
		constexpr tuple(_Tag, _This2&& _This_arg, _Rest2&&... _Rest_arg)
		: _Mybase(_Exact_args_t{}, ::std:: forward<_Rest2>(_Rest_arg)...),
			_Myfirst(::std:: forward<_This2>(_This_arg))
		{	
		}




















	template<class _Tag,
		class... _Other,
		enable_if_t<is_same<_Tag, _Unpack_tuple_t>::value, int> = 0>
		constexpr tuple(_Tag, const tuple<_Other...>& _Right)
		: _Mybase(_Unpack_tuple_t{}, _Right._Get_rest()),
			_Myfirst(_Right._Myfirst._Val)
		{	
		}

	template<class _Tag,
		class... _Other,
		enable_if_t<is_same<_Tag, _Unpack_tuple_t>::value, int> = 0>
		constexpr tuple(_Tag, tuple<_Other...>&& _Right)
		: _Mybase(_Unpack_tuple_t{}, (typename tuple<_Other...>::_Mybase&&) _Right),
			_Myfirst(::std:: forward<typename tuple<_Other...>::_This_type>(_Right._Myfirst._Val))
		{	
		}

	template<class _Tag,
		class _Alloc,
		class _This2,
		class... _Rest2,
		enable_if_t<is_same<_Tag, _Alloc_exact_args_t>::value, int> = 0>
		tuple(_Tag, const _Alloc& _Al, _This2&& _This_arg, _Rest2&&... _Rest_arg)
		: _Mybase(_Alloc_exact_args_t{}, _Al, ::std:: forward<_Rest2>(_Rest_arg)...),
			_Myfirst(_Al, _Tuple_alloc, ::std:: forward<_This2>(_This_arg))
		{	
		}

	template<class _Tag,
		class _Alloc,
		class _Tpl,
		size_t... _Indices,
		enable_if_t<is_same<_Tag, _Alloc_unpack_tuple_t>::value, int> = 0> inline
		tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right, integer_sequence<size_t, _Indices...>);

	template<class _Tag,
		class _Alloc,
		class _Tpl,
		enable_if_t<is_same<_Tag, _Alloc_unpack_tuple_t>::value, int> = 0>
		tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: forward<_Tpl>(_Right),
			make_integer_sequence<size_t, tuple_size<remove_reference_t<_Tpl>>::value>{})
		{	
		}

	template<class _This2 = _This,
		class = enable_if_t<conjunction<is_default_constructible<_This2>,
										is_default_constructible<_Rest>...>::value> >
		constexpr tuple()
		: _Mybase(), _Myfirst()
		{	
		}

	template<class... _Other,
		_Tuple_implicit_t<_Myt, const _Other&...> = 0,
		_Tuple_convert_copy_t<_Myt, _Other...> = 0>
		constexpr tuple(const tuple<_Other...>& _Right)


		: _Mybase(_Unpack_tuple_t{}, _Right._Get_rest()),
			_Myfirst(_Right._Myfirst._Val)
		{	
		}

	template<class... _Other,
		_Tuple_explicit_t<_Myt, const _Other&...> = 0,
		_Tuple_convert_copy_t<_Myt, _Other...> = 0>
		constexpr explicit tuple(const tuple<_Other...>& _Right)


		: _Mybase(_Unpack_tuple_t{}, _Right._Get_rest()),
			_Myfirst(_Right._Myfirst._Val)
		{	
		}

	template<class _Alloc,
		class... _Other,
		_Tuple_implicit_t<_Myt, const _Other&...> = 0,
		_Tuple_convert_copy_t<_Myt, _Other...> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			const tuple<_Other...>& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
		{	
		}

	template<class _Alloc,
		class... _Other,
		_Tuple_explicit_t<_Myt, const _Other&...> = 0,
		_Tuple_convert_copy_t<_Myt, _Other...> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			const tuple<_Other...>& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
		{	
		}

	template<class _This2 = _This,
		_Tuple_implicit_t<_Myt, const _This2&, const _Rest&...> = 0>
		constexpr tuple(const _This& _This_arg, const _Rest&... _Rest_arg)


		: _Mybase(_Exact_args_t{}, _Rest_arg...), _Myfirst(_This_arg)
		{	
		}

	template<class _This2 = _This,
		_Tuple_explicit_t<_Myt, const _This2&, const _Rest&...> = 0>
		constexpr explicit tuple(const _This& _This_arg, const _Rest&... _Rest_arg)


		: _Mybase(_Exact_args_t{}, _Rest_arg...), _Myfirst(_This_arg)
		{	
		}

	template<class _Alloc,
		class _This2 = _This,
		_Tuple_implicit_t<_Myt, const _This2&, const _Rest&...> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			const _This& _This_arg, const _Rest&... _Rest_arg)
		: tuple(_Alloc_exact_args_t{}, _Al, _This_arg, _Rest_arg...)
		{	
		}

	template<class _Alloc,
		class _This2 = _This,
		_Tuple_explicit_t<_Myt, const _This2&, const _Rest&...> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			const _This& _This_arg, const _Rest&... _Rest_arg)
		: tuple(_Alloc_exact_args_t{}, _Al, _This_arg, _Rest_arg...)
		{	
		}

	template<class _This2,
		class... _Rest2,
		enable_if_t<conjunction<
			_Tuple_perfect_val<_Myt, _This2, _Rest2...>,
			_Tuple_implicit_val<_Myt, _This2, _Rest2...>
		>::value, int> = 0>
		constexpr tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)


		: _Mybase(_Exact_args_t{}, ::std:: forward<_Rest2>(_Rest_arg)...),
			_Myfirst(::std:: forward<_This2>(_This_arg))
		{	
		}

	template<class _This2,
		class... _Rest2,
		enable_if_t<conjunction<
			_Tuple_perfect_val<_Myt, _This2, _Rest2...>,
			_Tuple_explicit_val<_Myt, _This2, _Rest2...>
		>::value, int> = 0>
		constexpr explicit tuple(_This2&& _This_arg, _Rest2&&... _Rest_arg)


		: _Mybase(_Exact_args_t{}, ::std:: forward<_Rest2>(_Rest_arg)...),
			_Myfirst(::std:: forward<_This2>(_This_arg))
		{	
		}

	template<class _Alloc,
		class _This2,
		class... _Rest2,
		enable_if_t<conjunction<
			_Tuple_perfect_val<_Myt, _This2, _Rest2...>,
			_Tuple_implicit_val<_Myt, _This2, _Rest2...>
		>::value, int> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			_This2&& _This_arg, _Rest2&&... _Rest_arg)
		: tuple(_Alloc_exact_args_t{}, _Al, ::std:: forward<_This2>(_This_arg), ::std:: forward<_Rest2>(_Rest_arg)...)
		{	
		}

	template<class _Alloc,
		class _This2,
		class... _Rest2,
		enable_if_t<conjunction<
			_Tuple_perfect_val<_Myt, _This2, _Rest2...>,
			_Tuple_explicit_val<_Myt, _This2, _Rest2...>
		>::value, int> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			_This2&& _This_arg, _Rest2&&... _Rest_arg)
		: tuple(_Alloc_exact_args_t{}, _Al, ::std:: forward<_This2>(_This_arg), ::std:: forward<_Rest2>(_Rest_arg)...)
		{	
		}

	template<class... _Other,
		_Tuple_implicit_t<_Myt, _Other...> = 0,
		_Tuple_convert_move_t<_Myt, _Other...> = 0>
		constexpr tuple(tuple<_Other...>&& _Right)


		: _Mybase(_Unpack_tuple_t{}, (typename tuple<_Other...>::_Mybase&&) _Right),
			_Myfirst(::std:: forward<typename tuple<_Other...>::_This_type>(_Right._Myfirst._Val))
		{	
		}

	template<class... _Other,
		_Tuple_explicit_t<_Myt, _Other...> = 0,
		_Tuple_convert_move_t<_Myt, _Other...> = 0>
		constexpr explicit tuple(tuple<_Other...>&& _Right)


		: _Mybase(_Unpack_tuple_t{}, (typename tuple<_Other...>::_Mybase&&) _Right),
			_Myfirst(::std:: forward<typename tuple<_Other...>::_This_type>(_Right._Myfirst._Val))
		{	
		}

	template<class _Alloc,
		class... _Other,
		_Tuple_implicit_t<_Myt, _Other...> = 0,
		_Tuple_convert_move_t<_Myt, _Other...> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			tuple<_Other...>&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
		{	
		}

	template<class _Alloc,
		class... _Other,
		_Tuple_explicit_t<_Myt, _Other...> = 0,
		_Tuple_convert_move_t<_Myt, _Other...> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			tuple<_Other...>&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
		{	
		}

	template<class... _Other>
		_Myt& operator=(const tuple<_Other...>& _Right)
		{	
		_Myfirst._Val = _Right._Myfirst._Val;
		_Get_rest() = _Right._Get_rest();
		return (*this);
		}

	template<class... _Other>
		_Myt& operator=(tuple<_Other...>&& _Right)
		{	
		_Myfirst._Val = ::std:: forward<typename tuple<_Other...>::_This_type>
			(_Right._Myfirst._Val);
		_Get_rest() = ::std:: forward<typename tuple<_Other...>::_Mybase>
			(_Right._Get_rest());
		return (*this);
		}

	template<class... _Other>
		constexpr bool _Equals(const tuple<_Other...>& _Right) const
		{	
		static_assert(_Mysize == sizeof...(_Other),
			"comparing tuple to object with different size");
		return (_Myfirst._Val == _Right._Myfirst._Val
			&& _Mybase::_Equals(_Right._Get_rest()));
		}

	template<class... _Other>
		constexpr bool _Less(const tuple<_Other...>& _Right) const
		{	
		static_assert(_Mysize == sizeof...(_Other),
			"comparing tuple to object with different size");
		return (_Myfirst._Val < _Right._Myfirst._Val
			|| (!(_Right._Myfirst._Val < _Myfirst._Val)
				&& _Mybase::_Less(_Right._Get_rest())));
		}

	template<class _Alloc,
		class _This2 = _This,
		class = enable_if_t<conjunction<is_default_constructible<_This2>,
										is_default_constructible<_Rest>...>::value> >
		tuple(allocator_arg_t, const _Alloc& _Al)
		: _Mybase(allocator_arg, _Al), _Myfirst(_Al, _Tuple_alloc)
		{	
		}

	template<class _Alloc>
		tuple(allocator_arg_t, const _Alloc& _Al,
			const _Myt& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
		{	
		}

	tuple(const _Myt&) = default;
	tuple(_Myt&&) = default;

	template<class _First,
		class _Second,
		_Tuple_implicit_t<_Myt, const _First&, const _Second&> = 0>
		constexpr tuple(const pair<_First, _Second>& _Right)


		: _Mybase(_Exact_args_t{}, _Right.second), _Myfirst(_Right.first)
		{	
		}

	template<class _First,
		class _Second,
		_Tuple_explicit_t<_Myt, const _First&, const _Second&> = 0>
		constexpr explicit tuple(const pair<_First, _Second>& _Right)


		: _Mybase(_Exact_args_t{}, _Right.second), _Myfirst(_Right.first)
		{	
		}

	template<class _Alloc,
		class _First,
		class _Second,
		_Tuple_implicit_t<_Myt, const _First&, const _Second&> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			const pair<_First, _Second>& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
		{	
		}

	template<class _Alloc,
		class _First,
		class _Second,
		_Tuple_explicit_t<_Myt, const _First&, const _Second&> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			const pair<_First, _Second>& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, _Right)
		{	
		}

	_Myt& operator=(const _Myt& _Right)
		{	
		_Myfirst._Val = _Right._Myfirst._Val;
		_Get_rest() = _Right._Get_rest();
		return (*this);
		}

	template<class _First,
		class _Second>
		_Myt& operator=(const pair<_First, _Second>& _Right)
		{	
		static_assert(_Mysize == 2,
			"assigning to tuple from object with different size");
		_Myfirst._Val = _Right.first;
		_Get_rest()._Myfirst._Val = _Right.second;
		return (*this);
		}

	template<class _Alloc>
		tuple(allocator_arg_t, const _Alloc& _Al,
			_Myt&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
		{	
		}

	template<class _First,
		class _Second,
		_Tuple_implicit_t<_Myt, _First, _Second> = 0>
		constexpr tuple(pair<_First, _Second>&& _Right)


		: _Mybase(_Exact_args_t{}, ::std:: forward<_Second>(_Right.second)),
			_Myfirst(::std:: forward<_First>(_Right.first))
		{	
		}

	template<class _First,
		class _Second,
		_Tuple_explicit_t<_Myt, _First, _Second> = 0>
		constexpr explicit tuple(pair<_First, _Second>&& _Right)


		: _Mybase(_Exact_args_t{}, ::std:: forward<_Second>(_Right.second)),
			_Myfirst(::std:: forward<_First>(_Right.first))
		{	
		}

	template<class _Alloc,
		class _First,
		class _Second,
		_Tuple_implicit_t<_Myt, _First, _Second> = 0>
		tuple(allocator_arg_t, const _Alloc& _Al,
			pair<_First, _Second>&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
		{	
		}

	template<class _Alloc,
		class _First,
		class _Second,
		_Tuple_explicit_t<_Myt, _First, _Second> = 0>
		explicit tuple(allocator_arg_t, const _Alloc& _Al,
			pair<_First, _Second>&& _Right)
		: tuple(_Alloc_unpack_tuple_t{}, _Al, ::std:: move(_Right))
		{	
		}

	_Myt& operator=(_Myt&& _Right)
		noexcept(is_nothrow_move_assignable<_This>::value && is_nothrow_move_assignable<_Mybase>::value)
#line 720 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tuple"
		{	
		_Myfirst._Val = ::std:: forward<_This>(_Right._Myfirst._Val);
		_Get_rest() = ::std:: forward<_Mybase>(_Right._Get_rest());
		return (*this);
		}

	template<class _First,
		class _Second>
		_Myt& operator=(pair<_First, _Second>&& _Right)
		{	
		static_assert(_Mysize == 2,
			"assigning to tuple from object with different size");
		_Myfirst._Val = ::std:: forward<_First>(_Right.first);
		_Get_rest()._Myfirst._Val = ::std:: forward<_Second>(_Right.second);
		return (*this);
		}

	_Mybase& _Get_rest() noexcept
		{	
		return (*this);
		}

	constexpr const _Mybase& _Get_rest() const noexcept
		{	
		return (*this);
		}

	_Tuple_val<_This> _Myfirst;	

	void swap(tuple& _Right)
		noexcept((conjunction<_Is_nothrow_swappable<_This>, _Is_nothrow_swappable<_Rest>...>::value))
#line 752 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tuple"
		{	
		_Swap_adl(_Myfirst._Val, _Right._Myfirst._Val);
		_Mybase::swap(_Right._Get_rest());
		}
	};


	

template<class... _Types1,
	class... _Types2> inline
	constexpr bool operator==(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (_Left._Equals(_Right));
	}

template<class... _Types1,
	class... _Types2> inline
	constexpr bool operator!=(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (!(_Left == _Right));
	}

template<class... _Types1,
	class... _Types2> inline
	constexpr bool operator<(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (_Left._Less(_Right));
	}

template<class... _Types1,
	class... _Types2> inline
	constexpr bool operator>=(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (!(_Left < _Right));
	}

template<class... _Types1,
	class... _Types2> inline
	constexpr bool operator>(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (_Right < _Left);
	}

template<class... _Types1,
	class... _Types2> inline
	constexpr bool operator<=(const tuple<_Types1...>& _Left,
		const tuple<_Types2...>& _Right)
	{	
	return (!(_Right < _Left));
	}

template<class... _Types,
	class = enable_if_t<conjunction<_Is_swappable<_Types>...>::value>> inline
	void swap(tuple<_Types...>& _Left,
		tuple<_Types...>& _Right)
			noexcept(noexcept(_Left.swap(_Right)))
	{	
	return (_Left.swap(_Right));
	}


	
template<class _Ty,
	class _Tuple>
	struct _Tuple_element;

template<class _This,
	class... _Rest>
	struct _Tuple_element<_This, tuple<_This, _Rest...> >
	{	
	typedef int _Check_type;
	static_assert(is_void<typename _Tuple_element<_This,
		tuple<_Rest...> >::_Check_type>::value,
		"duplicate type T in get<T>(tuple)");

	typedef _This type;
	typedef tuple<_This, _Rest...> _Ttype;
	};

template<class _Ty,
	class _This,
	class... _Rest>
	struct _Tuple_element<_Ty, tuple<_This, _Rest...> >
		: public _Tuple_element<_Ty, tuple<_Rest...> >
	{	
	};

template<class _Ty>
	struct _Tuple_element<_Ty, tuple<> >
	{	
	typedef void _Check_type;	
	};

template<class _Ty,
	class _Tuple>
	struct _Tuple_element<_Ty, const _Tuple>
		: public _Tuple_element<_Ty, _Tuple>
	{	
	typedef _Tuple_element<_Ty, _Tuple> _Mybase;
	typedef typename add_const<typename _Mybase::type>::type type;
	};

template<class _Ty,
	class _Tuple>
	struct _Tuple_element<_Ty, volatile _Tuple>
		: public _Tuple_element<_Ty, _Tuple>
	{	
	typedef _Tuple_element<_Ty, _Tuple> _Mybase;
	typedef typename add_volatile<typename _Mybase::type>::type type;
	};

template<class _Ty,
	class _Tuple>
	struct _Tuple_element<_Ty, const volatile _Tuple>
		: public _Tuple_element<_Ty, _Tuple>
	{	
	typedef _Tuple_element<_Ty, _Tuple> _Mybase;
	typedef typename add_cv<typename _Mybase::type>::type type;
	};

	
template<size_t _Index,
	class... _Types> inline
	constexpr typename tuple_element<_Index, tuple<_Types...> >::type&
		get(tuple<_Types...>& _Tuple) noexcept
	{	
	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
		_Ttype;
	return (((_Ttype&)_Tuple)._Myfirst._Val);
	}

template<size_t _Index,
	class... _Types> inline
	constexpr const typename tuple_element<_Index, tuple<_Types...> >::type&
		get(const tuple<_Types...>& _Tuple) noexcept
	{	
	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
		_Ttype;
	return (((_Ttype&)_Tuple)._Myfirst._Val);
	}

template<size_t _Index,
	class... _Types> inline
	constexpr typename tuple_element<_Index, tuple<_Types...> >::type&&
		get(tuple<_Types...>&& _Tuple) noexcept
	{	
	typedef typename tuple_element<_Index, tuple<_Types...> >::_Ttype
		_Ttype;
	typedef typename tuple_element<_Index, tuple<_Types...> >::type&&
		_RRtype;
	return (::std:: forward<_RRtype>(((_Ttype&)_Tuple)._Myfirst._Val));
	}

	
template<class _Ty,
	class... _Types> inline
	constexpr _Ty& get(tuple<_Types...>& _Tuple) noexcept
	{	
	typedef typename _Tuple_element<_Ty, tuple<_Types...> >::_Ttype _Ttype;
	return (((_Ttype&)_Tuple)._Myfirst._Val);
	}

template<class _Ty,
	class... _Types> inline
	constexpr const _Ty& get(const tuple<_Types...>& _Tuple) noexcept
	{	
	typedef typename _Tuple_element<_Ty, tuple<_Types...> >::_Ttype _Ttype;
	return (((_Ttype&)_Tuple)._Myfirst._Val);
	}

template<class _Ty,
	class... _Types> inline
	constexpr _Ty&& get(tuple<_Types...>&& _Tuple) noexcept
	{	
	typedef typename _Tuple_element<_Ty, tuple<_Types...> >::_Ttype _Ttype;
	return (::std:: forward<_Ty&&>(((_Ttype&)_Tuple)._Myfirst._Val));
	}

	













template<class _This,
	class... _Rest>
	template<class _Tag,
		class _Alloc,
		class _Tpl,
		size_t... _Indices,
		enable_if_t<is_same<_Tag, _Alloc_unpack_tuple_t>::value, int>> inline
		tuple<_This, _Rest...>::tuple(_Tag, const _Alloc& _Al, _Tpl&& _Right, integer_sequence<size_t, _Indices...>)
		: tuple(_Alloc_exact_args_t{}, _Al, ::std:: get<_Indices>(::std:: forward<_Tpl>(_Right))...)
		{	
		}

	
template<class... _Types> inline
	constexpr tuple<typename _Unrefwrap<_Types>::type...>
		make_tuple(_Types&&... _Args)
	{	
	typedef tuple<typename _Unrefwrap<_Types>::type...> _Ttype;
	return (_Ttype(::std:: forward<_Types>(_Args)...));
	}

	
template<class... _Types> inline
	constexpr tuple<_Types&...>
		tie(_Types&... _Args) noexcept
	{	
	typedef tuple<_Types&...> _Ttype;
	return (_Ttype(_Args...));
	}


	

template<class... _Types> inline
	constexpr tuple<_Types&&...>
		forward_as_tuple(_Types&&... _Args) noexcept
	{	
	return (tuple<_Types&&...>(::std:: forward<_Types>(_Args)...));
	}


	
template<class _Seq_type1,
	class _Seq_type2>
	struct _Cat_sequences;

template<size_t... _Indexes1,
	size_t... _Indexes2>
	struct _Cat_sequences<integer_sequence<size_t, _Indexes1...>,
		integer_sequence<size_t, _Indexes2...> >
	{	
	typedef integer_sequence<size_t, _Indexes1..., _Indexes2...> type;
	};

	
template<class _Ty,
	size_t _Size>
	class array;

template<size_t _Idx,
	class _Ty,
	size_t _Size>
	constexpr _Ty& get(array<_Ty, _Size>& _Arr) noexcept;

template<size_t _Idx,
	class _Ty,
	size_t _Size>
	constexpr const _Ty& get(const array<_Ty, _Size>& _Arr) noexcept;

template<size_t _Idx,
	class _Ty,
	size_t _Size>
	constexpr _Ty&& get(array<_Ty, _Size>&& _Arr) noexcept;

	
template<class _Ty,
	class... _For_array>
	struct _View_as_tuple
	{	
	static_assert(_Always_false<_Ty>::value,
		"Unsupported tuple_cat arguments.");
	};

template<class... _Types>
	struct _View_as_tuple<tuple<_Types...> >
	{	
	typedef tuple<_Types...> type;
	};

template<class _Ty1,
	class _Ty2>
	struct _View_as_tuple<pair<_Ty1, _Ty2> >
	{	
	typedef tuple<_Ty1, _Ty2> type;
	};

template<class _Ty,
	class... _Types>
	struct _View_as_tuple<array<_Ty, 0>, _Types...>
	{	
	typedef tuple<_Types...> type;
	};

template<class _Ty,
	size_t _Size,
	class... _Types>
	struct _View_as_tuple<array<_Ty, _Size>, _Types...>
		: _View_as_tuple<array<_Ty, _Size - 1>, _Ty, _Types...>
	{	
	};

	
template<size_t _Nx,
	class _Ty>
	struct _Repeat_for
		: integral_constant<size_t, _Nx>
	{	
	};

	
template<class _Ret,
	class _Kx_arg,
	class _Ix_arg,
	size_t _Ix_next,
	class... _Tuples>
	struct _Tuple_cat2
	{	
	static_assert(sizeof...(_Tuples) == 0,
		"Unsupported tuple_cat arguments.");
	typedef _Ret type;
	typedef _Kx_arg _Kx_arg_seq;
	typedef _Ix_arg _Ix_arg_seq;
	};

template<class... _Types1,
	class _Kx_arg,
	size_t... _Ix,
	size_t _Ix_next,
	class... _Types2,
	class... _Rest>
	struct _Tuple_cat2<tuple<_Types1...>, _Kx_arg,
		integer_sequence<size_t, _Ix...>, _Ix_next,
		tuple<_Types2...>, _Rest...>
		: _Tuple_cat2<
			tuple<_Types1..., _Types2...>,
			typename _Cat_sequences<_Kx_arg,
				make_integer_sequence<size_t, sizeof...(_Types2)> >::type,
			integer_sequence<size_t, _Ix...,
				_Repeat_for<_Ix_next, _Types2>::value...>,
			_Ix_next + 1,
			_Rest...>
	{	
	};

template<class... _Tuples>
	struct _Tuple_cat1
		: _Tuple_cat2<tuple<>, integer_sequence<size_t>,
				integer_sequence<size_t>, 0,
			typename _View_as_tuple<typename decay<_Tuples>::type>::type...>
	{	
	};

template<class _Ret,
	size_t... _Kx,
	size_t... _Ix,
	class _Ty> inline
	constexpr _Ret _Tuple_cat(integer_sequence<size_t, _Kx...>,
		integer_sequence<size_t, _Ix...>, _Ty&& _Arg)
	{	
	return (_Ret(::std:: get<_Kx>(::std:: get<_Ix>(::std:: forward<_Ty>(_Arg)))...));
	}

template<class _Ret,
	class _Ty> inline
	constexpr _Ret _Tuple_cat(integer_sequence<size_t>,
		integer_sequence<size_t>, _Ty&&)
	{	
	return (_Ret());
	}

template<class... _Tuples> inline
	constexpr typename _Tuple_cat1<_Tuples...>::type
		tuple_cat(_Tuples&&... _Tpls)
	{	
	typedef _Tuple_cat1<_Tuples...> _Cat1;
	return (_Tuple_cat<typename _Cat1::type>(
		typename _Cat1::_Kx_arg_seq(), typename _Cat1::_Ix_arg_seq(),
		::std:: forward_as_tuple(::std:: forward<_Tuples>(_Tpls)...)));
	}


	
template<class _Tpl,
	class _Fx,
	size_t... _Indices> inline
	void _For_each_tuple_element_impl(_Tpl&& _Tuple,
		_Fx _Func, integer_sequence<size_t, _Indices...>)
	{	
	int _Ignored[] = { (static_cast<void>(_Func(
		::std:: get<_Indices>(::std:: forward<_Tpl>(_Tuple))
		)), 0)... };
	(void)_Ignored;
	}

template<class _Tpl,
	class _Fx> inline
	void _For_each_tuple_element(_Tpl&& _Tuple, _Fx _Func)
	{	
	_For_each_tuple_element_impl(
		::std:: forward<_Tpl>(_Tuple),
		_Func,
		make_integer_sequence<size_t,
			tuple_size<remove_reference_t<_Tpl>>::value>()
		);
	}


	
template<class _Ty1,
	class _Ty2>
	template<class _Tuple1,
		class _Tuple2,
		size_t... _Indexes1,
		size_t... _Indexes2> inline
		pair<_Ty1, _Ty2>::pair(_Tuple1& _Val1,
			_Tuple2& _Val2,
			integer_sequence<size_t, _Indexes1...>,
			integer_sequence<size_t, _Indexes2...>)
		: first(::std:: get<_Indexes1>(::std:: move(_Val1))...),
			second(::std:: get<_Indexes2>(::std:: move(_Val2))...)
		{	
		(void) _Val1;	
		(void) _Val2;
		}

	
template<class _Ty1,
	class _Ty2>
	template<class... _Types1,
		class... _Types2> inline
		pair<_Ty1, _Ty2>::pair(piecewise_construct_t,
			tuple<_Types1...> _Val1,
			tuple<_Types2...> _Val2)
		: pair(_Val1, _Val2,
			make_integer_sequence<size_t, sizeof...(_Types1)>(),
			make_integer_sequence<size_t, sizeof...(_Types2)>())
		{	
		}

}

namespace std {
	
template<class... _Types,
	class _Alloc>
	struct uses_allocator<tuple<_Types...>, _Alloc>
		: true_type
	{	
	};

}	


namespace std {
namespace tr1 {	
using ::std:: get;
using ::std:: ignore;
using ::std:: make_tuple;
using ::std:: ref;
using ::std:: tie;
using ::std:: tuple;
}	
}
#line 1224 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tuple"

 
 #pragma warning(pop)
 #pragma pack(pop)
#line 1229 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tuple"
#line 1230 "C:\\Program Files (x86)\\Microsoft Visual Studio 14.0\\VC\\include\\tuple"






#line 5 "block_match_process.cpp"
#line 1 "d:\\git\\block_match\\block_match\\stack_vector.hpp"
#pragma once


template <typename T, size_t stackBufferSize>
class StackVector
{
public:
	StackVector(size_t size)
		: m_size(size)
	{
		if (size <= stackBufferSize)
			m_isOnStack = true;
		else
		{
			m_isOnStack = false;
			ptr = new T[size];
		}
	}
	~StackVector()
	{
		if (!m_isOnStack)
			if (ptr)
				delete[]ptr;
	}
	T& operator[](size_t i)
	{
		if (m_isOnStack)
			return stackBuffer[i];
		else
			return ptr[i];
	}
	const T& operator[](size_t i) const
	{
		if (m_isOnStack)
			return stackBuffer[i];
		else
			return ptr[i];
	}
	bool bad_alloc()
	{
		if (!m_isOnStack && ptr == null)
			return true;
		else
			return false;
	}
private:
	size_t m_size;
	bool m_isOnStack;
	union {
		T *ptr;
		T stackBuffer[stackBufferSize];
	};
};#line 6 "block_match_process.cpp"

typedef cudaError_t(ProcessFunction)(float *blocks_A, float *blocks_B, int numBlocks_A, int numBlocks_B, int block_B_groupSize, int blockSize, float *result, int numProcessors, int numThreads, cudaStream_t stream);
typedef cudaError_t(ProcessFunction_borderCheck)(float *blocks_A, float *blocks_B, int numBlocks_A, int numBlocks_B, int block_B_blockSize, int blockSize, float *result, int numProcessors, int numThreads, int numTasks, cudaStream_t stream);
typedef void(CopyBlockMethod)(float *buf, float *src, int mat_M, int mat_N, int index_x, int index_y, int block_M, int block_N);
typedef void(SequenceBIndexMethod)(float *buf, float *src, int);

template <ProcessFunction processFunction, ProcessFunction_borderCheck processFunction_borderCheck,
	CopyBlockMethod copyBlockAMethod, CopyBlockMethod copyBlockBMethod>
	bool processWorker(float *matA, float *matB, float *result,
		float *bufferA, int matA_M, int matA_N, int index_A_M_begin, int index_A_M_end, int index_A_N_begin, int index_A_N_end,
		float *bufferB, int matB_M, int matB_N,
		int block_M, int block_N,
		int neighbour_M, int neighbour_N,
		int strideA_M, int strideA_N,
		int strideB_M, int strideB_N,
		float *device_bufferA, float *device_bufferB, float *device_bufferC,
		cudaStream_t stream, int numberOfGPUDeviceMultiProcessor, const int numberOfGPUProcessorThread)
{
	int blockSize = block_M * block_N;
	int neighbourSize = (neighbour_M + strideB_M - 1) / strideB_M * (neighbour_N + strideB_N - 1) / strideB_N;

	float *c_bufferA = bufferA;
	float *c_bufferB = bufferB;
	float *c_result = result;

	int neighbour_M_middle = neighbour_M / 2;
	int neighbour_N_middle = neighbour_N / 2;

	int blocksPerProcessor = 0;
	int filledProcessor = 0;
	int numTasks = 0;
	int numBlocks_A = 0, numBlocks_B = 0;

	for (int ind_A_M = index_A_M_begin; ind_A_M < index_A_M_end; ind_A_M += strideA_M)
	{
		for (int ind_A_N = index_A_N_begin; ind_A_N < index_A_N_end; ind_A_N += strideA_N)
		{
			copyBlockAMethod(c_bufferA, matA, matA_M, matA_N, ind_A_M, ind_A_N, block_M, block_N);





			for (int ind_neighbour_M = 0; ind_neighbour_M < neighbour_M; ind_neighbour_M += strideB_M)
			{
				int index_x = ind_A_M - neighbour_M_middle + ind_neighbour_M;

				for (int ind_neighbour_N = 0; ind_neighbour_N < neighbour_N; ind_neighbour_N += strideB_N)
				{
					int index_y = ind_A_N - neighbour_N_middle + ind_neighbour_N;

					copyBlockBMethod(c_bufferB, matB, matB_M, matB_N, index_x, index_y, block_M, block_N);

					c_bufferB += blockSize;




				}
			}





			numBlocks_B += neighbourSize;
			numBlocks_A += 1;

			numTasks += neighbourSize;

			blocksPerProcessor += neighbourSize;
			c_bufferA += blockSize;

			if (blocksPerProcessor + neighbourSize > numberOfGPUProcessorThread)
			{
				filledProcessor++;

				if (filledProcessor == numberOfGPUDeviceMultiProcessor)
				{
					cudaError_t cuda_error = cudaMemcpyAsync(device_bufferA, bufferA, numBlocks_A * blockSize * sizeof(float), cudaMemcpyHostToDevice, stream);
					if (cuda_error != cudaSuccess)
						return false;

					cuda_error = cudaMemcpyAsync(device_bufferB, bufferB, numBlocks_B * blockSize * sizeof(float), cudaMemcpyHostToDevice, stream);
					if (cuda_error != cudaSuccess)
						return false;

					cuda_error = processFunction(device_bufferA, device_bufferB, numBlocks_A, numBlocks_B, neighbourSize, blockSize, device_bufferC,
						filledProcessor, blocksPerProcessor, stream);
					if (cuda_error != cudaSuccess)
						return false;

					cuda_error = cudaStreamSynchronize(stream);
					if (cuda_error != cudaSuccess)
						return false;

					cuda_error = cudaMemcpyAsync(c_result, device_bufferC, numTasks * sizeof(float), cudaMemcpyDeviceToHost, stream);
					if (cuda_error != cudaSuccess)
						return false;

					c_result += numTasks;
					c_bufferA = bufferA;
					c_bufferB = bufferB;

					numBlocks_A = 0;
					numBlocks_B = 0;
					numTasks = 0;
					filledProcessor = 0;
				}
				blocksPerProcessor = 0;
			}
		}
	}

	if (numTasks)
	{
		cudaError_t cuda_error = cudaMemcpyAsync(device_bufferA, bufferA, numBlocks_A * blockSize * sizeof(float), cudaMemcpyHostToDevice, stream);
		if (cuda_error != cudaSuccess)
			return false;

		cuda_error = cudaMemcpyAsync(device_bufferB, bufferB, numBlocks_B * blockSize * sizeof(float), cudaMemcpyHostToDevice, stream);
		if (cuda_error != cudaSuccess)
			return false;

		cuda_error = processFunction_borderCheck(device_bufferA, device_bufferB, numBlocks_A, numBlocks_B, neighbourSize, blockSize, device_bufferC,
			(numTasks + numberOfGPUProcessorThread - 1) / numberOfGPUProcessorThread, numberOfGPUProcessorThread, numTasks, stream);
		if (cuda_error != cudaSuccess)
			return false;

		cuda_error = cudaStreamSynchronize(stream);
		if (cuda_error != cudaSuccess)
			return false;

		cuda_error = cudaMemcpyAsync(c_result, device_bufferC, numTasks * sizeof(float), cudaMemcpyDeviceToHost, stream);
		if (cuda_error != cudaSuccess)
			return false;
	}

	return true;
}

bool process(void *_instance, float *matA, float *matB, enum Method method)
{
	struct Context *instance = (struct Context *)_instance;
	ThreadPool &pool = globalContext.pool;

	unsigned numberOfThreads = globalContext.numberOfThreads;

	StackVector<void *, 4>task_handle(numberOfThreads);
	if (task_handle.bad_alloc()) return false;

	float *result_buffer = instance->result_buffer,
		*bufferA = instance->buffer_A,
		*bufferB = instance->buffer_B,
		*device_bufferA = instance->device_buffer_A,
		*device_bufferB = instance->device_buffer_B,
		*device_bufferC = instance->device_result_buffer;

	int matA_M = instance->matA_M,
		matA_N = instance->matA_N,
		matB_M = instance->matB_M,
		matB_N = instance->matB_N,
		block_M = instance->block_M,
		block_N = instance->block_N,
		neighbour_M = instance->neighbour_M,
		neighbour_N = instance->neighbour_N,
		strideA_M = instance->strideA_M,
		strideA_N = instance->strideA_N,
		strideB_M = instance->strideB_M,
		strideB_N = instance->strideB_N,
		result_dim0 = instance->result_dims[0],
		result_dim1 = instance->result_dims[1],
		result_dim2 = instance->result_dims[2],
		result_dim3 = instance->result_dims[3];

	int numberOfGPUDeviceMultiProcessor = globalContext.numberOfGPUDeviceMultiProcessor;
	const int numberOfGPUProcessorThread = globalContext.numberOfGPUProcessorThread;

	int ind_A_N_begin = 0;
	int ind_A_M_end = result_dim0;
	int ind_A_N_end = result_dim1;

	StackVector<
		std::tuple<float *, float *, float *,
		float *, int, int, int, int, int, int,
		float *, int, int,
		int, int,
		int, int,
		int, int,
		int, int,
		float *, float *, float *,
		cudaStream_t, int, const int >, 4>
		para_tuple(numberOfThreads);

	if (para_tuple.bad_alloc())
		return false;

	for (uint32_t i = 0; i < numberOfThreads; ++i)
	{
		int c_index_A_M_begin = ind_A_M_end / numberOfThreads * i;
		int c_index_A_M_end;
		if (i + 1 != numberOfThreads)
		{
			c_index_A_M_end = ind_A_M_end / numberOfThreads * (i + 1);
		}
		else
		{
			c_index_A_M_end = ind_A_M_end;
		}

		float *c_buffer_A = bufferA + i * numberOfGPUDeviceMultiProcessor * numberOfGPUProcessorThread * block_M * block_N;
		float *c_buffer_B = bufferB + i * numberOfGPUDeviceMultiProcessor * numberOfGPUProcessorThread * block_M * block_N;
		float *c_buffer_result = result_buffer + (c_index_A_M_begin)* result_dim1 * result_dim2 * result_dim3;
		float *c_device_buffer_A = device_bufferA + i * numberOfGPUDeviceMultiProcessor * numberOfGPUProcessorThread * block_M * block_N;
		float *c_device_buffer_B = device_bufferB + i * numberOfGPUDeviceMultiProcessor * numberOfGPUProcessorThread * block_M * block_N;
		float *c_device_buffer_C = device_bufferC + i * numberOfGPUDeviceMultiProcessor * numberOfGPUProcessorThread;

		cudaStream_t stream = instance->stream[i];

		para_tuple[i] =
			std::make_tuple(matA, matB, c_buffer_result,
				c_buffer_A, matA_M, matA_N, c_index_A_M_begin, c_index_A_M_end, ind_A_N_begin, ind_A_N_end,
				c_buffer_B, matB_M, matB_N,
				block_M, block_N,
				neighbour_M, neighbour_N,
				strideA_M, strideA_N,
				strideB_M, strideB_N,
				c_device_buffer_A, c_device_buffer_B, c_device_buffer_C,
				stream, numberOfGPUDeviceMultiProcessor, numberOfGPUProcessorThread);
		processWorker<block_match_mse, block_match_mse, copyBlock, copyBlockWithSymmetricPaddding>(matA, matB, c_buffer_result,
			c_buffer_A, matA_M, matA_N, c_index_A_M_begin, c_index_A_M_end, ind_A_N_begin, ind_A_N_end,
			c_buffer_B, matB_M, matB_N,
			block_M, block_N,
			neighbour_M, neighbour_N,
			strideA_M, strideA_N,
			strideB_M, strideB_N,
			c_device_buffer_A, c_device_buffer_B, c_device_buffer_C,
			stream, numberOfGPUDeviceMultiProcessor, numberOfGPUProcessorThread);
		if (method == MSE)
			task_handle[i] = block_match_internal::thread_pool_launcher_helper<decltype((processWorker<block_match_mse, block_match_mse, copyBlock, copyBlockWithSymmetricPaddding>)), (processWorker<block_match_mse, block_match_mse, copyBlock, copyBlockWithSymmetricPaddding>)>(pool, para_tuple[i]);
		else if (method == CC)
			task_handle[i] = block_match_internal::thread_pool_launcher_helper<decltype((processWorker<block_match_cc, block_match_cc, copyBlock, copyBlockWithSymmetricPaddding>)), (processWorker<block_match_cc, block_match_cc, copyBlock, copyBlockWithSymmetricPaddding>)>(pool, para_tuple[i]);

	}
	for (unsigned i = 0; i < numberOfThreads; ++i)
	{
		pool.join(task_handle[i]);
	}
	bool isFailed = false;
	for (unsigned i = 0; i < numberOfThreads; ++i)
	{
		if (pool.get_rc(task_handle[i]) != 0)
			isFailed = true;
		pool.release(task_handle[i]);
	}

	return !isFailed;
}
